// vim:set syntax=asciidoc:

== Code Layout

In literate programming terminology,
a _chunk_ is a named part of the final program.
The program chunks form a tree and the root of that tree
is named '\*' by default.
We follow the convention of naming the root the same as the output
file name.
The process of extracting the program tree formed by the chunks is
called _tangle_.
By the default the program, *atangle*, extracts the root chunk to produce
the Tcl source file.

=== miccautil Source

(((chunk,miccautil.tcl)))

[source,c]
----
<<miccautil.tcl>>=
<<edit warning>>
<<copyright info>>
# ++
#  Project:
#    mrtools
# 
#  Module:
#    miccautil source code
# --

<<required packages>>

namespace eval ::miccautil {
    <<package exports>>
    namespace ensemble create

    <<logger setup>>

    variable version 1.0a1
}

<<miccautil commands>>

package provide miccautil $::miccautil::version
----

=== Testing Source

(((chunk,miccautil.test)))

[source,c]
----
<<miccautil.test>>=
#!/usr/bin/env tclsh
#
<<edit warning>>
#
<<copyright info>>
#
# ++
#  Project:
#    mrtools
# 
#  Module:
#    miccautil test code
# --

package require Tcl 8.6
package require cmdline
package require logger
package require logger::utils
package require logger::appender
package require fileutil
package require ral
package require ralutil
package require tcltest

# Add custom arguments here.
set optlist {
    {level.arg warn {Log debug level}}
}
array set options [::cmdline::getKnownOptions argv $optlist]

::logger::setlevel $options(level)

tcltest::configure {*}$argv

source ../code/miccautil.tcl

namespace eval ::miccautil::test {
    set logger [::logger::init miccautil::test]
    set appenderType [expr {[dict exist [fconfigure stdout] -mode] ?\
            "colorConsole" : "console"}]
    ::logger::utils::applyAppender -appender $appenderType -serviceCmd $logger\
            -appenderArgs {-conversionPattern {\[%c\] \[%p\] '%m'}}
    ::logger::import -all -force -namespace log miccautil::test

    log::info "testing miccautil version: [package require miccautil]"

    namespace import ::tcltest::*
    namespace import ::ral::*
    namespace import ::ralutil::*

    <<test utilities>>
    <<constructor tests>>
    <<method tests>>

    cleanupTests
}
----

include::edit_warning.txt[]

include::copyright_info.txt[]
