'\"
'\" Generated from file 'miccautil\&.man' by tcllib/doctools with format 'nroff'
'\" Copyright (c) 2020 - 2021 by G\&. Andrew Mangogna
'\"
.TH "miccautil" n 1\&.1 miccautil "Support for XUML Model Translation"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
miccautil \- Supporting Executable Model Translation into C
.SH SYNOPSIS
package require \fBTcl  8\&.6\fR
.sp
package require \fBmiccautil  ?1\&.1?\fR
.sp
\fB::miccautil model create\fR \fIobjname\fR \fIsavefile\fR
.sp
\fB::miccautil model new\fR \fIsavefile\fR
.sp
\fB::miccautil dfs\fR \fIgraph\fR ?\fIstart\fR?
.sp
\fB::miccautil spanningTree\fR \fIgraph\fR ?\fIstart\fR?
.sp
\fB::miccautil graphToDot\fR \fIgraph\fR ?\fIedgekeys\fR? ?\fInodekeys\fR?
.sp
\fImodelobj\fR \fBdestroy\fR
.sp
\fImodelobj\fR \fBdomainName\fR
.sp
\fImodelobj\fR \fBclasses\fR
.sp
\fImodelobj\fR \fBattributes\fR \fIclass\fR
.sp
\fImodelobj\fR \fBstates\fR \fIclass\fR
.sp
\fImodelobj\fR \fBevents\fR \fIclass\fR
.sp
\fImodelobj\fR \fBcreationevents\fR \fIclass\fR
.sp
\fImodelobj\fR \fBtransitions\fR \fIclass\fR
.sp
\fImodelobj\fR \fBstartTransitionRecording\fR
.sp
\fImodelobj\fR \fBstopTransitionRecording\fR
.sp
\fImodelobj\fR \fBrecordTransition\fR \fIclass\fR \fIcurrstate\fR \fIevent\fR
.sp
\fImodelobj\fR \fBreportTransitions\fR \fIpattern\fR
.sp
\fImodelobj\fR \fBstartMecateTransitionCount\fR \fIreinobj\fR
.sp
\fImodelobj\fR \fBstopMecateTransitionCount\fR \fIreinobj\fR
.sp
\fImodelobj\fR \fBdefaultAttributes\fR
.sp
\fImodelobj\fR \fBinitialInstancePopulation\fR
.sp
\fImodelobj\fR \fBstateModelGraph\fR \fIclass\fR
.sp
\fImodelobj\fR \fBstateModelDot\fR \fIclass\fR
.sp
.BE
.SH DESCRIPTION
This manpage describes the \fBmiccautil\fR package\&.
\fBMiccautil\fR is a Tcl script-based extension that give a set
of utility procedures to use with \fBmicca\fR generated
XUML domains\&.
.SH COMMANDS
The package exports the following commands which also constitute
an ensemble command on the \fB::miccautil\fR namespace\&.
.TP
\fB::miccautil model create\fR \fIobjname\fR \fIsavefile\fR
.TP
\fB::miccautil model new\fR \fIsavefile\fR
.RS
.TP
\fIobjname\fR
The name of the command to be created which represents the model\&.
The \fBnew\fR version of the constructor creates a name automatically\&.
.TP
\fIsavefile\fR
The name of a file saved from a micca run\&.
This file should be saved in TclRAL native serialization format\&.
.RE
.IP
The \fBcreate\fR and \fBnew\fR methods create an instance of a
\fBmodel\fR object\&.
The \fIsavefile\fR argument is required and is the name of a file
produced by a run of \fBmicca\fR with the \fB-save\fR option\&.
The return value of the function is a fully qualified command that
may be used with the methods given below\&.
.TP
\fB::miccautil dfs\fR \fIgraph\fR ?\fIstart\fR?
.RS
.TP
\fIgraph\fR
a graph command as returned from \fBstruct::graph\fR,
usually obtained by invoking,
\fB\fImodelobj\fR \fBstateModelGraph\fR \fIclass\fR\fR\&.
.TP
\fI?start?\fR
the name of node where the search is to start\&.
If \fIstart\fR is not given,
then the search starts at node given by the \fIinitialstate\fR
attribute of the graph\&.
.RE
.IP
The \fBdfs\fR subcommand performs a depth first search (DFS) of \fIgraph\fR\&.
\fIgraph\fR is a command as returned from \fBstruct::graph\fR,
usually obtained by invoking the \fBstateModelGraph\fR method with the
desired class name\&.
The return value of the command is the empty string\&.
.sp
During the DFS,
each node in the graph is annotated with the following additional attributes:
.RS
.TP
pre
the pre-order number of the node, starting at 1\&.
This is the order in which the node was visited during the DFS\&.
.TP
rpost
the reverse post-order number of the node, starting at 1\&.
This is the order the node would be visited in a reverse post-order
traversal\&.
For graphs that do \fInot\fR contain cycles,
the \fBrpost\fR numbers form a topological sort of the graph\&.
Graphs which have no \fBback\fR edges (see following) have no cycles\&.
.RE
.IP
Each edge in the graph is annotated with one additional attribute:
.RS
.TP
type
the classification of the graph edge\&.
The \fBtype\fR attribute has one of the following values:
.RS
.TP
tree
the edge is part of a spanning tree for the graph,
\fIi\&.e\&.\fR the target node is visited for the first time when the
edge is traversed\&.
.TP
forw
the edge is a forward directed,
\fIi\&.e\&.\fR the target node is a decendent of the source node\&.
.TP
back
the edge is a back edge,
\fIi\&.e\&.\fR the target node is an ancestor of the source node\&.
.TP
cross
the edge is a cross edge\&.
All edges which are not classified as \fBtree\fR, \fBforw\fR,
or \fBback\fR are classified as \fBcross\fR edges\&.
.RE
.RE
.TP
\fB::miccautil spanningTree\fR \fIgraph\fR ?\fIstart\fR?
.RS
.TP
\fIgraph\fR
a graph command as returned from \fBstruct::graph\fR,
usually obtained by invoking,
\fB\fImodelobj\fR stateModelGraph \fIclass\fR\fR\&.
.TP
\fIstart\fR
the name of node where the DFS for the tree is to start\&.
If \fIstart\fR is not given,
then the tree starts at node given by the \fBinitialstate\fR
attribute of the graph\&.
.RE
.IP
The \fBspanningTree\fR subcommand returns a \fBgraph\fR command handle
as obtained from the \fBstruct::graph\fR package in Tcllib\&.
The returned graph contains a spanning tree of the \fIgraph\fR argument\&.
The spanning tree returned is the sub-graph of \fBgraph\fR where only
\fBtree\fR type edges are retained\&.
The caller is responsible for invoking the \fBdestroy\fR method on the
returned graph command when it is no longer needed\&.
It is not necessary to have run the \fBdfs\fR command previously on
\fIgraph\fR as that will be done by \fBspanningTree\fR\&.
.TP
\fB::miccautil graphToDot\fR \fIgraph\fR ?\fIedgekeys\fR? ?\fInodekeys\fR?
.RS
.TP
\fIgraph\fR
a \fBgraph\fR command as returned from \fBstruct::graph\fR,
usually obtained by invoking,
\fB\fImodelobj\fR stateModelGraph \fIclass\fR\fR\&.
.TP
\fIedgekeys\fR
a list of key names which will be included as the label of an edge\&.
.TP
\fInodekeys\fR
a list of key names which will be included in the label of a node\&.
.RE
.IP
The \fBgraphToDot\fR subcommand returns a \fBTcldot\fR command handle which is
the \fBdot\fR representation of \fIgraph\fR\&.
The edges of the dot drawing are annotated with the values given
by the edge attribute keys contained in the \fIedgekeys\fR list\&.
Similarly,
the nodes of the dot drawing are annotated with the values given
by the node attribute keys contained in the \fInodekeys\fR list\&.
The command handle can be used in the same way as those returned
by the \fBstateModelDot\fR method\&.
Note that invoking \fBgraphToDot\fR with the return value of
\fBstateModelGraph\fR does \fInot\fR yield the same rendering as
the \fBstateModelDot\fR method\&.
The later method insures the rendered state model appears more in line
with usual UML notation\&.
.PP
.SH "MODEL OBJECT METHODS"
The return value of the
\fB::miccautil model create\fR and
\fB::miccautil model new\fR
commands is a TclOO command object\&.
The following methods may be applied to the object\&.
.TP
\fImodelobj\fR \fBdestroy\fR
The \fBdestroy\fR method is used to delete \fImodelobj\fR
when it is no longer needed\&.
.TP
\fImodelobj\fR \fBdomainName\fR
The \fBdomainName\fR method returns the name of the domain represented by
\fImodelobj\fR\&.
.TP
\fImodelobj\fR \fBclasses\fR
The \fBclasses\fR method returns a list of the names of the
classes defined in the domain represented by \fImodelobj\fR\&.
.TP
\fImodelobj\fR \fBattributes\fR \fIclass\fR
.RS
.TP
\fIclass\fR
The name of a class in the domain represented by \fImodelobj\fR\&.
.RE
.IP
The \fBattributes\fR method returns a dictionary of the
attributes of \fIclass\fR\&.
The keys to the dictionary are the names of the attributes\&.
The values associated to the keys are the data type of the attribute\&.
If \fIclass\fR does not exist in the domain,
an empty dictionary is returned\&.
.TP
\fImodelobj\fR \fBstates\fR \fIclass\fR
.RS
.TP
\fIclass\fR
The name of a class or assigner in the domain represented by \fImodelobj\fR\&.
.RE
.IP
The \fBstates\fR method returns a list of state names for \fIclass\fR\&.
If \fIclass\fR does not exist in the domain or if class does not have a state
model, an empty list is returned\&.
A state name of, \fI@\fR, indicates the pseudo-initial state
out from which creation events transition\&.
.TP
\fImodelobj\fR \fBevents\fR \fIclass\fR
.RS
.TP
\fIclass\fR
The name of a class or assigner in the domain represented by \fImodelobj\fR\&.
.RE
.IP
The \fBevents\fR method returns a list of event names for \fIclass\fR\&.
If \fIclass\fR does not exist in the domain or if class does not have a state
model or any polymorphic events, an empty list is returned\&.
The returned list includes the event names for any type of event that
the class may have\&.
For example,
a superclass may not have a state model, but could have polymorphic events
and these names would be returned\&.
.TP
\fImodelobj\fR \fBcreationevents\fR \fIclass\fR
.RS
.TP
\fIclass\fR
The name of a class or assigner in the domain represented by \fImodelobj\fR\&.
.RE
.IP
The \fBcreationevents\fR method returns a list of event names for \fIclass\fR
which cause a transition out of the pseudo-initial creation state
(represented here as the state named, "@")\&.
If \fIclass\fR does not exist in the domain or if \fIclass\fR does not have a state model
or any creation events,
an empty list is returned\&.
.TP
\fImodelobj\fR \fBtransitions\fR \fIclass\fR
.RS
.TP
\fIclass\fR
The name of a class or assigner in the domain represented by \fImodelobj\fR\&.
.RE
.IP
The \fBtransitions\fR method returns a relation value that contains the
state transitions for \fIclass\fR\&.
The heading of the returned relation value is:
.CS


|Domain |Model  |State  |Event  |NewState   |Params   |
|string |string |string |string |string     |Relation |

.CE
.IP
where:
.RS
.TP
Domain
is the name of the domain\&.
.TP
Model
is the name of the class or assigner\&.
.TP
State
is the name of a state\&.
A \fIState\fR name of, \fI@\fR, indicates the pseudo-initial state out of
which creation events transition\&.
.TP
Event
is the name of an event which causes a transition out of \fIState\fR\&.
.TP
NewState
is the name of the state entered by the transition caused
when \fIEvent\fR is received in \fIState\fR\&.
A \fINewState\fR name of \fIIG\fR indicates the \fIEvent\fR is ignored
when it is received in \fIState\fR\&.
A \fINewState\fR name of "CH" indicates it is logically impossible to
receive _Event_ in _State_ (\fIi\&.e\&.\fR \fIcan't happen\fR)
and at run time will cause a \fIpanic\fR condition\&.
.TP
Params
is a relation valued attribute giving the parameters of \fIEvent\fR
(and hence the arguments to \fINewState\fR)\&.
The cardinality of the \fIParams\fR attribute is zero if the event
carries no supplemental event data\&.
The \fIParams\fR attribute has the heading:
.RE
.CS


|Name       |Position   |DataType |
|string     |int        |string   |

.CE
.IP
where:
.RS
.TP
Name
is the name of the parameter\&.
.TP
Position
is the order of the parameter carried in \fIEvent\fR\&.
\fIPosition\fR values start at zero and sequentially increase for each tuple
in \fIParams\fR\&.
.TP
DataType
is the "C" type name for the parameter\&.
.RE
.IP
The cardinality of the returned relation is \fIstates\fR times \fIevents\fR
where \fIstates\fR (including the pseudo-initial state for a creation event,
if present in the model) is the number of states in the model and \fIevents\fR
is the number of events\&.
The cardinality of the returned relation is zero if the class has no
state model\&.
Each tuple in the returned relation represents a cell in a conceptual
\fIstates\fR by \fIevents\fR transition matrix with \fINewState\fR
as the cell value\&.
.TP
\fImodelobj\fR \fBstartTransitionRecording\fR
The \fBstartTransitionRecording\fR method initializes internal
data structures in preparation for recording event transitions in
the domain represented by \fImodelobj\fR\&.
In particular,
any previous event transition counts are reset back to zero\&.
Attempting to start an already running session is silently ignored\&.
The method returns the empty string\&.
.TP
\fImodelobj\fR \fBstopTransitionRecording\fR
The \fBstopTransitionRecording\fR method closes an ongoing event
transition recording session\&.
The information gathered during the session is not modified\&.
Attempting to stop an already stopped session is silently ignored\&.
The method returns the empty string\&.
.TP
\fImodelobj\fR \fBrecordTransition\fR \fIclass\fR \fIcurrstate\fR \fIevent\fR
.RS
.TP
\fIclass\fR
The name of a class or assigner in the domain represented by \fImodelobj\fR\&.
.TP
\fIcurrstate\fR
The name of the state in \fIclass\fR which is the source state in
a transition\&.
.TP
\fIevent\fR
The name of an event in \fIclass\fR which caused a transition from
\fIcurrstate\fR\&.
.RE
.IP
The \fBrecordTransition\fR method counts the transition which
occurred when \fIclass\fR was in \fIcurrstate\fR and received \fIevent\fR\&.
It is necessary to start the event transition recording session
by invoking the \fBstartTransitionRecording\fR method before invoking
this method\&.
The method returns a boolean value indicating if the counting occurred,
\fIi\&.e\&.\fR if \fIcurrstate\fR and \fIevent\fR form a valid transition
in \fIclass\fR\&.
.TP
\fImodelobj\fR \fBreportTransitions\fR \fIpattern\fR
.RS
.TP
pattern
A pattern of the format used by the \fBstring match\fR command for the
names of classes or assigners in the domain represented by \fImodelobj\fR\&.
.RE
.IP
The \fBreportTransitions\fR method returns a relation value containing
the transition counts for all classes whose names match \fIpattern\fR\&.
The heading of the returned relation value is:
.CS


|Domain |Model  |State  |Event  |NewState   |TransCount |
|string |string |string |string |string     |int        |

.CE
.IP
where:
.RS
.TP
Domain
is the name of the domain\&.
.TP
Model
is the name of the class or assigner\&.
.TP
State
is the name of a state\&.
A \fIState\fR name of, \fI@\fR, indicates the pseudo-initial state out of
which creation events transition\&.
.TP
Event
is the name of an event which causes a transition out of
\fIState\fR\&.
.TP
NewState
The name of the state entered by the transition caused
when \fIEvent\fR is received in \fIState\fR\&.
A \fINewState\fR name of \fIIG\fR indicates the \fIEvent\fR is ignored
when it is received in \fIState\fR\&.
A \fINewState\fR name of \fICH\fR indicates it is logically impossible to
receive \fIEvent\fR in \fIState\fR (\fIi\&.e\&.\fR \fIcan't happen\fR)
and at run time will cause a \fIpanic\fR condition\&.
.TP
TransCount
The number of times recorded when \fIModel\fR was in a given
\fIState\fR and \fIEvent\fR was received\&.
.RE
.TP
\fImodelobj\fR \fBstartMecateTransitionCount\fR \fIreinobj\fR
.RS
.TP
\fIreinobj\fR
An object command as returned from the \fBrein\fR command of
the \fBmecate\fR package\&.
A \fIreinobj\fR represents a \fBbosal\fR generated test harness and
methods of the object allow for operations on the test harness\&.
.RE
.IP
The \fBstartMecateTransitionCount\fR method starts capturing event
transitions as they arrive from a \fBbosal\fR generated test harness\&.
This method uses the \fBtraceNotify\fR method of the \fIreinobj\fR to
install a callback handler for when event traces arrive\&.
Note this method does \fInot\fR turn on event tracing in the test harness\&.
That is done with the \fB\fIreinobj\fR trace on\fR command which must be
executed before any events will be received and counted\&.
.TP
\fImodelobj\fR \fBstopMecateTransitionCount\fR \fIreinobj\fR
.RS
.TP
\fIreinobj\fR
An object command as returned from the \fBrein\fR command of
the \fBmecate\fR package\&.
A \fIreinobj\fR represents a \fBbosal\fR generated test harness and
methods of the object allow for operations on the test harness\&.
.RE
.IP
The \fBstopMecateTransitionCount\fR method stops capturing event transitions
as they arrive from a \fBbosal\fR generated test harness\&.
The previous \fIreinobj\fR callback handler is re-instated\&.
.TP
\fImodelobj\fR \fBdefaultAttributes\fR
The \fBdefaultAttributeValues\fR returns a relation value giving
the default values that attributes in the domain represented by
\fImodelobj\fR are given if not otherwise specified\&.
The heading of the returned relation is:
.CS


|Domain         |Class      |Defaults |
|string         |string     |Relation |

.CE
.IP
where:
.RS
.TP
Domain
is the name of the domain\&.
.TP
Class
is the name of a class in *Domain*\&.
.TP
Defaults
is a relation valued attribute containing the attribute names
and values for \fIClass\fR\&.
.RE
.IP
The heading of the \fIDefaults\fR attribute is:
.CS


|Attribute      |Value      |DataType |
|string         |string     |string   |

.CE
.IP
where:
.RS
.TP
Attribute
is the name of the attribute of the instance\&.
.TP
Value
is the value of the attribute in the instance\&.
.TP
DataType
is the "C" type name for the attribute\&.
.RE
.TP
\fImodelobj\fR \fBinitialInstancePopulation\fR
The \fBinitialInstancePopulation\fR method returns a relation value
containing the initial instance population of the domain
represented by \fImodelobj\fR\&.
The heading of the returned relation is:
.CS


|Domain         |Class  |Instances |
|string         |string |Relation  |

.CE
.IP
where:
.RS
.TP
Domain
is the name of the domain\&.
.TP
Class
is the name of a class in \fIDomain\fR\&.
.TP
Instances
is a relation valued attribute containing the initial
instances of \fIClass\fR\&.
.RE
.IP
The heading of the \fIInstance\fR attribute is:
.CS


|Instance       |ID         |Attributes |
|string         |int        |Relation   |

.CE
.IP
where:
.RS
.TP
Instance
is the name given to the inital instance in the \fBmicca\fR
population\&.
.TP
ID
is the numeric identifier of the instance\&.
This number is the same as the array index of the instance in the
storage pool for the class\&.
.TP
Attributes
is a relation valued attribute giving the attribute names and
values of the initial instance\&.
.RE
.IP
The heading of the \fIAttributes\fR attribute is:
.CS


|Attribute  |Value  |
|string     |string |

.CE
.IP
where:
.RS
.TP
Attribute
is the name of the attribute of the instance\&.
.TP
Value
is the value of the attribute in the instance\&.
.RE
.TP
\fImodelobj\fR \fBstateModelGraph\fR \fIclass\fR
.RS
.TP
\fIclass\fR
The name of a class or assigner in the domain represented by \fImodelobj\fR\&.
.RE
.IP
The \fBstateModelGraph\fR method returns a \fBgraph\fR command from the
\fBstruct::graph\fR package in Tcllib that represents the state model for
\fIclass\fR as a graph\&.
It is the responsibility of the caller to insure that
the returned graph command is disposed of properly by invoking
\fIgraph\fR \fBdestroy\fR when no longer needed\&.
If \fIclass\fR does not not have a state model,
the returned \fIgraph\fR has no nodes or arcs\&.
The returned graph is annotated by the following key / value attributes:
.RS
.TP
domain
the name of the domain\&.
.TP
class
the name of the class or assigner\&.
.TP
initialstate
the name of the default initial state\&.
.TP
defaulttrans
the name of the default transition, \fIi\&.e\&.\fR
\fIIG\fR or \fICH\fR\&.
.RE
.IP
Nodes in the graph represent states in the state model and
are named the same as the state name\&.
Nodes are annotated by the following key / value attributes:
.RS
.TP
activity
the state activity code\&.
.TP
final
a boolean value indicating if the state is a final state\&.
.RE
.IP
Arcs in the graph represent the directed transitions from a source state
to a target state\&.
Note that \fIIG\fR and \fICH\fR transitions are \fInot\fR represented by
arcs since as target states they do not cause an actual transition\&.
Arcs are annotated by the following key / value attributes:
.RS
.TP
event
the name of the event causing the transition\&.
.TP
params
a list of event parameter names giving the additional values
carried by the event\&.
.RE
.TP
\fImodelobj\fR \fBstateModelDot\fR \fIclass\fR
.RS
.TP
\fIclass\fR
The name of a class or assigner in the domain represented by
\fImodelobj\fR\&.
.RE
.IP
The \fBstateModelDot\fR method returns a
\fI\fBTcldot\fR\fR [http://graphviz\&.org/pdf/tcldot\&.3tcl\&.pdf]
command handle to the state model of \fIclass\fR\&.
The command handle can be used to render an image of
the state model graph (along with many other uses)\&.
.PP
.SH "SEE ALSO"
micca
.SH KEYWORDS
translation
.SH COPYRIGHT
.nf
Copyright (c) 2020 - 2021 by G\&. Andrew Mangogna

.fi
