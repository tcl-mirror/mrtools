[vset version 1.0]
[manpage_begin miccautil n [vset version]]
[comment {
# This software is copyrighted 2020 by G. Andrew Mangogna.
# The following terms apply to all files associated with the software unless
# explicitly disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors and
# need not follow the licensing terms described here, provided that the
# new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
# OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
# THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
# OR MODIFICATIONS.
# 
# GOVERNMENT USE: If you are acquiring this software on behalf of the
# U.S. government, the Government shall have only "Restricted Rights"
# in the software and related documentation as defined in the Federal
# Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
# are acquiring the software on behalf of the Department of Defense,
# the software shall be classified as "Commercial Computer Software"
# and the Government shall have only "Restricted Rights" as defined in
# Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
# the authors grant the U.S. Government and others acting in its behalf
# permission to use and distribute the software in accordance with the
# terms specified in this license.
}]
[moddesc "Support for XUML Model Translation"]
[titledesc "Supporting Executable Model Translation into C"]
[copyright "2020 by G. Andrew Mangogna"]
[require Tcl 8.6]
[require miccautil [opt [vset version]]]

[description]

This manpage describes the [package miccautil] package.
[package Miccautil] is a Tcl script-based extension that give a set
of utility procedures to use with [cmd micca] generated
XUML domains.

[section COMMANDS]

The package exports the following commands which also constitute
an ensemble command on the [namespace ::miccautil] namespace.

[list_begin definitions]

[call [cmd "::miccautil model create"] [arg objname] [arg savefile]]
[call [cmd "::miccautil model new"] [arg savefile]]

[list_begin arguments]
[arg_def {} objname]
    The name of the command to be created which represents the model.
    The [method new] version of the constructor creates a name automatically.
[arg_def {} savefile]
    The name of a file saved from a micca run.
    This file should be saved in TclRAL native serialization format.
[list_end]

The [method create] and [method new] methods create an instance of a
[cmd model] object.
The [arg savefile] argument is required and is the name of a file
produced by a run of [syscmd micca] with the [option -save] option.
The return value of the function is a fully qualified command that
may be used with the methods given below.

[call [cmd "::miccautil dfs"] [arg graph] [opt [arg start]]]

[list_begin arguments]
[arg_def {} graph]
    a graph command as returned from [cmd struct::graph],
    usually obtained by invoking,
    [cmd "[arg modelobj] [method stateModelGraph] [arg class]"].
[arg_def {} [opt start]]
    the name of node where the search is to start.
    If [arg start] is not given,
    then the search starts at node given by the [emph initialstate]
    attribute of the graph.
[list_end]

The [cmd dfs] subcommand performs a depth first search (DFS) of [arg graph].
[arg graph] is a command as returned from [cmd struct::graph],
usually obtained by invoking the [method stateModelGraph] method with the
desired class name.
The return value of the command is the empty string.

[para]
During the DFS,
each node in the graph is annotated with the following additional attributes:

[list_begin definitions]
[def pre]
    the pre-order number of the node, starting at 1.
    This is the order in which the node was visited during the DFS.
[def rpost]
    the reverse post-order number of the node, starting at 1.
    This is the order the node would be visited in a reverse post-order
    traversal.
    For graphs that do [emph not] contain cycles,
    the [option rpost] numbers form a topological sort of the graph.
    Graphs which have no [option back] edges (see following) have no cycles.
[list_end]

Each edge in the graph is annotated with one additional attribute:

[list_begin definitions]
[def type]
    the classification of the graph edge.
    The [option type] attribute has one of the following values:

[list_begin definitions]
[def tree]
    the edge is part of a spanning tree for the graph,
    [emph i.e.] the target node is visited for the first time when the
    edge is traversed.
[def forw]
    the edge is a forward directed,
    [emph i.e.] the target node is a decendent of the source node.
[def back]
    the edge is a back edge,
    [emph i.e.] the target node is an ancestor of the source node.
[def cross]
    the edge is a cross edge.
    All edges which are not classified as [option tree], [option forw],
    or [option back] are classified as [option cross] edges.
[list_end]
[list_end]


[call [cmd "::miccautil spanningTree"] [arg graph] [opt [arg start]]]

[list_begin arguments]
[arg_def {} graph]
    a graph command as returned from [cmd struct::graph],
    usually obtained by invoking,
    [cmd "[arg modelobj] stateModelGraph [arg class]"].
[arg_def {} start]
    the name of node where the DFS for the tree is to start.
    If [arg start] is not given,
    then the tree starts at node given by the [option initialstate]
    attribute of the graph.
[list_end]

The [cmd spanningTree] subcommand returns a [cmd graph] command handle
as obtained from the [cmd struct::graph] package in Tcllib.
The returned graph contains a spanning tree of the [arg graph] argument.
The spanning tree returned is the sub-graph of [cmd graph] where only
[option tree] type edges are retained.
The caller is responsible for invoking the [method destroy] method on the
returned graph command when it is no longer needed.
It is not necessary to have run the [cmd dfs] command previously on
[arg graph] as that will be done by [cmd spanningTree].

[call [cmd "::miccautil graphToDot"] [arg graph] [opt [arg edgekeys]]\
        [opt [arg nodekeys]]]

[list_begin arguments]
[arg_def {} graph]
    a [cmd graph] command as returned from [cmd struct::graph],
    usually obtained by invoking,
    [cmd "[arg modelobj] stateModelGraph [arg class]"].
[arg_def {} edgekeys]
    a list of key names which will be included as the label of an edge.
[arg_def {} nodekeys]
    a list of key names which will be included in the label of a node.
[list_end]

The [cmd graphToDot] subcommand returns a [cmd Tcldot] command handle which is
the [cmd dot] representation of [arg graph].
The edges of the dot drawing are annotated with the values given
by the edge attribute keys contained in the [arg edgekeys] list.
Similarly,
the nodes of the dot drawing are annotated with the values given
by the node attribute keys contained in the [arg nodekeys] list.
The command handle can be used in the same way as those returned
by the [cmd stateModelDot] method.

Note that invoking [cmd graphToDot] with the return value of
[cmd stateModelGraph] does [emph not] yield the same rendering as
the [cmd stateModelDot] method.
The later method insures the rendered state model appears more in line
with usual UML notation.

[list_end]

[section {MODEL OBJECT METHODS}]

The return value of the
[cmd "::miccautil model create"] and
[cmd "::miccautil model new"]
commands is a TclOO command object.
The following methods may be applied to the object.

[list_begin definitions]

[call [arg modelobj] [cmd destroy]]
The [method destroy] method is used to delete [arg modelobj]
when it is no longer needed.

[call [arg modelobj] [cmd domainName]]

The [method domainName] method returns the name of the domain represented by
[arg modelobj].

[call [arg modelobj] [cmd classes]]

The [method classes] method returns a list of the names of the
classes defined in the domain represented by [arg modelobj].

[call [arg modelobj] [cmd attributes] [arg class]]

[list_begin arguments]
[arg_def {} class]
    The name of a class in the domain represented by [arg modelobj].
[list_end]

The [method attributes] method returns a dictionary of the
attributes of [arg class].
The keys to the dictionary are the names of the attributes.
The values associated to the keys are the data type of the attribute.
If [arg class] does not exist in the domain,
an empty dictionary is returned.

[call [arg modelobj] [cmd states] [arg class]]

[list_begin arguments]
[arg_def {} class]
    The name of a class or assigner in the domain represented by [arg modelobj].
[list_end]

The [method states] method returns a list of state names for [arg class].
If [arg class] does not exist in the domain or if class does not have a state
model, an empty list is returned.

A state name of, [term @], indicates the pseudo-initial state
out from which creation events transition.

[call [arg modelobj] [cmd events] [arg class]]

[list_begin arguments]
[arg_def {} class]
    The name of a class or assigner in the domain represented by [arg modelobj].
[list_end]

The [method events] method returns a list of event names for [arg class].
If [arg class] does not exist in the domain or if class does not have a state
model or any polymorphic events, an empty list is returned.
The returned list includes the event names for any type of event that
the class may have.
For example,
a superclass may not have a state model, but could have polymorphic events
and these names would be returned.

[call [arg modelobj] [cmd transitions] [arg class]]

[list_begin arguments]
[arg_def {} class]
    The name of a class or assigner in the domain represented by [arg modelobj].
[list_end]

The [method transitions] method returns a relation value that contains the
state transitions for [arg class].
The heading of the returned relation value is:

[example_begin]
|Domain |Model  |State  |Event  |NewState   |Params   |
|string |string |string |string |string     |Relation |
[example_end]

where:

[list_begin definitions]
[def Domain]
    is the name of the domain.
[def Model]
    is the name of the class or assigner.
[def State]
    is the name of a state.
    A [arg State] name of, [term @], indicates the pseudo-initial state out of
    which creation events transition.
[def Event]
    is the name of an event which causes a transition out of [arg State].
[def NewState]
    is the name of the state entered by the transition caused
    when [arg Event] is received in [arg State].
    A [arg NewState] name of [term IG] indicates the [arg Event] is ignored
    when it is received in [arg State].
    A [arg NewState] name of "CH" indicates it is logically impossible to
    receive _Event_ in _State_ ([emph i.e.] [emph "can't happen"])
    and at run time will cause a [emph panic] condition.
[def Params]
    is a relation valued attribute giving the parameters of [arg Event]
    (and hence the arguments to [arg NewState]).
    The cardinality of the [arg Params] attribute is zero if the event
    carries no supplemental event data.
    The [arg Params] attribute has the heading:
[list_end]

[example_begin]
|Name       |Position   |DataType |
|string     |int        |string   |
[example_end]

where:

[list_begin definitions]
[def Name]
    is the name of the parameter.
[def Position]
    is the order of the parameter carried in [arg Event].
    [arg Position] values start at zero and sequentially increase for each tuple
    in [arg Params].
[def DataType]
    is the "C" type name for the parameter.
[list_end]

The cardinality of the returned relation is [emph states] times [emph events]
where [emph states] (including the pseudo-initial state for a creation event,
if present in the model) is the number of states in the model and [emph events]
is the number of events.
The cardinality of the returned relation is zero if the class has no
state model.

Each tuple in the returned relation represents a cell in a conceptual
[emph states] by [emph events] transition matrix with [term NewState]
as the cell value.

[call [arg modelobj] [cmd startTransitionRecording]]
The `startTransitionRecording` method initializes internal
data structures in preparation for recording event transitions in
the domain represented by [arg modelobj].
In particular,
any previous event transition counts are reset back to zero.
Attempting to start an already running session is silently ignored.
The method returns the empty string.

[call [arg modelobj] [cmd stopTransitionRecording]]

The [method stopTransitionRecording] method closes an ongoing event
transition recording session.
The information gathered during the session is not modified.
Attempting to stop an already stopped session is silently ignored.
The method returns the empty string.

[call [arg modelobj] [cmd recordTransition] [arg class] [arg currstate]\
        [arg event]]

[list_begin arguments]
[arg_def {} class]
    The name of a class or assigner in the domain represented by [arg modelobj].
[arg_def {} currstate]
    The name of the state in [arg class] which is the source state in
    a transition.
[arg_def {} event]
    The name of an event in [arg class] which caused a transition from
    [arg currstate].
[list_end]

The [method recordTransition] method counts the transition which
occurred when [arg class] was in [arg currstate] and received [arg event].
It is necessary to start the event transition recording session
by invoking the [method startTransitionRecording] method before invoking
this method.
The method returns a boolean value indicating if the counting occurred,
[emph i.e.] if [arg currstate] and [arg event] form a valid transition
in [arg class].

[call [arg modelobj] [cmd reportTransitions] [arg pattern]]

[list_begin definitions]
[def pattern]
    A pattern of the format used by the [cmd "string match"] command for the
    names of classes or assigners in the domain represented by [arg modelobj].
[list_end]

The [method reportTransitions] method returns a relation value containing
the transition counts for all classes whose names match [arg pattern].
The heading of the returned relation value is:

[example_begin]
|Domain |Model  |State  |Event  |NewState   |TransCount |
|string |string |string |string |string     |int        |
[example_end]

where:

[list_begin definitions]
[def Domain] is the name of the domain.
[def Model] is the name of the class or assigner.
[def State] is the name of a state.
    A [arg State] name of, [term @], indicates the pseudo-initial state out of
    which creation events transition.
[def Event] is the name of an event which causes a transition out of
    [arg State].
[def NewState] The name of the state entered by the transition caused
    when [arg Event] is received in [arg State].
    A [arg NewState] name of [term IG] indicates the [arg Event] is ignored
    when it is received in [arg State].
    A [arg NewState] name of [term CH] indicates it is logically impossible to
    receive [arg Event] in [arg State] ([emph i.e.] [emph "can't happen"])
    and at run time will cause a [emph panic] condition.
[def TransCount] The number of times recorded when [arg Model] was in a given
    [arg State] and [arg Event] was received.
[list_end]

[call [arg modelobj] [cmd startMecateTransitionCount] [arg reinobj]]

[list_begin arguments]
[arg_def {} reinobj]
    An object command as returned from the [cmd rein] command of
    the [package mecate] package.
    A [arg reinobj] represents a [syscmd bosal] generated test harness and
    methods of the object allow for operations on the test harness.
[list_end]

The [method startMecateTransitionCount] method starts capturing event
transitions as they arrive from a [syscmd bosal] generated test harness.
This method uses the [method traceNotify] method of the [arg reinobj] to
install a callback handler for when event traces arrive.

Note this method does [emph not] turn on event tracing in the test harness.
That is done with the [cmd "[arg reinobj] trace on"] command which must be
executed before any events will be received and counted.

[call [arg modelobj] [cmd stopMecateTransitionCount] [arg reinobj]]


[list_begin arguments]
[arg_def {} reinobj]
    An object command as returned from the [cmd rein] command of
    the [package mecate] package.
    A [arg reinobj] represents a [syscmd bosal] generated test harness and
    methods of the object allow for operations on the test harness.
[list_end]

The [method stopMecateTransitionCount] method stops capturing event transitions
as they arrive from a [syscmd bosal] generated test harness.
The previous [arg reinobj] callback handler is re-instated.

[call [arg modelobj] [cmd defaultAttributes]]

The [method defaultAttributeValues] returns a relation value giving
the default values that attributes in the domain represented by
[arg modelobj] are given if not otherwise specified.

The heading of the returned relation is:

[example_begin]
|Domain         |Class      |Defaults |
|string         |string     |Relation |
[example_end]

where:

[list_begin definitions]
[def Domain] is the name of the domain.
[def Class] is the name of a class in *Domain*.
[def Defaults] is a relation valued attribute containing the attribute names
    and values for [arg Class].
[list_end]

The heading of the [arg Defaults] attribute is:

[example_begin]
|Attribute      |Value      |DataType |
|string         |string     |string   |
[example_end]

where:

[list_begin definitions]
[def Attribute] is the name of the attribute of the instance.
[def Value] is the value of the attribute in the instance.
[def DataType] is the "C" type name for the attribute.
[list_end]

[call [arg modelobj] [cmd initialInstancePopulation]]

The [method initialInstancePopulation] method returns a relation value
containing the initial instance population of the domain
represented by [arg modelobj].
The heading of the returned relation is:

[example_begin]
|Domain         |Class  |Instances |
|string         |string |Relation  |
[example_end]

where:

[list_begin definitions]
[def Domain] is the name of the domain.
[def Class] is the name of a class in [arg Domain].
[def Instances] is a relation valued attribute containing the initial
    instances of [arg Class].
[list_end]

The heading of the [arg Instance] attribute is:

[example_begin]
|Instance       |ID         |Attributes |
|string         |int        |Relation   |
[example_end]

where:

[list_begin definitions]
[def Instance] is the name given to the inital instance in the `micca`
    population.
[def ID] is the numeric identifier of the instance.
    This number is the same as the array index of the instance in the
    storage pool for the class.
[def Attributes] is a relation valued attribute giving the attribute names and
    values of the initial instance.
[list_end]

The heading of the [arg Attributes] attribute is:

[example_begin]
|Attribute  |Value  |
|string     |string |
[example_end]

where:

[list_begin definitions]
[def Attribute] is the name of the attribute of the instance.
[def Value] is the value of the attribute in the instance.
[list_end]

[call [arg modelobj] [cmd stateModelGraph] [arg class]]

[list_begin arguments]
[arg_def {} class]
    The name of a class or assigner in the domain represented by [arg modelobj].
[list_end]

The [method stateModelGraph] method returns a [cmd graph] command from the
[cmd struct::graph] package in Tcllib that represents the state model for
[arg class] as a graph.
It is the responsibility of the caller to insure that
the returned graph command is disposed of properly by invoking
[arg graph] [method destroy] when no longer needed.
If [arg class] does not not have a state model,
the returned [arg graph] has no nodes or arcs.

The returned graph is annotated by the following key / value attributes:

[list_begin definitions]
[def domain] the name of the domain.
[def class] the name of the class or assigner.
[def initialstate] the name of the default initial state.
[def defaulttrans] the name of the default transition, [emph i.e.]
    [term IG] or [term CH].
[list_end]

Nodes in the graph represent states in the state model and
are named the same as the state name.
Nodes are annotated by the following key / value attributes:

[list_begin definitions]
[def activity] the state activity code.
[def final] a boolean value indicating if the state is a final state.
[list_end]

Arcs in the graph represent the directed transitions from a source state
to a target state.
Note that [term IG] and [term CH] transitions are [emph not] represented by
arcs since as target states they do not cause an actual transition.
Arcs are annotated by the following key / value attributes:

[list_begin definitions]
[def event] the name of the event causing the transition.
[def params] a list of event parameter names giving the additional values
    carried by the event.
[list_end]

[call [arg modelobj] [cmd stateModelDot] [arg class]]

[list_begin arguments]
[arg_def {} class]
    The name of a class or assigner in the domain represented by
    [arg modelobj].
[list_end]

The [method stateModelDot] method returns a
[uri http://graphviz.org/pdf/tcldot.3tcl.pdf [package Tcldot]]
command handle to the state model of [arg class].
The command handle can be used to render an image of
the state model graph (along with many other uses).

[list_end]

[see_also micca]

[keywords translation]

[manpage_end]
