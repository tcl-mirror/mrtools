[manpage_begin oomoore n 1.0]
[comment {
#
#*++
# PROJECT:
#   mrtools
#
# MODULE:
#   oomoore.man -- oomoore package manual page
#
# ABSTRACT:
#   This file contains a Tcl doctools man page for the oomoore package.
#
}]
[moddesc "Object Oriented Moore State Machine"]
[titledesc "Moore State Models and Event Dispatch for TclOO"]
[require Tcl 8.6]
[require oomoore [opt 1.0]]
[description]
This manpage describes the
[package oomoore]
package which is a Tcl script extension that allows the
specification and execution of Moore type state models that
can be used as a base class for TclOO classes.
[para]
The [package oomoore] package is an ensemble command that defines
as single subcommand, [cmd model].
The [cmd ::oomoore::model] object is a meta-class.
Instances of the [class model] class are configured by specifying
the states and transitions.
The resulting class is then typically used as a superclass that
imbues the subclass with the defined state behavior.
[para]
The Moore type of state models associates actions with states
and executes the action upon entry into a state.
We define a [emph "state model"] to be the invariant definition of
states, events and transitions.
We define a [emph "state machine"] to be an instance of a state model
that has an implicit state variable that holds its current state.
All state machines behave independently of each other
and all state machines that are instances of the same state model
have the same set of states, events and transitions.
[para]
Once a state model is defined and a state machine is created,
methods are used to generate events to state machines.
Events may be delivered asynchronously or synchronously.
In asynchronous event delivery,
each state action completes before any other transitions are dispatched.
Asynchronous delivery uses the Tcl event loop.
Asynchronous delivery can also be delayed, in effect requesting
the event to be delivered at some time in the future.
[para]
Synchronous event delivery causes an immediate dispatch of the event
with the transition and
state action executed like any regular procedure.
Therefore, state actions may not be completed and complicated, cyclic
synchronous event generation can cause undesired results.
However for simple isolated state machines,
synchronous delivery avoids the need to enter the Tcl event loop.

[section COMMANDS]
The package defines a TclOO class that is intended to be used
to define a superclass that has state behavior
We divide the command descriptions into sections:
[list_begin enumerated]
[enum]
Creating a state model class.
[enum]
Specifying the states and transitions of a state model.
[enum]
Methods of the state model class.
[enum]
Methods of state model objects.
[list_end]

[section "STATE MODEL CLASS COMMANDS"]

[list_begin definitions]
[call [cmd "::oomoore model"] [method create ] [arg smclass] [arg definition]]
[call [cmd "::oomoore model"] [method new ] [arg definition]]

The [cmd "::oomoore model"] is a TclOO meta-class that creates a state model
class whose state behavior is specified by [arg definition].

The return value is a fully qualified state model class command.
The [arg definition] is evaluated in a context where the
[sectref "MODEL DEFINITION COMMANDS"]
described below are available.
The Model Defintiion Commands constitute a small language that is
used to define the states, events and transitions of the state model.
The returned [arg smclass] class has the methods listed below in the
[sectref "STATE MODEL METHODS"] section.
Objects created from a state model have the methods listed below in the
[sectref "STATE MACHINE OBJECT METHODS"] section.
[list_end]

[section "MODEL DEFINITION COMMANDS"]
The [arg definition] argument to the [cmd "::oomoore model"] constructor
is evaluated as a Tcl script.
That script should invoke the following commands to define
the properties of the state model.
The order of invocation of these commands is arbitrary, [emph i.e.]
it is not necessary to define all the states before the transitions.

[list_begin definitions]
[call [cmd state] [arg name] [arg arglist] [arg body]]
The [cmd state] command defines a state of the model named, [arg name].
The formal parameters of the state are given by [arg arglist] in the style of
the [cmd ::proc] command and the [cmd state] command is patterned after
[cmd proc] to show the close association of state action to transitioning
into a state.
When an event is received by a state machine instance of
this state model and the transition causes [arg name] state to
be entered, then [arg body] is executed with the arguments carried by
the event.
When [arg body] is invoked,
it is invoked as a method and the usual facilities of a TclOO method are
available.

[call [cmd transition] [arg currState] [arg -] [arg event] [arg ->]\
        [arg newState]]
The [cmd transition] command specifies the transition that a state
machine is to make when it is in the [arg currState] state and it receives the
event named, [arg event].
Receiving [arg event] while in [arg currState] causes the state machine
to transition to [arg newState] and to execute the state action associated
with [arg newState].
The [arg currState] must be a state defined, ultimately,
by invoking the [cmd state] command.
The [arg newState] must be a defined state or one of the special
non-transitioning states named [arg IG] or [arg CH].
If [arg newState] is IG, then the event is ignored and no transition
takes place.
If [arg newState] is CH, then the event is deemed logically not to be
able to happen and this is logged as an error.
It is also a corrollary to the way Moore machines are defined that
any event that causes a transition into a given state must carry
with it argument values that match the formal parameters of that state.
Failure to do so will result in a run-time error.
[para]
Note that no separate command is provided to define event names.
The set of events to which a state model responds is gathered from
the mention of those event names in [cmd transition] command invocations.

[call [cmd defaultTrans] [arg "\[IG | CH]"]]
The state transitions specified by the [cmd transition] command
conceptually form a transition matrix.
It is allowed to under-specify the matrix, [emph i.e.] the
entire cross product of states and events does not have to be
supplied in [cmd transition] command invocations.
Any transition that is [emph not] specified by a [cmd transition] command
will default to the value given to the [cmd defaultTrans] command.
If there is no [cmd defaultTrans] command invocation in a state model
definition, then the default transition is taken to be CH.

[call [cmd initialState] [arg state]]
When a state machine is created,
it can be optionally be placed in any of its states.
If no initial state is supplied when the state machine is created,
then it will be placed in the [arg state] state.
If the state model definition does not include an invocation of
[cmd initialState] command
then the first defined state is taken as the default initial state.
[list_end]

[para]
The following shows an example of a simple two-state state model.
Note that state [cmd s2] signals an event to itself.
[example {
::oomoore model create m1 {
    state s1 {a} {
        chan puts $a
    }
    transition s1 - e1 -> s2
    transition s1 - e2 -> IG

    state s2 {a b} {
        chan puts "$a $b"
        my signal e2 $a
    }
    transition s2 - e2 -> s1
}
}]

[section "STATE MODEL METHODS"]
The state model class created from the [cmd "::oomoore model"] meta-class
supports the following methods.

[list_begin definitions]

[call [arg smclass] [method states]]
The [method  states] method  returns a list of the state names for
the state model.

[call [arg smclass] [method events]]
The [method  states] method  returns a list of the events names for
the state model.

[call [arg smclass] [method transitions]]
The [method transitions] method returns a list of triples giving the
transitions for the state model.
Each list element is in turn a list of three items giving the
state name, event name and the name of the destination state of the
transition.

[call [arg smclass] [method initialstate]]
The [method initialstate] method returns the name of the initial state
of the state model.

[call [arg smclass] [method defaulttransition]]
The [method defaulttransition] method returns the name of the pseudo-state,
either [emph IG] or [emph CH], that is the default transition for the state
model.

[call [arg smclass] [method dot]]
The [method dot] method returns a string which the representation of
the directed graph of the state model in the syntax of [cmd dot(1)]
(see [uri http://www.graphviz.org/ graphviz] for details of the
[cmd dot] program).
The [cmd dot(1)] command can be used to obtain a pictorial representation
of the state model directed graph.

[call [arg smclass] [method dotfile] [arg filename]]
The [method dotfile] method invokes the [method dot] method and
places the result into the file given by, [arg filename].

[call [arg smclass] [method draw] [arg [opt dotargs]]]
The [method draw] method invokes the [cmd dot] subcommand handing the
output to [cmd dot(1)] to render the state model graph in PostScript.
Additional arguments to [cmd dot(1)] may be present.
By default [arg dotargs] is set to [arg "-Tps -o%s.ps -Gsize=7.5,10"]
to produce a letter sized, portrait layout of the graph.
All occurrences of %s in the [arg dotargs] are replaced by the
name of the state model.

[list_end]

[section "STATE MACHINE OBJECT METHODS"]
State machine objects created from a state model class have the following
methods.

[list_begin definitions]
[call [arg smclass] [method create] [arg smobj] [arg [opt initialState]]]
[call [arg smclass] [method new] [arg [opt initialState]]]
The constructor for objects created from a state model class accept
a single, optional argument that is the initial state into which the
state machine represented by the object is placed.
If [arg initialState] is not specified,
then the default intial state specified when the state model was
created is used.
[para]
[emph N.B.] that the action associated with the initial state is [emph not]
executed.

[call [arg smobj] [method signal] [arg src] [arg event]\
    [opt [arg "param1 param2 ..."]]]
The [method signal] method arranges for [arg event]
to be delivered to the [arg smobj] state machine.
The [arg src] argument is the source of the signal.
If invoked outside of a state action, then the empty string ({}) should
be supplied.
Otherwise, the name of the object sending the signal should be supplied
(typically [lb]self[rb]).
The [arg event] must be a defined event of the state model from
which [arg smobj] was created.
When the [arg smobj] state machine transitions to a new state,
the optional [arg paramN] parameters are supplied as arguments to
the new state.
These arguments must match the number of arguments expected by
the state action or a run-time error will be generated.

[call [arg smobj] [method delayedSignal] [arg time] [arg src] [arg event]\
        [opt [arg "param1 param2 ..."]]]

The [method  delayedSignal] method arranges for the [arg event] event to
be delivered to the [arg smobj] state machine after [arg time] milliseconds
have elapsed.
The [arg src] argument is the source of the signal.
If invoked outside of a state action, then the empty string ({}) should
be supplied.
Otherwise, the name of the object sending the signal should be supplied
(typically [lb]self[rb]).
The [arg event] must be a defined event of the [arg smobj] state machine.
The optional [arg paramN] parameters are supplied as arguments to
the transitioned state.
These arguments must match the number of arguments expected by
the state action or a run-time error will be generated.
The return value of the method is a timer identifier that is suitable
for use with the [cmd "::after cancel"] command to cancel the event.

[call [arg smobj] [method receive] [arg event] [opt [arg "param1 param2 ..."]]]
The [method receive] method performs a synchronous reception of
[arg event], transitioning the machine and executing the state action
of the new state with the values given by [arg paramN] as arguments
to the state action.
This command may be invoked to accomplish the synchronous delivery
of [arg event] with it parameters and is the same command executed
internally when asynchronously delivered events are finally delivered.

[call [arg smobj] [method force] [arg state] [opt [arg "param1 param2 ..."]]]
The [method force] method forces a transition from the current state
to the state given by [arg state] and executes the body of code associated
with the state.
Optional [arg paramN] parameters must be given to match the signature
of [arg state].
This command is sometimes useful for error or reset processing.

[call [arg smobj] [method loglevel] [arg [opt level]]]
The [method loglevel] sets or queries the current logging level for the
state machine object.
The return value is the current logging level.
If the [arg level] argument is provided then the logging level is set
to [arg level].
Log level are those provided by the [package logger] package.

[list_end]

[section "EVENT DISPATCH"]
The [package ::oomoore] package uses the tcllib [package uevent] package
to deliver asychronous events.
The [package uevent] package in turn uses the Tcl event loop to generate
events.
Ultimately, all signaled events are delivered via an
[cmd ::after] command script.
This implies that the Tcl event loop [emph must] be entered to deliver
asynchronous events and errors in the dispatch are reported via the usual
background error handling (see [cmd "::interp bgerror"]).
For Tk programs, the Tcl event loop is automatically entered.
However, for ordinary Tcl scripts, it is necessary to use a command
like [cmd ::vwait].
The example below shows such a usage.

[section "TRANSITION TRACING"]
The [package oomoore] package uses the tcllib [package logger] package to
provide logging facilities.
To trace the event dispatch and transition information for a particular
state machine it is necessary set the logging level to at least the
[emph info] level using the [method loglevel] method.
Any errors encountered are reported at the [emph error] logging level.

[section EXAMPLE]
In this example, a state model called [cmd tank_operation] is created.
The actions are contrived to have the state machines progress through a
sequence of states using delayed signals.
A simple [cmd count] variable is used to demonstrate access to object
variables.
[example {
package require oomoore

# State model
::oomoore model create tank_operation {
    state empty {} {
        my variable count
        chan puts "empty $count"
        incr count
        set ::done 1    ; # used to signal the end of a cycle
    }
    transition empty - pump -> filling

    state filling {} {
        my delayedSignal 500 [self] full   ; # drive my self to the next state
        my variable count
        chan puts "filling $count"
        incr count
    }
    transition filling - full -> full

    state full {} {
        my delayedSignal 500 [self] pump
        my variable count
        chan puts "full $count"
        incr count
    }
    transition full - pump -> emptying

    state emptying {} {
        my delayedSignal 500 [self] empty
        my variable count
        chan puts "emptying $count"
        incr count
    }
    transition emptying - empty -> empty
}

::oo::class create tank {
    # State machine created as a subclass of the state model.
    superclass ::tank_operation

    constructor {} {
        next
        my variable count
        set count 0
    }
}

# Create a state machine object
tank create mytank
# Log the transitions
mytank loglevel info
# Kick things off
mytank signal {} pump
# Wait for one cycle to complete
vwait ::done
}]
Running the above script yields the following output.
[example {
[Mon Jun 03 07:38:29 PDT 2013] [::oomoore::mytank] [info] 'Signal: {} - pump -> ::mytank'
[Mon Jun 03 07:38:29 PDT 2013] [::oomoore::mytank] [info]\ 
    'Transition: ::mytank: empty - pump {} -> filling'
filling 0
[Mon Jun 03 07:38:29 PDT 2013] [::oomoore::mytank] [info] 'Signal: ::mytank - full -> ::mytank'
[Mon Jun 03 07:38:29 PDT 2013] [::oomoore::mytank] [info]\ 
    'Transition: ::mytank: filling - full {} -> full'
full 1
[Mon Jun 03 07:38:30 PDT 2013] [::oomoore::mytank] [info] 'Signal: ::mytank - pump -> ::mytank'
[Mon Jun 03 07:38:30 PDT 2013] [::oomoore::mytank] [info]\ 
    'Transition: ::mytank: full - pump {} -> emptying'
emptying 2
[Mon Jun 03 07:38:30 PDT 2013] [::oomoore::mytank] [info] 'Signal: ::mytank - empty -> ::mytank'
[Mon Jun 03 07:38:30 PDT 2013] [::oomoore::mytank] [info]\ 
    'Transition: ::mytank: emptying - empty {} -> empty'
empty 3
}]

[keywords Moore States TclOO]

[manpage_end]
