#!/usr/bin/env tclsh
# This software is copyrighted 2013 by G. Andrew Mangogna.
# The following terms apply to all files associated with the software unless
# explicitly disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors and
# need not follow the licensing terms described here, provided that the
# new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
# OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
# THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
# OR MODIFICATIONS.
# 
# GOVERNMENT USE: If you are acquiring this software on behalf of the
# U.S. government, the Government shall have only "Restricted Rights"
# in the software and related documentation as defined in the Federal
# Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
# are acquiring the software on behalf of the Department of Defense,
# the software shall be classified as "Commercial Computer Software"
# and the Government shall have only "Restricted Rights" as defined in
# Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
# the authors grant the U.S. Government and others acting in its behalf
# permission to use and distribute the software in accordance with the
# terms specified in this license.
#
#*++
# PROJECT:
#   mrtools
#
# MODULE:
#   oomoore.test -- unit test cases for oomoore package
#
# ABSTRACT:
#
#*--
#

package require Tcl 8.6
package require cmdline

source ../src/oomoore.tcl

puts "testing version: [package require oomoore]"

set optlist {
    {level.arg warn {Log debug level}}
}
array set options [::cmdline::getKnownOptions argv $optlist]

package require tcltest
eval tcltest::configure $argv

namespace eval ::oomoore::test {
    namespace import ::tcltest::*

    test model-1.0 {
        build simple model
    } -setup {
    } -cleanup {
    } -body {
        oomoore model create simple {
            state s1 {} {
                puts s1
            }
            transition s1 - e1 -> s2
            state s2 {} {
                puts s2
            }
        }
    } -result {::oomoore::test::simple}

    test states-1.0 {
    } -setup {
    } -cleanup {
    } -body {
        simple states
    } -result {s1 s2}

    test events-1.0 {
    } -setup {
    } -cleanup {
    } -body {
        simple events
    } -result {e1}

    test transitions-1.0 {
    } -setup {
    } -cleanup {
    } -body {
        simple transitions
    } -result {{s1 e1 s2} {s2 e1 CH}}

    test initialstate-1.0 {
        check the initial state of simple
    } -setup {
    } -cleanup {
    } -body {
        simple initialstate
    } -result {s1}

    test defaulttransition-1.0 {
        check the defaulttransition simple
    } -setup {
    } -cleanup {
    } -body {
        simple defaulttransition
    } -result {CH}

    test model-2.0 {
        state model error -- transition has non-existant state
    } -setup {
    } -cleanup {
    } -body {
        oomoore model create err1 {
            state s1 {} {
                puts s1
            }
            transition s1 - e1 -> s2
        }
    } -result {unknown destination state in transition, "s1 - e1 -> s2"}\
        -returnCodes error

    test transition-1.0 {
        transition a state machine
    } -setup {
    } -cleanup {
    } -body {
        simple receive e1
    } -output {s2
} -result {}

    test transition-2.0 {
        events with parameters
    } -setup {
        oomoore model create reflex {
            state s2 {a b} {
                puts "[self] $a $b"
            }
            transition s1 - e1 -> s2
            transition s2 - e2 -> s1
            transition s2 - e1 -> s2
            state s1 {a} {
                puts "[self] $a"
            }
            initialState s1
        }
    } -cleanup {
    } -body {
        reflex receive e1 foo bar
    } -output {::oomoore::test::reflex foo bar
} -result {}

    test initialstate-2.0 {
        check the initial state of reflex
    } -setup {
    } -cleanup {
    } -body {
        reflex initialstate
    } -result {s1}

    test transition-3.0 {
        reflexive transition
    } -setup {
        reflex force s2 foo bar
    } -cleanup {
    } -body {
        reflex receive e1 foo bar
        reflex receive e1 baz junk
    } -output {::oomoore::test::reflex foo bar
::oomoore::test::reflex baz junk
} -result {}

    test ignored-1.0 {
        ignored transition
    } -setup {
        oomoore model create m2 {
            state s1 {} {
                puts "[self] s1"
            }
            transition s1 - e2 -> s2
            transition s1 - e3 -> s3
            state s2 {} {
                puts "[self] s2"
            }
            transition s2 - e2 -> IG
            transition s2 - e3 -> CH
            state s3 {} {
                puts "[self] s3"
            }
            transition s3 - e2 -> s2
            transition s3 - e1 -> s1
        }
    } -cleanup {
    } -body {
        m2 receive e2
        m2 receive e2
    } -output {::oomoore::test::m2 s2
} -result {}

    test event-1.0 {
        bad event name
    } -setup {
        m2 loglevel $::options(level)
    } -cleanup {
    } -body {
        m2 receive e4
    } -result {unknown event, "e4"} -returnCodes error

    test canthappen-1.0 {
        can't happen transition
    } -setup {
        m2 loglevel $::options(level)
        m2 force s1
    } -cleanup {
    } -body {
        m2 receive e2
        m2 receive e3
    } -result {can't happen transition: s2 - e3 -> CH} -returnCodes error

    test canthappen-2.0 {
        can't happen transition delivered asynchronously
    } -setup {
        m2 loglevel $::options(level)
        m2 force s1
        m2 cherror {{obj state event} {
            puts "for $obj, $state - $event -> CH"
            set ::done CH
        }}
    } -cleanup {
    } -body {
        m2 signal e2
        m2 signal e3
        vwait ::done
        return $::done
    } -result {CH}

    test isolated-1.0 {
        detect state models with isolated states
    } -setup {
    } -cleanup {
    } -body {
        oomoore model create m3 {
            state s1 {} {
                puts "$self s1"
            }
            transition s1 - e2 -> s2
            state s2 {} {
                puts "$self s2"
            }
            transition s2 - e2 -> IG
            transition s2 - e3 -> CH
            state s3 {} {
                puts "$self s3"
            }
        }
    } -result {state model has isolated state(s): "s3"} -returnCodes error

    test generate-1.0 {
        generate events for async dispatch
    } -setup {
        m2 loglevel $::options(level)
        m2 force s1
    } -cleanup {
    } -body {
        m2 signal e3
        after 0 set ::done 1
        vwait ::done
        m2 currentstate
    } -result {s3}

    test generate-2.0 {
        generate multiple events for async dispatch
    } -setup {
        m2 loglevel $::options(level)
        m2 force s1
    } -cleanup {
    } -body {
        m2 signal e3
        m2 signal e2
        after 100 set ::done 1
        vwait ::done
        m2 currentstate
    } -result {s2}

    test generate-3.0 {
        async dispatch of self-directed events
    } -setup {
        oomoore model create m4 {
            state s1 {a} {
                puts "s1: $a"
                set ::done 1
            }
            transition s1 - e1 -> s2
            state s2 {b} {
                puts "s2: $b"
                my signal e2 $b
            }
            transition s2 - e2 -> s1
        }
    } -cleanup {
    } -body {
        m4 signal e1 foo
        vwait ::done
        m4 currentstate
    } -result {s1} -output {s2: foo
s1: foo
}

    test generate-4.0 {
        self-directed events take precedence
    } -setup {
        m4 force s1 xxx
    } -cleanup {
    } -body {
        m4 signal e1 foo
        m4 signal e1 bar
        after 100 set ::sync 1
        vwait ::sync
        m4 currentstate
    } -result {s1} -output {s2: foo
s1: foo
s2: bar
s1: bar
}

    test delayed-1.0 {
        post a delayed signal
    } -setup {
        m2 force s1
    } -cleanup {
    } -body {
        m2 delayedSignal 100 e2
        after 200 set ::sync 1
        vwait ::sync
        m2 currentstate
    } -result {s2} -output {::oomoore::test::m2 s2
}

    test delayed-2.0 {
        delayed signal delivered in order
    } -setup {
        m2 force s1
    } -cleanup {
    } -body {
        m2 delayedSignal 200 e2
        m2 delayedSignal 100 e3
        after 300 set ::sync 1
        vwait ::sync
        m2 currentstate
    } -result {s2} -output {::oomoore::test::m2 s3
::oomoore::test::m2 s2
}

    test delayed-3.0 {
        duplicate delayed signal -- only last one delivered
    } -setup {
        m4 force s1 xxx
    } -cleanup {
    } -body {
        m4 delayedSignal 100 e1 foo
        m4 delayedSignal 100 e1 bar
        after 300 set ::sync 1
        vwait ::sync
        m4 currentstate
    } -result {s1} -output {s2: bar
s1: bar
}

    test cancel-1.0 {
        cancel a delayed signal before it expires
    } -setup {
        m2 loglevel $::options(level)
        m2 force s1
    } -cleanup {
    } -body {
        m2 delayedSignal 300 e2
        after 100 [namespace code {m2 cancel e2}]

        after 300 set ::sync 1
        vwait ::sync
        m2 currentstate
    } -result {s1}

    test cancel-2.0 {
        cancel a delayed signal after it expires
    } -setup {
        m2 force s1
    } -cleanup {
    } -body {
        m2 delayedSignal 100 e2
        after 200 [namespace code {m2 cancel e2}]

        after 300 set ::sync 1
        vwait ::sync
        m2 currentstate
    } -result {s2} -output {::oomoore::test::m2 s2
}

    test remaining-2.0 {
        time remaining on a delayed signal
    } -setup {
        m2 force s1
    } -cleanup {
    } -body {
        m2 delayedSignal 200 e2

        after 100 set ::sync 1
        vwait ::sync
        # There can be a little jitter in the numbers, but we must never
        # get anything greater than 100 for this case.
        expr {[m2 remaining e2] <= 100}
    } -result {1}

# There seems to be a problem with dot's Tk output if text lines contain
# braces. They are not escaped properly and consequently yield bad results.
# However, you can see in this test case that the basic state diagram is drawn
# properly.
    test dotfile-1.0 {
        produce a dot file
    } -setup {
        package require Tk
        toplevel .draw
        set c [canvas .draw.c -width 700 -height 700]
        pack .draw.c
    } -cleanup {
        destroy .draw
        file delete m2.dot
    } -body {
        m2 dotfile m2.dot
        set dotchan [open "| dot -Ttk m2.dot" r]
        eval [read $dotchan]
        tkwait visibility .draw
        tkwait window .draw
    } -result {}

    cleanupTests
}

namespace delete ::oomoore::test

if 0 {
    # This is just a template for additional tests.

    test X-1.0 {
    } -setup {
    } -cleanup {
    } -body {
    } -result {}
}
