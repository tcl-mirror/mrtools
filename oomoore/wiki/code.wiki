<h3>Coding the Washing Machine</h3>
The
[/doc/trunk/oomoore/wiki/wash.html|code]
is a relatively straighforward encoding of the state model
<p>
We create a state model, wmachine, using the <b>model</b> command (line 9).
The <b>::oomoore model</b> command is a meta-class.
You create a state model by giving it a specification.
In the specification,
each state of the model is declared with the <b>state</b> command.
The <b>state</b> command invocations correspond to the boxes on the state model
graphic.
The <b>state</b> command has an interface like the core <b>proc</b> command.
Any parameters would be listed in the second argument.
The body of the <b>state</b> command is the Tcl code that will be run when
the state is entered upon a transition.
When the state code is run, it is actually run as a method so
all TclOO facilities are available.
<p>
For this example,
the components of the washing machine, such as the pump and motor,
are simulated by simple <b>puts</b> commands.
In a real program these would be replaced by procedure invocations or
event generation to other state machines.
Also note that there are several places where we simulate the behavior
of some of these components by using delayed events to ourself.
<p>
The <b>transition</b> command defines which state is entered when a given event
is delivered (<i>i.e.</i> line 31).
The <b>transition</b> command invocations correspond to the arcs on the state
model graphic.
<p>
Several things are worth noting in the specification of a state model.
<ul>
<li>
There is no command to specify events.
The events to which the state model responds is simply the set of
events mentioned in the <b>transition</b> commands.
</li>
<li>
The order of <b>state</b> and <b>transition</b> command invocation is arbitrary.
You may put all the <b>state</b> commands followed by all the <b>transition</b>
commands or any other combination that you find clear.
The style here is to put the Transitions after the state to which they apply,
but that is strictly a stylistic convention.
</li>
</ul>
<p>
The state model definition completes at line 110.
The remainder of the code shows how to create
and run an instance of a state machine.
<p>
At line 113,
we draw the as-implemented state model.
The <b>oomoore</b> package can run
<a href="http://www.graphviz.org/" target="_blank"><b>dot(1)</b></a>
if it is available.
The
[/doc/trunk/oomoore/wiki/wmachine.svg|result]
shows the <em>as-implemented</em> model in a graphical representation.
<p>
At line 115,
we define a class named <b>wm_model_100</b>.
This class has <b>wmachine</b> as a superclass and thus inherits the
state behavior of the <b>wmachine</b> state model.
The constructor (line 117) simply initializes an the state machine
and defines some variable values that are used for timing the
washing machine cycle.
<p>
At line 121, the times used in the machine are configured.
The times are in milliseconds.
<p>
Line 129 configures state model tracing on.
It is necessary that the log level for the object to be at least <em>info</em>.
<p>
Finally at line 131,
we start the washing machine running by signalling a Run event to it.
<p>
At line 133, the program enters the Tcl event loop.
Recall that the state action of the <b>Idle</b> state writes the
the <b>::wmachine</b> array and this is used as the synchronization
mechanism between the state model and the test code.
<p>
Finally at line 135, we clean up the state machine by <b>destroy</b>ing it.
<p>
[/doc/trunk/oomoore/wiki/example1.wiki|Previous]
[/doc/trunk/oomoore/wiki/output.wiki|Next]
