#!/usr/bin/env tclsh
#
#*++
# PROJECT:
#
# MODULE:
#
# ABSTRACT:
#
# $Revision$
# $Date$
#*--
#

package require Tcl 8.5
package require cmdline

source ../src/moore.tcl

puts "testing version: [package require moore]"

set optlist {
    {level.arg warn {Log debug level}}
}
array set options [::cmdline::getKnownOptions argv $optlist]
moore::log::setlevel $options(level)

package require tcltest
eval tcltest::configure $argv

namespace eval ::moore::test {
    namespace import ::tcltest::*
    namespace import ::ral::*
    namespace import ::ralutil::*

    test model-1.0 {
        build simple model
    } -setup {
    } -cleanup {
    } -body {
        moore model simple {
            State s1 {} {
                puts s1
            }
            Transition s1 - e1 -> s2
            State s2 {} {
                puts s2
            }
        }
        relation cardinality $::moore::StateModel
    } -result {1}

    test states-1.0 {
    } -setup {
    } -cleanup {
    } -body {
        simple states
    } -result {s1 s2}

    test events-1.0 {
    } -setup {
    } -cleanup {
    } -body {
        simple events
    } -result {e1}

    test initialstate-1.0 {
        check the initial state of simple
    } -setup {
    } -cleanup {
    } -body {
        pipe {
            relvar set ::moore::StateModel |
            relation restrictwith ~ {[string match *simple $ModelName]} |
            relation extract ~ InitialState
        }
    } -result {s1}

    test model-2.0 {
        state model error -- transition has non-existant state
    } -setup {
    } -cleanup {
    } -body {
        moore model err1 {
            State s1 {} {
                puts s1
            }
            Transition s1 - e1 -> s2
        }
    } -result {for association ::moore::R3(::moore::Transition [*] ==> [1] ::moore::State), in relvar ::moore::Transition
tuple {ModelName ::moore::test::err1 CurrState s1 EventName e1 NewState s2} references no tuple
} -returnCodes error

    test machine-1.0 {
        generate a state machine
    } -setup {
        simple machine s1
    } -cleanup {
        s1 destroy
    } -body {
        relation cardinality $::moore::StateMachine
    } -result {1}

    test transition-1.0 {
        transition a state machine
    } -setup {
        simple machine s2
    } -cleanup {
        s2 destroy
    } -body {
        s2 receive e1
        pipe {
            relvar set ::moore::StateMachine |
            relation restrictwith ~ {[string match *s2 $MachineId]} |
            relation extract ~ CurrState
        }
    } -output {s2
} -result {s2}

    test transition-2.0 {
        events with parameters
    } -setup {
        moore model reflex {
            State s2 {a b} {
                puts "$self $a $b"
            }
            Transition s1 - e1 -> s2
            Transition s2 - e2 -> s1
            Transition s2 - e1 -> s2
            State s1 {a} {
                puts "$self $a"
            }
            InitialState s1
        }
        reflex machine r1
    } -cleanup {
        r1 destroy
    } -body {
        r1 receive e1 foo bar
        pipe {
            relvar set ::moore::StateMachine |
            relation restrictwith ~ {[string match *r1 $MachineId]} |
            relation extract ~ CurrState
        }
    } -output {::moore::test::r1 foo bar
} -result {s2}

    test initialstate-2.0 {
        check the initial state of reflex
    } -setup {
    } -cleanup {
    } -body {
        pipe {
            relvar set ::moore::StateModel |
            relation restrictwith ~ {[string match *reflex $ModelName]} |
            relation extract ~ InitialState
        }
    } -result {s1}

    test transition-3.0 {
        reflexive transition
    } -setup {
        reflex machine r1
    } -cleanup {
        r1 destroy
    } -body {
        r1 receive e1 foo bar
        r1 receive e1 baz junk
        pipe {
            relvar set ::moore::StateMachine |
            relation restrictwith ~ {[string match *r1 $MachineId]} |
            relation extract ~ CurrState
        }
    } -output {::moore::test::r1 foo bar
::moore::test::r1 baz junk
} -result {s2}

    test ignored-1.0 {
        ignored transition
    } -setup {
        moore model m2 {
            State s1 {} {
                puts "$self s1"
            }
            Transition s1 - e2 -> s2
            Transition s1 - e3 -> s3
            State s2 {} {
                puts "$self s2"
            }
            Transition s2 - e2 -> IG
            Transition s2 - e3 -> CH
            State s3 {} {
                puts "$self s3"
            }
            Transition s3 - e2 -> s2
            Transition s3 - e1 -> s1
        }
        m2 machine i2
    } -cleanup {
        i2 destroy
    } -body {
        i2 receive e2
        i2 receive e2
        pipe {
            relvar set ::moore::StateMachine |
            relation restrictwith ~ {[string match *i2 $MachineId]} |
            relation extract ~ CurrState
        }
    } -output {::moore::test::i2 s2
} -result {s2}

    test event-1.0 {
        bad event name
    } -setup {
        m2 machine i2
    } -cleanup {
        i2 destroy
    } -body {
        i2 receive e4
    } -result {unknown event, "e4"} -returnCodes error

    test canthappen-1.0 {
        can't happen transition
    } -setup {
        m2 machine i2
    } -cleanup {
        i2 destroy
    } -body {
        i2 receive e2
        i2 receive e3
        pipe {
            relvar set ::moore::StateMachine |
            relation restrictwith ~ {[string match *i2 $MachineId]} |
            relation extract ~ CurrState
        }
    } -output {::moore::test::i2 s2
} -result {CH transition for ::moore::test::i2: s2 - e3 -> CH} -returnCodes error

    test isolated-1.0 {
        detect state models with isolated states
    } -setup {
    } -cleanup {
    } -body {
        moore model m3 {
            State s1 {} {
                puts "$self s1"
            }
            Transition s1 - e2 -> s2
            State s2 {} {
                puts "$self s2"
            }
            Transition s2 - e2 -> IG
            Transition s2 - e3 -> CH
            State s3 {} {
                puts "$self s3"
            }
        }
    } -result {isolated states: s3} -returnCodes error

    test generate-1.0 {
        generate events for async dispatch
    } -setup {
        m2 machine i3
    } -cleanup {
        i3 destroy
    } -body {
        moore generate {} - e3 -> i3
        moore qwait
        pipe {
            relvar set ::moore::StateMachine |
            relation restrictwith ~ {[string match *i3 $MachineId]} |
            relation extract ~ CurrState
        }
    } -result {s3} -output {::moore::test::i3 s3
}

    test generate-2.0 {
        generate multiple events for async dispatch
    } -setup {
        m2 machine i3
    } -cleanup {
        i3 destroy
    } -body {
        moore generate {} - e3 -> i3
        moore generate {} - e2 -> i3
        moore qwait
        pipe {
            relvar set ::moore::StateMachine |
            relation restrictwith ~ {[string match *i3 $MachineId]} |
            relation extract ~ CurrState
        }
    } -result {s2} -output {::moore::test::i3 s3
::moore::test::i3 s2
}

    test generate-3.0 {
        async dispatch of self-directed events
    } -setup {
        moore model m4 {
            State s1 {a} {
                puts "s1: $a"
            }
            Transition s1 - e1 -> s2
            State s2 {b} {
                puts "s2: $b"
                moore generate $self - e2 -> $self $b
            }
            Transition s2 - e2 -> s1
        }
        m4 machine i4
    } -cleanup {
        i4 destroy
    } -body {
        moore generate {} - e1 -> i4 foo
        moore qwait
        pipe {
            relvar set ::moore::StateMachine |
            relation restrictwith ~ {[string match *i4 $MachineId]} |
            relation extract ~ CurrState
        }
    } -result {s1} -output {s2: foo
s1: foo
}

    test generate-4.0 {
        self-directed events take precedence
    } -setup {
        m4 machine i4
    } -cleanup {
        i4 destroy
    } -body {
        moore generate {} - e1 -> i4 foo
        moore generate {} - e1 -> i4 bar
        moore qwait
        pipe {
            relvar set ::moore::StateMachine |
            relation restrictwith ~ {[string match *i4 $MachineId]} |
            relation extract ~ CurrState
        }
    } -result {s1} -output {s2: foo
s1: foo
s2: bar
s1: bar
}

    test delayed-1.0 {
        post a delayed event
    } -setup {
        m2 machine i2
    } -cleanup {
        i2 destroy
    } -body {
        moore delay 100 {} - e2 -> i2
        after 300 set ::sync 1
        vwait ::sync
        pipe {
            relvar set ::moore::StateMachine |
            relation restrictwith ~ {[string match *i2 $MachineId]} |
            relation extract ~ CurrState
        }
    } -output {::moore::test::i2 s2
} -result {s2}

    test delayed-2.0 {
        delayed events delivered in order
    } -setup {
        m2 machine i2
    } -cleanup {
        i2 destroy
    } -body {
        moore delay 200 {} - e2 -> i2
        moore delay 100 {} - e3 -> i2
        after 300 set ::sync 1
        vwait ::sync
        pipe {
            relvar set ::moore::StateMachine |
            relation restrictwith ~ {[string match *i2 $MachineId]} |
            relation extract ~ CurrState
        }
    } -output {::moore::test::i2 s3
::moore::test::i2 s2
} -result {s2}

    test delayed-3.0 {
        duplicate delayed events -- last one delivered
    } -setup {
        m4 machine i4
    } -cleanup {
        i4 destroy
    } -body {
        moore delay 100 {} - e1 -> i4 foo
        moore delay 100 {} - e1 -> i4 bar
        after 300 set ::sync 1
        vwait ::sync
        pipe {
            relvar set ::moore::StateMachine |
            relation restrictwith ~ {[string match *i4 $MachineId]} |
            relation extract ~ CurrState
        }
    } -result {s1} -output {s2: bar
s1: bar
}

    test cancel-1.0 {
        cancel a delayed event before it expires
    } -setup {
        m2 machine i2
    } -cleanup {
        i2 destroy
    } -body {
        moore delay 300 {} - e2 -> i2
        after 100 [list moore cancel {} - e2 -> [namespace current]::i2]

        after 300 set ::sync 1
        vwait ::sync
        pipe {
            relvar set ::moore::StateMachine |
            relation restrictwith ~ {[string match *i2 $MachineId]} |
            relation extract ~ CurrState
        }
    } -result {s1}

    test cancel-2.0 {
        cancel a delayed event after it expires
    } -setup {
        m2 machine i2
    } -cleanup {
        i2 destroy
    } -body {
        moore delay 100 {} - e2 -> i2
        after 200 [list moore cancel {} - e2 -> [namespace current]::i2]

        after 300 set ::sync 1
        vwait ::sync
        pipe {
            relvar set ::moore::StateMachine |
            relation restrictwith ~ {[string match *i2 $MachineId]} |
            relation extract ~ CurrState
        }
    } -result {s2} -output {::moore::test::i2 s2
}

    test cancel-3.0 {
        cancel first delayed event
    } -setup {
        m2 machine i2
    } -cleanup {
        i2 destroy
    } -body {
        moore delay 100 {} - e1 -> i2
        moore delay 200 {} - e2 -> i2
        after 50 [list moore cancel {} - e1 -> [namespace current]::i2]

        after 300 set ::sync 1
        vwait ::sync
        pipe {
            relvar set ::moore::StateMachine |
            relation restrictwith ~ {[string match *i2 $MachineId]} |
            relation extract ~ CurrState
        }
    } -result {s2} -output {::moore::test::i2 s2
}

    test cancel-4.0 {
        cancel next to last delayed event
    } -setup {
        m2 machine i2
    } -cleanup {
        i2 destroy
    } -body {
        moore delay 100 {} - e1 -> i2
        moore delay 200 {} - e2 -> i2
        moore delay 300 {} - e3 -> i2

        moore cancel {} - e2 -> i2
        moore remaining {} - e3 -> i2
    } -result {300}

    test remaining-1.0 {
        remaining time of a delayed event
    } -setup {
        m2 machine i2
    } -cleanup {
        i2 destroy
    } -body {
        moore delay 300 {} - e2 -> i2
        after 100
        set remain [moore remaining {} - e2 -> i2]

        after 300 set ::sync 1
        vwait ::sync
        expr {$remain <= 200}
    } -result {1} -output {::moore::test::i2 s2
}


if 0 {
    # This is just a template for additional tests.

    test X-1.0 {
    } -setup {
    } -cleanup {
    } -body {
    } -result {}
}

    cleanupTests
}

namespace delete ::moore::test
