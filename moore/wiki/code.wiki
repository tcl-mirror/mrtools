<h3>Coding the Washing Machine</h3>
The
<a href="/doc/trunk/moore/wiki/wash.html" target="_blank">code</a>
is a relatively straighforward encoding of the graphic.
<p>
We define a state model, wmachine, using the <b>model</b> command (line 6).
Each state of the model is declared with the <b>State</b> command.
The <b>State</b> command invocations correspond to the boxes on the state model
graphic.
The <b>State</b> command has an interface like the core <b>proc</b> command.
Any parameters would be listed in the second argument.
The body of the <b>State</b> command is the Tcl code that will be run when
the state is entered upon a transition.
A Tcl variable called, <i>self</i> is implicitly declared in the
state action.
The value of the variable is set to the name of the state machine command
that is currently executing the transition.
This value is useful for accessing the configuration of the state machine
and can serve as the source of event generation.
<p>
For this example,
the components of the washing machine, such as the pump and motor,
are simulated by simple <b>puts</b> commands.
In a real program these would be replaced by procedure invocations or
event generation to other state machines.
Also note that there are several places where we simulate the behavior
of some of these components by using the <b>after</b> command.
<p>
The <b>Transition</b> command defines which state is entered when a given event
is delivered (<i>i.e.</i> line 28).
The <b>Transition</b> command invocations correspond to the arcs on the state
model graphic.
<p>
Several things are worth noting in the specification of a state model.
<ul>
<li>
There is no command to specify events.
The events to which the state model responds is simply the set of
events mentioned in the <b>Transition</b> commands.
</li>
<li>
The order of <b>State</b> and <b>Transition</b> command invocation is arbitrary.
You may put all the <b>State</b> commands followed by all the <b>Transition</b>
commands or any other combination that you find clear.
The style here is to put the Transitions after the state to which they apply,
but that is strictly a stylistic convention.
</li>
</ul>
<p>
The state model definition completes at line 105.
The remainder of the code shows how to create
and run an instance of a state machine.
<p>
At line 108,
we draw the as-implemented state model.
The <b>moore</b> package can run
<a href="http://www.graphviz.org/" target="_blank"><b>dot(1)</b></a>
if it is available.
The
<a href="/doc/trunk/moore/wiki/wmachine.svg" target="_blank">result</a>
shows the <em>as-implemented</em> model in a graphical representation.
<p>
At line 110, an instance of the state model is created using the
<b>machine</b> command.
Since no initial state argument was given,
the initial state is the default initial state.
In this case that is the <b>Idle</b> state since it was declared first.
The default initial state can also be explicitly declared during the
state model specification using the <b>InitialState</b> command.
<p>
At line 112, the times used in the machine are configured.
The times are in milliseconds.
<p>
Line 113 and 114 configure state model tracing on.
It is necessary that the log level for the <b>moore</b> namespace be at least
<b>info</b> and the <i>trace</i> configuration be set to true.
The tracing for each individual state machine can be configured on and off
using the <i>trace</i> configuration.
This can help to limit the trace output to specific machines.
<p>
Finally at line 117,
we start the washing machine running by generating a Run event to it.
The source of the event is the empty string ({}) and this indicates that
the event was generated from outside the context of any state machine.
<p>
At line 119, the program enters the Tcl event loop.
Recall that the state action of the <b>Idle</b> state writes the
the <b>::wmachine</b> array and this is used as the synchronization
mechanism between the state model and the test code.
<p>
Finally at line 121, we clean up the state machine by <b>destroy</b>ing it.
<p>
[/doc/trunk/moore/wiki/design.wiki|Previous]
[/doc/trunk/moore/wiki/output.wiki|Next]
