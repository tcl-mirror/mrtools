<h3>Moore Type State Models</h3>
There are fundamentally two formulations of state machines.
<br>
<ul>
<li>The
<a target="_blank" href="http://en.wikipedia.org/wiki/Moore_machine">Moore</a>
type machine has its action performed upon entry into the state.
</li>
<li>The
<a target="_blank" href="http://en.wikipedia.org/wiki/Mealy_machine">Mealy</a>
type machine has its action performed upon exiting from the state.
</li>
</ul>The two are mathematically equivalent,
but individuals tend to have strong preferences for one form over the other.
This package implements the Moore formulation.
<h4>The Detailed Rules</h4>
It's important to enumerate the exact rules of state machines that we
intend to support:<br>
<ul>
<li>
The state model consists of a set of states that have relatively arbitrary
names.
Each state is associated with a body of Tcl code that is executed when
the state is entered.
A state may accept parameters.
</li>
<li>
The state model responds to a set of events that also have relatively
arbitrary names.
Events may also carry parameters.
</li>
<li>
The state model implements a set of transitions where an event is
dispatched to a state machine causing a transition to a new state and
the execution of the code associated with the state.
</li>
<li>
A transition can be ignored by a state.
</li>
<li>
A transition can be deemed a logical impossibility (i.e. it can't happen)
and this is considered an error.
</li>
<li>
Any event that causes a transition into a state must carry the same
parameters that the state accepts.
</li>
</ul>

[/doc/trunk/moore/wiki/intro.wiki|Previous]
[/doc/trunk/moore/wiki/terms.wiki|Next]
