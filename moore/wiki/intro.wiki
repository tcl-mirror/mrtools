<h3>Moore Type State Machines in Tcl</h3>
<p>
Finite state machines are a powerful abstraction that can be used to
structure the sequencing of programs.
There are many examples of state machines out there and
even a casual search of the
<a href="http://wiki.tcl.tk/_/search?S=state+machine&amp;_charset_=UTF-8" target="_blank">Tcl Wiki</a>
shows many examples of how to implement simple state machines.
<p>
For more complicated programs, the simple examples of the wiki are not
sufficient. There are several requirements that are needed to use state
machines in a larger program context.
<p>
<ul>
<li>We need to be able to specify a state model that can be
instanciated multiple times. There may be several instances of the same
entity in a program and each instance must have the same behavior.</li>
<li>We need to be able to both generate events to a state machine as
well as generate a delayed event. A delayed event is one that is
delivered at some time in the future. Events need to operate well with
the Tcl event loop.</li>
<li>For debugging, it is essential to be able to obtain a trace of
the event dispatch and state transitions.</li>
<li>For larger state models, a graphical depiction is very useful and
so we need to be able to produce a graphic showing the <span style="font-style: italic;">as implemented</span> state model.</li>
<li>We need a way to associate some data with the state machine.
This will allow us to connect the state machine processing back to the
rest of the program.
</li>
</ul>
<h4>Moore package</h4>
<p>
Here we describe the
<a href="/doc/trunk/packages/package-moore-1.9-tcl.tm">
<b>moore</b> package</a>.
This is a Tcl extension that facilitates designing state machines into
your Tcl programs.
The link references a package file that may be installed directly into
your teacup.
<p>
[/doc/tip/moore/wiki/smtype.wiki|Next]
