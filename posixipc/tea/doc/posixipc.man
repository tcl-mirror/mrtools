[vset version 1.0]
[manpage_begin posixipc n [vset version]]
[comment {
#
#*++
# PROJECT:
#   posixipc
#
# MODULE:
#   posixipc.man -- manual documentation for the posixipc package
#
#*--
#
}]
[moddesc "posixipc Package for Tcl access to POSIX IPC mechanisms"]
[titledesc "Accessing POSIX IPC as a Tcl channel"]
[require Tcl 8.6]
[require posixipc [opt [vset version]]]
[description]
This manpage describes the
[package posixipc]
package which is a "C" based Tcl extension that provides Tcl channel
drivers for POSIX message queue and shared memory IPC mechanisms.

[section Commands]

The [package posixipc] package consists of one command, [cmd posixipc],
which is a namespace ensemble command consisting of two sub-commands.
The sub-command names are [cmd mq] and [cmd shm].
These commands are also exported from the package namespace,
so the invocation of the sub-commands can be shortened by importing
them into the current namespace.
For example:

[example {
package require posixipc
namespace import ::posixipc::mq
}]

will allow access to the [cmd mq] command without the [cmd posixipc]
command word
([emph i.e.] [cmd mq] rather than [cmd "posixipc mq"]).

For simplicity in the following descriptions,
we will use the shortened command invocations.

[subsection "[cmd mq] Command"]

The [cmd mq] command is also a namespace ensemble command
whose sub-commands provide access to POSIX message queue mechanisms.

[list_begin definitions]

[call [cmd "mq open"] [arg [opt options]] [arg mqname] [arg [opt access]]\
        [arg [opt permissions]]]

[para]
The [cmd "mq open"] command opens a POSIX message queue and returns a
channel identifier that may be used in future invocations of I/O commands
such as [cmd chan], [cmd puts], and [cmd close].

[para]
The [arg options] argument supplies options that control the details
of how the message queue is created.
The following options are write only and must be supplied to the [cmd open]
command, but may be read as channel configuration options
([emph i.e.] using the [cmd "chan configure"] or [cmd fconfigure] commands.
These options only have effect if the message queue is created by
the [cmd "mq open"] command.

[list_begin options]
[opt_def -maxmsg count]
        The maximum number of messages that may be queued.
        If not specified, a system default value is used.
        The maximum value of [arg count] is also controlled by
        system specific configuration.
[opt_def -msgsize len]
        The maximum length, in bytes, of any message.
        If not specified, a system default value is used.
        The maximum value of [arg len] is also controlled by
        system specific configuration.
[list_end]

[para]
The following options are read / write and may be supplied to the [cmd open]
command or may be accessed as configuration options.

[list_begin options]
[opt_def -priority priority_number]
        The default message priority as a non-negative number.
        If not specified, the default priority is 0.
        Messages are placed on the message queue in decreasing
        order of priority.
[list_end]

[para]
The following options are read only and can only be read
as configuration options:

[list_begin options]
[opt_def -curmsgs {}]
        The number of messages currently in the queue.
[opt_def -lastpriority {}]
        The message priority of the last received message.
[list_end]

[para]
The [arg mqname] argument is the name of message queue.
Message queue names must start with a slash (/) character and may [emph not]
contain any other slash characters.

[para]
The [arg access] argument, if present, indicates the way in which the
message queue is to be accessed.
This argument may be specified in one of two different forms.
In the first form, [arg access] may have any of the following values:

[list_begin definitions]
[def [option r]]
        Open the message queue for reading only.
        The message queue must already exist.
        This is the default if [arg access] is not specified.
[def [option r+]]
        Open the message queue for reading and writing.
        The message queue must already exist.
[def [option w]]
        Open the message queue for writing only.
        Create the message queue if it does not already exist.
[def [option w+]]
        Open the message queue for reading and writing.
        Create the message queue if it does not already exist.
[list_end]

[para]
All legal [arg access] values above may have the character [emph b] added
as the second or third character in the value to indicate that the
opened channel should be configured as if with the
[cmd "fconfigure -translation binary"] option,
making the channel suitable for reading or writing of binary data.

[para]
In the second form,
[arg access] consists of a list of any of the following flags,
all of which have the standard POSIX meanings.
Exactly one flag must be either [option RDONLY], [option WRONLY], or
[option RDWR].

[list_begin definitions]
[def [option RDONLY]]
        Open the message queue for reading only.
[def [option WRONLY]]
        Open the message queue for writing only.
[def [option RDWR]]
        Open the message queue for both reading and writing.
[def [option BINARY]]
        Configure the opened channel with the [cmd "-translation binary"] option.
[def [option CREAT]]
        Create the message queue if it does not already exist.
[def [option EXCL]]
        If [option CREAT] is also specified, an error is returned if the
        message queue already exists.
[def [option NONBLOCK]]
        Prevent the process from blocking in subsequent I/O operations.
[list_end]

[para]
If the message queue is created as part of opening it,
[arg permissions] is used to set the permissions for the new message
queue in conjunction with the process's file mode creation mask.
The value of [arg permissions] defaults to 0666.

[call [cmd "mq unlink"] [arg mqname]]

[para]
The [cmd "mq unlink"] command removes the message queue named, [arg mqname],
from the system.
Message queues persist in the system until explicitly unlinked or
upon system reboot.
The queue is actually destroyed when all processes that have open
descriptors for the queue close those descriptors referring to the queue.

[list_begin definitions]

[def [arg mqname]]
The name of message queue.
Message queue names must start with a slash (/) character and may [emph not]
contain any other slash characters.

[list_end]

[call [cmd "mq send"] [arg chan] [arg msg] [arg [opt priority]]]

The [cmd "mq send"] command operates outside of the buffering of the Tcl
virtual channel system and directly sends [arg msg] to the message queue
associated with [arg chan].
If specified, the message is sent with [arg priority] priority.
If the [arg priority] argument is not specified,
the message is sent with the value of the [option -priority] configuration
option.
This command is provided for applications where message priority
changes frequently, such as on a message by message basis.
Normal access to the message queue is intended to be provided by
Tcl I/O commands such as [cmd chan].

[list_begin definitions]

[def [arg chan]]
A message queue channel token as returned from [cmd "mq open"].
The channel must have been opened for writing.

[def [arg msg]]
A message to be placed on the message queue.

[def [arg priority]]
An optional unsigned number specifying the priority of the message.
If [arg priority] is not specfied,
then the current value of the [option -priority] configuration option
is used as the message priority.

[list_end]

[call [cmd "mq receive"] [arg chan] [arg [opt varname]]]

[para]
The [cmd "mq receive"] command returns the next highest priority message
from the message queue given by [arg chan].
This command operates outside of the buffering of the Tcl
virtual channel system.
If the variable, [arg varname], is specified,
the priority of the message is set as the variable's value.
This command is provided for those applications where
message priority changes frequently, such as on a message by message basis.
The message priority of the last received message is also available
as the [option -lastpriority] configuration option.

[list_begin definitions]

[def [arg chan]]
A message queue channel token as returned from [cmd "mq open"].
The channel must have been opened for reading.

[def [arg varname]]
An optional variable name where the value of the priority
of the received message is set.
The priority of the last received message is also available
as the [option -lastpriority] configuration option.

[list_end]

[list_end]

[subsection "[cmd shm] Command"]

The [cmd shm] command is also a namespace ensemble command
whose sub-commands provide access to POSIX shared memory mechanisms.
This command only supports POSIX named shared memory.
Unnamed shared memory is not supported.
Since it is intended that the memory is shared between multiple processes,
it is necessary to have an exclusion mechanism to prevent
processes interferring with each other.
The underlying shared memory channel driver also uses a POSIX semaphore
to insure exclusive access to the shared memory.

[list_begin definitions]

[call [cmd "shm open"] [arg [opt options]] [arg shmname] [arg [opt access]]\
        [arg [opt permissions]]]

[para]
The [cmd "shm open"] command opens a POSIX named shared memory object and
returns a channel identifier that may be used in future invocations of I/O
commands such as [cmd chan], [cmd puts], and [cmd close]

[para]
The [arg options] argument supplies options that control the details
of how the shared memory is created.

[list_begin options]

[opt_def -size bytes]
The size of the shared memory in bytes.
This option must be supplied if the shared memory object is to be created.
This option is not required if an existing shared memory object is being opened
nor can the size of an existing shared memory object be changed as part of
opening it.

[list_end]

[para]
The [arg shmname] argument specifies the name of shared memory object.
Shared memory names must start with a slash (/) character and may [emph not]
contain any other slash characters.

[para]
The [arg access] argument, if present, indicates the way in which the
shared memory is to be accessed.
It may be specified in one of two forms.
In the first form, [arg access] may have any of the following values:

[list_begin options]
[opt_def r]
Open the shared memory for reading only.
The shared memory must already exist.
This is the default if [arg access] is not specified.

[opt_def r+]
Open the shared memory for reading and writing.
The shared memory must already exist.

[opt_def w]
Open the shared memory for writing only.
Create the shared memory if it does not already exist.

[opt_def w+]
Open the shared memory for reading and writing.
Create the shared memory if it does not already exist.

[list_end]

[para]
All legal [arg access] values above may have the character [emph b] added
as the second or third character in the value to indicate that the
opened channel should be configured as if with the
[cmd "fconfigure -translation binary"] option, making the channel suitable
for reading or writing of binary data.

[para]
In the second form,
[arg access] consists of a list of any of the following flags,
all of which have the standard POSIX meanings.
Exactly one flags must be either [option RDONLY], [option WRONLY], or
[option RDWR].

[list_begin options]

[opt_def RDONLY]
        Open the shared memory for reading only.
[opt_def WRONLY]
        Open the shared memory for writing only.
[opt_def RDWR]
        Open the shared memory for both reading and writing.
[opt_def BINARY]
        Configure the opened channel with the [cmd "-translation binary"] option.
[opt_def CREAT]
        Create the shared memory if it does not already exist.
[opt_def EXCL]
        If [option CREAT] is also specified, an error is returned if the
        shared memory already exists.
[opt_def NONBLOCK]
        Prevent the process from blocking in subsequent I/O operations.

[list_end]

If the message queue is created as part of opening it,
[arg permissions] is used to set the permissions for the new message
queue in conjunction withthe process's file mode creation mask.
The value of [arg permissions] defaults to 0666.

[call [cmd "shm unlink"] [arg shmname]]

The [cmd "shm unlink"] command removes the shared memory object named,
[arg shmname], from the system.
Shared memory objects persist in the system until explicitly unlinked or
upon system reboot.
The shared memory is actually destroyed when all processes that have open
descriptors for the shared memory close those descriptors.

[list_begin definitions]

[def [arg shmname]]
The name of shared memory object.
Shared memory object names must start with a slash (/) character and may *not*
contain any other slash characters.

[list_end]

[list_end]

[keywords POSIX IPC]

[see_also [cmd open] [cmd chan]]

[manpage_end]
