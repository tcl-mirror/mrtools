== Semaphore
Semaphore

=== SEM Command

[source,c]
----
<<sem forward function declarations>>=
static int semOpenCmd(ClientData clientData, Tcl_Interp *interp, int objc,
        Tcl_Obj *const objv[]) ;
----

[source,c]
----
<<sem static function definitions>>=
static int
semOpenCmd(
    ClientData clientData,
    Tcl_Interp *interp,
    int objc,
    Tcl_Obj *const objv[])
{
    return TCL_OK ;
}
----

[source,c]
----
<<sem forward function declarations>>=
static int semCloseCmd(ClientData clientData, Tcl_Interp *interp, int objc,
        Tcl_Obj *const objv[]) ;
----

[source,c]
----
<<sem static function definitions>>=
static int
semCloseCmd(
    ClientData clientData,
    Tcl_Interp *interp,
    int objc,
    Tcl_Obj *const objv[])
{
    return TCL_OK ;
}
----

[source,c]
----
<<sem forward function declarations>>=
static int semPostCmd(ClientData clientData, Tcl_Interp *interp, int objc,
        Tcl_Obj *const objv[]) ;
----

[source,c]
----
<<sem static function definitions>>=
static int
semPostCmd(
    ClientData clientData,
    Tcl_Interp *interp,
    int objc,
    Tcl_Obj *const objv[])
{
    return TCL_OK ;
}
----

[source,c]
----
<<sem forward function declarations>>=
static int semWaitCmd(ClientData clientData, Tcl_Interp *interp, int objc,
        Tcl_Obj *const objv[]) ;
----

[source,c]
----
<<sem static function definitions>>=
static int
semWaitCmd(
    ClientData clientData,
    Tcl_Interp *interp,
    int objc,
    Tcl_Obj *const objv[])
{
    return TCL_OK ;
}
----

[source,c]
----
<<sem forward function declarations>>=
static int semUnlinkCmd(ClientData clientData, Tcl_Interp *interp, int objc,
        Tcl_Obj *const objv[]) ;
----

[source,c]
----
<<sem static function definitions>>=
static int
semUnlinkCmd(
    ClientData clientData,
    Tcl_Interp *interp,
    int objc,
    Tcl_Obj *const objv[])
{
    return TCL_OK ;
}
----

// vim:set syntax=asciidoc:
