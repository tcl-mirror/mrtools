== Code Organization

In this section we describe how the code files are composed from the
literate program chunks.

There are two root chunks:

* The ``C'' source for the package.
* The `tcltest` source for testing the extension.

=== Package Source Code

The following root chunk shows the general layout of the ``C'' source
code for the package.
The ordering of the file is per the requirements of the ``C'' compiler.
For example,
since we prefer to place file static functions after the external
functions,
it is necessary to have forward references to the static functions.
Generally,
data types definitions must precede data definitions.

(((chunk,posixipc.c)))
[source,c]
----
<<posixipc.c>>=
/*
<<edit warning>>
*/

/*
<<copyright info>>
*/

/*
 * Include Files
 */
#define _POSIX_C_SOURCE 201112L

<<include files>>

/*
 * Macros
 */
<<macros>>

/*
 * Data Types
 */
<<data types>>

/*
 * Forward References
 */
<<forward function declarations>>

/*
 * Static Data
 */
<<static data definitions>>

/*
 * External Functions
 */
<<external function definitions>>

/*
 * Static Functions
 */
<<static function definitions>>
----

Include files are collected into a single chunk.

(((chunk,include files)))
[source,c]
----
<<include files>>=
#include "tcl.h"
#include <stdlib.h>
#include <stdbool.h>
#include <stdint.h>
#include <unistd.h>
#include <errno.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <ctype.h>
#include <string.h>
#include <mqueue.h>
#include <semaphore.h>
----

(((chunk,macros)))
[source,c]
----
<<macros>>=
#ifndef COUNTOF
#define COUNTOF(a)      (sizeof(a) / sizeof(a[0]))
#endif /* COUNTOF */
<<package macros>>
----

The following chunks define the composition of the
chunks defined for the ``C'' source file root.
This composition allows us to order commonly used definitions
to appear before definitions for specific portions of the source.
For example,
we order the aspects dealing with the package as a whole to come
before the message queue aspects of the source which come before the
shared memory aspects.

(((chunk,data types)))
[source,c]
----
<<data types>>=
<<common data types>>
<<mq data types>>
<<shm data types>>
----

(((chunk,static data definitions)))
[source,c]
----
<<static data definitions>>=
<<mq static data>>
<<shm static data>>
----

(((chunk,forward function declarations)))
[source,c]
----
<<forward function declarations>>=
<<common forward function declarations>>
<<mq forward function declarations>>
<<shm forward function declarations>>
----

(((chunk,static function definitions)))
[source,c]
----
<<static function definitions>>=
<<common static function definitions>>
<<mq static function definitions>>
<<shm static function definitions>>
----

(((chunk,external function definitions)))
[source,c]
----
<<external function definitions>>=
<<package external function definitions>>
<<mq external functions definitions>>
<<shm external functions definitions>>
----

=== Unit Tests

Part of the literate program documentation is to show the test cases
for the code.
In the document,
we have included the test cases near to the code they test.
In this section,
the root chunk for the tests is defined.

The package uses `tcltest` to run and tally the tests.

(((chunk,posixipc.test)))
[source,tcl]
----
<<posixipc.test>>=
<<edit warning>>
<<copyright info>>

<<required packages>>

# Add custom arguments here.
set optlist {
    {level.arg warn {Logging level}}
}
array set options [::cmdline::getKnownOptions argv $optlist]
tcltest::configure {*}$argv

logger::setlevel $options(level)

load ../tea/build/x86_64-linux-tcl8.6/libposixipc1.0.so

namespace eval ::posixipc::test {
    namespace import ::tcltest::*

    <<set up logger>>
    log::info "testing posixipc version: [package require posixipc]"

    variable mqFSMount /dev/mqueue
    variable shmFSMount /dev/shm

    <<package initialization tests>>

    namespace import ::posixipc::mq
    <<mq tests>>
    <<mq examples>>

    namespace import ::posixipc::shm
    <<shm tests>>

    cleanupTests
}
----

We collect all the additional packages required for the tests into
one place.

(((chunk,required packages)))
[source,c]
----
<<required packages>>=
package require Tcl 8.6
package require cmdline
package require logger
package require logger::utils
package require logger::appender
package require tcltest
----

The following incantation sets up the logger to use color to output log
messages and then imports the logger commands into a child namespace.

(((chunk,set up logger)))
[source,c]
----
<<set up logger>>=
set logger [::logger::init posixipc]
::logger::utils::applyAppender -appender colorConsole -serviceCmd $logger\
        -appenderArgs {-conversionPattern {\[%c\] \[%p\] '%m'}}
::logger::import -all -force -namespace log posixipc
----

////
test case template
----
test X-1.0 {
} -setup {
} -cleanup {
} -body {
} -result {}
----
////

// vim:set syntax=asciidoc:

