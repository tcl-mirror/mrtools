== Code Organization
Code Organization

=== Package Source Code

[source,c]
----
<<posixipc.c>>=
/*
<<edit warning>>
*/

/*
<<copyright info>>
*/

/*
 * Include Files
 */
#define _POSIX_C_SOURCE 201112L

<<include files>>

/*
 * Macros
 */
<<macros>>

/*
 * Constants
 */
<<constants>>

/*
 * Data Types
 */
<<data types>>

/*
 * Forward References
 */
<<forward function declarations>>

/*
 * Static Data
 */
<<static data definitions>>

/*
 * External Functions
 */
<<external function definitions>>

/*
 * Static Functions
 */
<<static function definitions>>
----

[source,c]
----
<<include files>>=
#include "tcl.h"
#include <stdlib.h>
#include <stdbool.h>
#include <stdint.h>
#include <unistd.h>
#include <errno.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <ctype.h>
#include <string.h>
#include <mqueue.h>
#include <semaphore.h>
----

[source,c]
----
<<macros>>=
#ifndef COUNTOF
#define COUNTOF(a)      (sizeof(a) / sizeof(a[0]))
#endif /* COUNTOF */
<<package macros>>
----

[source,c]
----
<<data types>>=
<<common data types>>
<<mq data types>>
<<shm data types>>
----

[source,c]
----
<<static data definitions>>=
<<package static data>>
<<mq static data>>
<<shm static data>>
----

[source,c]
----
<<forward function declarations>>=
<<common forward function declarations>>
<<mq forward function declarations>>
<<shm forward function declarations>>
----

[source,c]
----
<<static function definitions>>=
<<common static function definitions>>
<<mq static function definitions>>
<<shm static function definitions>>
----

[source,c]
----
<<external function definitions>>=
<<package external function definitions>>
<<mq external functions definitions>>
<<shm external functions definitions>>
----

=== Unit Tests

[source,tcl]
----
<<posixipc.test>>=
<<edit warning>>
<<copyright info>>

package require Tcl 8.6
package require cmdline
package require logger
package require logger::utils
package require logger::appender
package require tcltest

# Add custom arguments here.
set optlist {
    {level.arg warn {Logging level}}
}
array set options [::cmdline::getKnownOptions argv $optlist]

logger::setlevel $options(level)

load ../tea/build/libposixipc1.0.so

eval tcltest::configure $argv

namespace eval ::posixipc::test {
    namespace import ::tcltest::*

    logger::setlevel $::options(level)
    set logger [::logger::init posixipc]
    ::logger::utils::applyAppender -appender colorConsole -serviceCmd $logger\
            -appenderArgs {-conversionPattern {\[%c\] \[%p\] '%m'}}
    ::logger::import -all -force -namespace log posixipc

    log::info "testing posixipc version: [package require posixipc]"

    variable mqFSMount /dev/mqueue
    variable shmFSMount /dev/shm

    <<package initialization tests>>

    namespace import ::posixipc::mq
    <<mq tests>>
    <<mq examples>>
    <<shm tests>>

    cleanupTests
}
----

////
----
test X-1.0 {
} -setup {
} -cleanup {
} -body {
} -result {}
----
////

// vim:set syntax=asciidoc:

