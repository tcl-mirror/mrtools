// vim:set syntax=asciidoc:

== Introduction

This document is about a Tcl package named `posixipc`.
The `posixipc` package is a ``C'' based Tcl extension
containing commands that allow a Tcl program
to access POSIX Inter-Process Communications (IPC) facilities.

This document is also a
http://www.literateprogramming.com/[literate program]
and contains all the design information and code for the `posixipc` package.
Readers unfamiliar with literate programs should consult the
<<literate-programming,appendix>> for more details.

There are three main sections in the document.
The main sections describe the three IPC mechanisms provided by
the POSIX standard, namely:

* Message queues
* Semaphores
* Shared memory

=== Background

Modern operating systems running on modern computing devices provide
independent virtual address spaces in which a process runs.
The process code runs isolated from other process code and interacts
with the environment via the OS.
This arrangement means that processes must take special means to
interact or communicate.

Many different mechanisms have been developed to allow processes to
communicate.
Simple communications can happen via the file system.
Communications channels are also a viable means of process interaction.
The POSIX standard defines the three mechanisms mentioned above.
Like most standards,
the syntax and semantics of the IPC mechanism is defined,
but implementation considerations are appropriately left to
OS authors.

The mechanisms defined by the POSIX standard are basic IPC mechanisms
that have proven useful for some time.
Message queues allow processes to send and receive discrete messages
of arbitrary content.
Semaphores are controlled counters which can be incremented and
decremented and are not allowed to become less than zero.
Shared memory makes memory space available in the virtual addresses
of multiple processes.

=== Linux Specific

Although the POSIX definitions do not imply a particular implementation,
the interface we present here is Linux specific.
In particular,
this set of Tcl commands takes advantage of implementation characteristics
available in the Linux implementation of the POSIX IPC features.
Specifically,
Linux implements the POSIX semantics for IPC using virtual filesystems.
For message queues and shared memory,
this means the identifier of the facility is also a file descriptor.
Native Linux file descriptors greatly facilitate integrating with the Tcl
channel system and make dealing with event driven I/O much cleaner.
With a file descriptor,
much of the heavy lifting for I/O can be accomplished by the Tcl channel
code using the virtual channel drivers provided in this package.
For these reasons,
this code is Linux specific.

For example,
once a message queue is open and established it is possible to use
`::puts` to write a message to the queue.
This also enables the use of stacked channels,
implemented at the script level,
to handle any structure or protocol defined for a message.

Because we giving up portability to other operating systems,
we do gain one distinct coding advantage.
Since the package is targeted at Linux,
we can assume that the compiler is the GNU ``C'' compiler.
This allows us to write in a newer dialect of ``C''.
We do not take any specific advantage of GNU compiler extensions.
However, traditionally Tcl extensions are written in an old
K & R style of ``C''.
Here we use the C11 as the standard for the code.
This makes for much cleaner code, in particular allowing variable
declaration to occur close to their usage.
