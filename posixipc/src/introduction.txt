// vim:set syntax=asciidoc:

== Introduction

This document is about a Tcl package named `posixipc`.
The `posixipc` package is a ``C'' based Tcl extension
containing commands that allow a Tcl program
to access POSIX Inter-Process Communications (IPC) facilities.

This document is also a
http://www.literateprogramming.com/[literate program]
and contains all the design information and code for the `posixipc` package.
Readers unfamiliar with literate programs should consult the
<<literate-programming,appendix>> for more details.

There are two main sections in the document.
The main sections describe the usage of two IPC mechanisms provided by
the POSIX standard, namely:

* Message queues
* Shared memory

There is no explicit support for POSIX semaphores,
but they are used in the implementation of shared memory access.

=== Background

Modern operating systems running on modern computing devices provide
independent virtual address spaces in which a process runs.
The code for a process runs isolated from other process code and interacts
with the environment via the operating system.
This arrangement means that processes must take special means to
interact or communicate.

Many different mechanisms have been developed to allow processes to
communicate.
Simple communications can happen via the file system.
Communications channels are also a viable means of process interaction.
The POSIX standard defines the mechanisms mentioned above.
Like most standards,
the syntax and semantics of the IPC mechanism is defined,
but implementation considerations are appropriately left to
OS authors.

The mechanisms defined by the POSIX standard are basic IPC mechanisms
that have proven useful for some time.
Message queues allow processes to send and receive discrete messages
of arbitrary content.
Shared memory makes memory space available in the virtual addresses
of multiple processes that contains the same data.

=== Unix Specific

Although the POSIX definitions do not imply a particular implementation,
the interface we present here is specific to Unix-style operating systems
(_e.g._ Linux and FreeBSD).
In particular,
this set of Tcl commands takes advantage of implementation characteristics
available in the implementation of the POSIX IPC features.
Specifically,
most implementions of the POSIX semantics for IPC use virtual filesystems
in Unix-style systems..
For message queues and shared memory,
this means the identifier of the facility is also a file descriptor.
Native file descriptors greatly facilitate integrating with the Tcl
channel system and make dealing with event driven I/O much cleaner.
With a file descriptor,
much of the heavy lifting for I/O can be accomplished by the Tcl channel
code using the virtual channel drivers provided in this package.
For these reasons,
this code is Unix specific.

Because we giving up portability to other operating systems,
we do gain one distinct coding advantage.
Since the package is targeted at more modern Unix-like systems,
we can assume that the compiler supports newer dialects of ``C''.
We do not take any specific advantage of compiler extensions.
However, traditionally Tcl extensions are written in an old
K & R style of ``C''.
Here we use the C11 as the standard for the code.
This makes for much cleaner code,
in particular allowing variable declarations to occur lexically close to their
usage and allowing designated initializers for variables.

Also note that the primary development environment for this package
is Linux.

=== Tcl Channel Architecture

The interface to POSIX ICP mechanisms provided by this package is through
the Tcl channel architecture.
This architecture provides generic script and ``C'' program access to
I/O and uses type-specific channel drivers to accomodate the differences
in the underlying I/O mechanism.

In this package,
channel drivers are provided for message queues and shared memory.
This allows scripts to use conventional and well known commands to
perform I/O via the POSIX IPC mechanisms.
For example,
once a message queue is open and established it is possible to use
`::puts` to write a message to the queue.
This also enables the use of stacked channels,
implemented at the script level,
to handle any structure or protocol defined for a message.

However,
the mapping of POSIX IPC mechanism onto the Tcl channel architecture
is not perfect.
Some features and semantics do not map completely or seamlessly.
These issues are discussed later in this document.

=== Other Approaches

Over the years,
there have been several Tcl packages that support IPC.
For example,
`tcl-mq` by Alexandros Stergiakis,
provides relatively direct access to message queue system calls
but does not provide a Tcl channel driver.
Also by Alexandros Stergiakis,
`tcl-mmap` provides a generalized channel driver to memory mapped files
that is not specific to POSIX shared memory mechanisms.
Both extensions are licensed by the GNU Public License, version 2
which can be an impediment for some applications.
There are probably other implementation of which the author is not aware.
