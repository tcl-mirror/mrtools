// vim:set syntax=asciidoc:

== Harnessing micca generated domains

This document is about a program named `bosal`.
This document is also a
http://www.literateprogramming.com/[literate program]
and contains all the design information and code for the `bosal` program.
Readers unfamiliar with literate programs should consult the
<<literate-programming,appendix>> for more details.

=== Test harness concepts

When
http://repos.modelrealization.com/cgi-bin/fossil/mrtools/wiki?name=MiccaPage[`micca`]
is used to translate an xUML domain into code,
the resulting ``C'' file can be combined with a `main` function
and any necessary external entity stubsfootnote:[`micca` can also
generate the external entity stubs] to build an executable of the
domain.
The resulting executable, unfortunately, does not do very much.
A domain in isolation, without being bridged to other service domains,
doesn't have any way of being triggered to execute.
We need the ability to invoke domain operations, signal events,
and perform other model level actions on the domain and to be
able to observe its execution.

The `micca` run-time is capable of executing in a POSIX environment.
This is intended primarily to be able to simulate and integrate
a system that is ultimately targeted for a micro-controller.
A POSIX environment has more capability for testing and introspection and a
substantial amount of the integration and testing for an application can be
accomplished there.
To support this important activity,
`bosal` is used to automatically generate a test harness in which one or
more domains may be run under the control of the harness.

=== Test harness structure

The following figure shows schematically how a `bosal` generated
harness is structured.

image::harness-drawing.pdf[title="Test Harness Structure Overview"]

The `bosal` generated test harness contains code that creates a
localhost TCP/IP server.
Communication is across an ordinary TCP socket.
The protocol is ASCII text, record oriented and formulated as commands.
It is possible to interact with a test harness using `telnet(1)`.
A test harness can be used with multiple domains.
Any external operations of the harnessed domains must also be resolved.
This can be done using separate code files or by requesting micca
to generate the stubs.
In the multiple domain case,
there are usually bridge code files that take the place of some of the
external operations stubs.
By compiling and linking the generated harness code, the generated
domain code, and any other required bridges or stubs,
a program is obtained that can control the domain execution
via commands received across the communications interface.

By reading the files saved by `micca`,
`bosal` can generate the code that maps the command protocol onto
the specifics of a domain.
For example,
domain operations can be invoked by the the `domainop` command.
This command takes arguments of which domain the operation refers to,
the name of the operation, and any arguments the operation requires.
The test harness code then arranges to invoke the ``C'' function
that is the domain operation.

=== Building a test harness

To complete building a test harness,
a `main` function must be provided.
The `main` function must invoke
`mrt_Initialize()` before any domain or harness
functions are invoked.
The test harness is started by invoking `bsl_Run()`.
Other initialization may be done in `main`.
For example,
interacting with other systems or programs or invoking domain
initialization functions are candidates for placing in `main`.
The code below shows a minimal `main` function necessary to run
a test harness.
Upon request,
`bosal` will generate a minimal `main` function directly into the
harness code file.

[source,c]
----
#include "bosal.h"
#include "micca_rt.h"

int
main(
    int argc,
    char **argv)
{
    /*
     * Initializing the micca run time must be done before any other
     * domain or harness functions are invoked.
     */
    mrt_Initialize() ;

    /*
     * It may be necessary to initialize domains or bridges. This can
     * be specific to the needs of a particular situation.
     */

    /*
     * Finally, the harness is set to run. The harness code will take
     * over handling the micca event loop.
     */
    bsl_Run() ;
}
----

=== Invoking `bosal`

Invoking `bosal`
