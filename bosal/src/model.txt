// vim:set syntax=asciidoc:

= Bosal Data Model

== Introduction

In this section,
we present the class model underlying the `bosal` test harness.
There are two subsystems:

. The harness subsystem describes the components of a domain as
they relate to the needs of a test harness.
. The data type subsystem describes the supported type system that is
used to marshall and unmarshall data across the communications
interface.

=== Harness Subsystem

The following <<harness-class-diagram,figure>> shows the class diagram
for the harness subsystem.

[[harness-class-diagram,Harness Subsystem Class Diagram]]
image::bosal-harness-classes.pdf[title="Bosal Harness Subsystem"]
(((Class Diagram,Harness Subsystem)))

==== Test Harness

(((Class,Test Harness)))

.Test Harness Attributes
[options="header",cols="2,1,10"]
|=========
|Attribute      |Type       |Description
|Name \{I}      |string
    |Each Test Harness is given a name.
|Initialization |string
    |When a test harness is initialized at start up, the code contained
    in the Initialization attribute is executed.
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class TestHarness {
    attribute Name string -id 1
    attribute Initialization string -default {}
}
----

==== File Directory

(((Class,File Directory)))

.File Directory Attributes
[options="header",cols="2,3,10"]
|=========
|Attribute      |Type       |Description
|Name \{I}      |string
    |A path to a directory in the local file system which is searched
    for micca save files.
|Order \{I2}    |ordinal
    |A number indicating the relative order in which file searches
    are performed. Directoies given my *Name* are searched in
    ascending order of the *Order* attribute.
|Harness \{R2}  |Refers to Test{nbsp}Harness.Name.
    |The name of the Test Harness for which the File Directory is
    searched.
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class FileDirectory {
    attribute Name string -id 1
    attribute Order int -system 0
    attribute Harness string

    reference R2 TestHarness -link {Harness Name}
}
----

==== R2

(((Relationship, R2)))
[frame="topbot",grid="rows",cols="2>s,4^,1e,2<s"]
|=========
|File Directory |is a file search location for|exactly one|Test Harness
|Test Harness   |searches for files in|one or more|File Directory
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R2 FileDirectory 1..*--1 TestHarness
----

==== Domain

(((Class,Domain)))

.Domain Attributes
[options="header",cols="2,3,10"]
|=========
|Attribute      |Type       |Description
|Name \{I}      |string
    |Each Domain has a name by which it is known.
|Harness \{R1}  |Refers to Test{nbsp}Harness.Name.
    |The name of the Test Harness which will coordinate the execution
    of the Domain.
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class Domain {
    attribute Name string -id 1
    attribute Harness string

    reference R1 TestHarness -link {Harness Name}
}
----

==== R1

(((Relationship,R1)))
[frame="topbot",grid="rows",cols="2>s,4^,1e,2<s"]
|=========
|Domain         |is coordinated by |exactly one|Test Harness
|Test Harness   |coordinates |one or more|Domain
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R1 Domain 1..*--1 TestHarness
----

==== Domain Operation

(((Class,Domain Operation)))

.Domain Operation Attributes
[options="header",cols="2,3,10"]
|=========
|Attribute      |Type       |Description
|Domain \{I,R3} |Refers to Domain.Name
    |The name of the domain to which the operation applies.
|Name \{I}      |string
    |Each Domain Operation has a name by which it is invoked.
|Return Data Type \{R9} |Refers to Data{nbsp}Type.Name.
    |The name of the data type of the operation return value.
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class DomainOperation {
    attribute Domain string -id 1
    attribute Name string -id 1
    attribute ReturnDataType string

    reference R3 Domain -link {Domain Name}
    reference R9 DataType -link {ReturnDataType Name}
}
----

==== R3

(((Relationship,R3)))
[frame="topbot",grid="rows",cols="2>s,4^,1e,2<s"]
|=========
|Domain Operation   |operates on    |exactly one    |Domain
|Domain         |is operated on by  |zero or more   |Domain
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R3 DomainOperation 0..*--1 Domain
----

==== R9

(((Relationship,R9)))
[frame="topbot",grid="rows",cols="2>s,4^,1e,2<s"]
|=========
|Domain Operation   |returns a value of     |exactly one    |Data Type
|Data Type          |is the return type of  |zero or more   |Domain Operation
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R9 DomainOperation 0..*--1 DataType
----

==== Domain Operation Parameter

(((Class,Domain Operation Parameter)))

.Domain Operation Parameter Attributes
[options="header",cols="3,4,10"]
|=========
|Attribute              |Type       |Description
|Domain \{I,I2,R8}      |Refers to Domain{nbsp}Operation.Name
    |The name of the domain to which the parameter applies.
|Operation \{I,I2,R8}   |Refers to Domain{nbsp}Operation.Name
    |The name of the operation to which the parameter applies.
|Name \{I}              |string
    |Each Domain Operation Parameter has a name by which it is known.
|Position \{I2}         |ordinal
    |The order of the parameter when the operation is invoked.
|Data Type \{R10}       |Refers to Data{nbsp}Type.Name.
    |The name of the data type of the parameter value.
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class DomainOperationParameter {
    attribute Domain string -id 1 -id 2
    attribute Operation string -id 1 -id 2
    attribute Name string -id 1
    attribute Position int -id 2
    attribute DataType string

    reference R8 DomainOperation -link Domain -link {Operation Name}
    reference R10 DataType -link {DataType Name}
}
----

==== R8

(((Relationship,R8)))
[frame="topbot",grid="rows",cols="4>s,4^,2e,4<s"]
|=========
|Domain Operation Parameter |is a parameter of  |exactly one |Domain Operation
|Domain Operation   |is parameterized by|zero or more|Domain Operation Parameter
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R8 DomainOperationParameter 0..*--1 DomainOperation
----

==== R10

(((Relationship,R10)))
[frame="topbot",grid="rows",cols="4>s,4^,2e,4<s"]
|=========
|Domain Operation Parameter |is typed according to |exactly one     |Data Type
|Data Type |is the parameter type of|zero or more |Domain Operation Parameter
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R10 DomainOperationParameter 0..*--1 DataType
----

==== Class

(((Class,Class)))

.Class Attributes
[options="header",cols="3,3,10"]
|=========
|Attribute      |Type       |Description
|Domain \{I,R4} |Refers to Domain.Name
    |The name of the domain to which the Class belongs.
|Name \{I}      |string
    |Each Class has a name by which it is invoked.
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class Class {
    attribute Domain string -id 1
    attribute Name string -id 1

    reference R4 Domain -link {Domain Name}
}
----

==== R4

(((Relationship,R4)))
[frame="topbot",grid="rows",cols="2>s,4^,1e,2<s"]
|=========
|Class  |represents an entity in    |exactly one    |Domain
|Domain |represents entities by     |one or more    |Class
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R4 Class 1..*--1 Domain
----

==== Attribute

(((Class,Attribute)))

.Attribute Attributes
[options="header",cols="3,3,10"]
|=========
|Attribute      |Type       |Description
|Domain \{I,R7} |Refers to Class.Domain
    |The name of the domain to which the Attribute belongs.
|Class \{I,R7}  |Refers to Class.Name
    |The name of the Class to which the Attribute belongs.
|Name \{I}      |string
    |Each Attribute has a name.
|Data Type \{R11}   |Refers to Data{nbsp}Type.Name
    | The name of the data type of the attribute.
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class Attribute {
    attribute Domain string -id 1
    attribute Class string -id 1
    reference R7 Class -link Domain -link {Class Name}
    attribute Name string -id 1
    attribute DataType string
    reference R11 DataType -link {DataType Name}
}
----

==== R7

(((Relationship,R7)))
[frame="topbot",grid="rows",cols="2>s,4^,1e,2<s"]
|=========
|Attribute |is a property of |exactly one     |Class
|Class |is characterized by |one or more    |Attribute
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R7 Attribute 1..*--1 Class
----

==== R11

(((Relationship,R11)))
[frame="topbot",grid="rows",cols="2>s,4^,1e,2<s"]
|=========
|Attribute |has values given by         |exactly one     |Data Type
|Data Type |defines the values set for  |zero or more    |Attribute
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R11 Attribute 0..*--1 DataType
----

==== Class Instance

(((Class,Class Instance)))

.Class Instance Attributes
[options="header",cols="3,3,10"]
|=========
|Attribute      |Type       |Description
|Domain \{I,R5} |Refers to Class.Domain
    |The name of the domain to which the Class Instance belongs.
|Class \{I,R5}  |Refers to Class.Name
    |The name of the class to which the Class Instance belongs
|Number \{I}    |Ordinal
    |Each class instance is given a seqential number starting at zero
     that can be used to distinguish the instance.
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class ClassInstance {
    attribute Domain string -id 1
    attribute Class string -id 1
    attribute Number int -id 1

    reference R5 Class -link Domain -link {Class Name}
}
----

==== R5

(((Relationship,R5)))
[frame="topbot",grid="rows",cols="2>s,4^,1e,2<s"]
|=========
|Class Instance     |is instantiated according to    |exactly one   |Class
|Class       |is a template for    |one or more    |Class Instance
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R5 ClassInstance 1..*--1 Class
----

==== Pre-existing Instance

(((Class,Pre-existing Instance)))

.Pre-existing Instance Attributes
[options="header",cols="3,3,10"]
|=========
|Attribute          |Type       |Description
|Domain \{I,I2,R6}  |Refers to Class Instance.Domain
    |The name of the domain to which the Pre-existing Instance belongs.
|Class \{I,I2,R6}   |Refers to Class Instance.Class
    |The name of the class to which the Pre-existing Instance belongs.
|Number \{I,R6}     |Refers to Class Instance.Number
    |The number of the class instance for which the Pre-existing Instance
    is named.
|Name \{I2}         |string
    |The name given to the class instance when it was defined as a
    Pre-existing Instance.
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class PreExistingInstance {
    attribute Domain string -id 1 -id 2
    attribute Class string -id 1 -id 2
    attribute Number int -id 1
    attribute Name string -id 2

    reference R6 ClassInstance -link Domain -link Class -link Number
}
----

==== R6

(((Relationship,R6)))
[frame="topbot",grid="rows",cols="2>s,4^,1e,2<s"]
|=========
|Pre-existing Instance|gives an initial value to |exactly one   |Class Instance
|Class Instance       |is predefined as |zero or more    |Pre-existing Instance
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R6 PreExistingInstance 0..1--1 ClassInstance
----

==== State Model

(((Class,State Model)))

.State Model Attributes
[options="header",cols="3,3,10"]
|=========
|Attribute      |Type       |Description
|Domain \{I,R15} |Refers to Class.Domain
    |The name of the domain to which the State Model belongs.
|Class \{I,R15}  |Refers to Class.Name
    |The name of the class to which the State Model belongs
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class StateModel {
    attribute Domain string -id 1
    attribute Class string -id 1

    reference R15 Class -link Domain -link {Class Name}
}
----

==== R15

(((Relationship,R15)))
[frame="topbot",grid="rows",cols="2>s,4^,1e,2<s"]
|=========
|State Model     |describes the lifecycle of |exactly one   |Class
|Class       |has a lifecycle described by |at most one |State Model
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R15 StateModel 0..1--1 Class
----

==== State Specification

(((Class,State Specification)))

.State Specification Attributes
[options="header",cols="3,3,10"]
|=========
|Attribute      |Type       |Description
|Domain \{I,I2,R16} |Refers to State Model.Domain
    |The name of the domain to which the State Specification belongs.
|Class \{I,I2,R16}  |Refers to State Model.Class
    |The name of the class to which the State Specification belongs
|Name   \{I}    |string
    |The name of the state in the state model.
|Number  \{I2}  |numeric
    |Each state is given a unique sequential number within a State Model.
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class StateSpecification {
    attribute Domain string -id 1 -id 2
    attribute Class string -id 1 -id 2
    attribute Name string -id 1
    attribute Number int -id 2

    reference R16 StateModel -link Domain -link Class
}
----

==== R16

(((Relationship,R16)))
[frame="topbot",grid="rows",cols="2>s,4^,1e,2<s"]
|=========
|State Specification |is a life moment of |exactly one   |State Model
|State Model   |has life moments defined by |one or more |State Specification
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R16 StateSpecification 1..*--1 StateModel
----

==== Event Specification

(((Class,Event Specification)))

.Event Specification Attributes
[options="header",cols="3,3,10"]
|=========
|Attribute      |Type       |Description
|Domain \{I,I2,R12} |Refers to State Model.Domain
    |The name of the domain to which the Event Specification belongs.
|Class \{I,I2,R12}  |Refers to State Model.Class
    |The name of the class to which the Event Specification belongs
|Name   \{I}    |string
    |The name of the event in the state model.
|Number  \{I2}  |numeric
    |Each event is given a unique sequential number within a State Model.
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class EventSpecification {
    attribute Domain string -id 1 -id 2
    attribute Class string -id 1 -id 2
    attribute Name string -id 1
    attribute Number int -id 2

    reference R12 StateModel -link Domain -link Class
}
----

==== R12

(((Relationship,R12)))
[frame="topbot",grid="rows",cols="2>s,4^,1e,2<s"]
|=========
|Event Specification |is a simulus for |exactly one   |State Model
|State Model   |responds to |one or more |Event Specification
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R12 EventSpecification 1..*--1 StateModel
----

==== Event Parameter

(((Class,Event Parameter)))

.Event Parameter Attributes
[options="header",cols="3,4,10"]
|=========
|Attribute              |Type       |Description
|Domain \{I,I2,R13}      |Refers to Event{nbsp}Specification.Name
    |The name of the domain to which the parameter applies.
|Class \{I,I2,R13}   |Refers to Event{nbsp}Specification.Class
    |The name of the class to which the parameter applies.
|Event \{I,I2,R13    |Refers to Event{nbsp}Specification.Name.
    |The name of the event to which the parameter applies.
|Name \{I}              |string
    |Each Event Parameter has a name by which it is known.
|Position \{I2}         |ordinal
    |The order of the parameter when the operation is invoked.
|Data Type \{R14}       |Refers to Data{nbsp}Type.Name.
    |The name of the data type of the parameter value.
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class EventParameter {
    attribute Domain string -id 1 -id 2
    attribute Class string -id 1 -id 2
    attribute Event string -id 1 -id 2
    attribute Name string -id 1
    attribute Position int -id 2
    attribute DataType string

    reference R13 EventSpecification -link Domain -link Class -link {Event Name}
    reference R14 DataType -link {DataType Name}
}
----

==== R13

(((Relationship,R13)))
[frame="topbot",grid="rows",cols="4>s,4^,2e,4<s"]
|=========
|Event Parameter |specifies supplemental data for |exactly one
    |Event Specification
|Event Specification|requires supplemental data as |zero or more
    |Event Parameter
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R13 EventParameter 0..*--1 EventSpecification
----

==== R14

(((Relationship,R14)))
[frame="topbot",grid="rows",cols="4>s,4^,2e,4<s"]
|=========
|Event Parameter |has values given by |exactly one     |Data Type
|Data Type |defines the value set for|zero or more |Event Parameter
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R14 EventParameter 0..*--1 DataType
----

=== Data Type Subsystem

image::bosal-datatype-classes.pdf[title="Bosal Data Type Subsytem"]
(((Class Diagram,Data Type Subsystem)))

==== Data Type

(((Class,Data Type)))

.Data Type Attributes
[options="header",cols="2,3,10"]
|=========
|Attribute      |Type       |Description
|Name \{I}      |string
    |Each Data Type has a name by which it is known.
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class DataType {
    attribute Name string -id 1
}
----

[source,tcl]
.Population
----
<<bosal population>>=
class DataType {
    Name        } {
    void
    char {signed char} {unsigned char}
    short {short int} {signed short int}
    {unsigned short} {unsigned short int}
    int {signed int} {unsigned int} {unsigned}
    long {signed long} {unsigned long}
    float double bool
    uint8_t uint16_t uint32_t uint64_t
    int8_t int16_t int32_t int64_t
    uint_least8_t uint_least16_t uint_least32_t uint_least64_t
    int_least8_t int_least16_t int_least32_t int_least64_t
    uint_fast8_t uint_fast16_t uint_fast32_t uint_fast64_t
    int_fast8_t int_fast16_t int_fast32_t int_fast64_t
    uintptr_t intptr_t
    uintmax_t intmax_t
    size_t
    ptrdiff_t
}
----

==== R30

(((Relationship,R30)))
[frame="topbot",grid="rows",cols="4>s,2e,4<s"]
|=========
|Data Type  |is a   |Base Data Type
|           |or an  |Unqualified Data Type
|           |or a   |Structure Data Type
|           |or an  |Array Data Type
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
generalization R30 DataType\
    BaseDataType UnqualifiedDataType StructureDataType ArrayDataType
----

==== Base Data Type

(((Class,Base Data Type)))

.Base Data Type Attributes
[options="header",cols="2,3,10"]
|=========
|Attribute      |Type       |Description
|Name \{I,R30}  |Refers to Data{nbsp}Type.Name
    |The name of the base data type.
|Scan Format    |string
    |A scanf(3) format string that describes how to convert the data type
    on input.
|Print Format    |string
    |A printf(3) format string that describes how to convert the data type
    for output.
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class BaseDataType {
    attribute Name string -id 1
    attribute ScanFormat string
    attribute PrintFormat string

    reference R30 DataType -link Name
}
----

[source,tcl]
.Population
----
<<bosal population>>=
class BaseDataType {
    Name            ScanFormat          PrintFormat} {
    void            {}                  {}
    {signed char}   "%c"                "%c"
    {unsigned char} "%c"                "%c"
    {signed short int} "%hi"               "%hi"
    {unsigned short int} "%hu"               "%hu"
    {signed int}    "%i"                "%i"
    {unsigned int}  "%u"                "%u"
    {signed long}   "%li"                "%li"
    {unsigned long} "%lu"                "%lu"
    float           "%g"                "%g"
    double          "%g"                "%g"
    bool            "%c"                "%c"
    uint8_t         {"%" SCNu8}         {"%" PRIu8}
    uint16_t        {"%" SCNu16}        {"%" PRIu16}
    uint32_t        {"%" SCNu32}        {"%" PRIu32}
    uint64_t        {"%" SCNu64}        {"%" PRIu64}
    int8_t          {"%" SCNi8}         {"%" PRIi8}
    int16_t         {"%" SCNi16}        {"%" PRIi16}
    int32_t         {"%" SCNi32}        {"%" PRIi32}
    int64_t         {"%" SCNi64}        {"%" PRIi64}
    uint_least8_t   {"%" SCNuLEAST8}    {"%" PRIuLEAST8}
    uint_least16_t  {"%" SCNuLEAST16}   {"%" PRIuLEAST16}
    uint_least32_t  {"%" SCNuLEAST32}   {"%" PRIuLEAST32}
    uint_least64_t  {"%" SCNuLEAST64}   {"%" PRIuLEAST64}
    int_least8_t    {"%" SCNiLEAST8}    {"%" PRIiLEAST8}
    int_least16_t   {"%" SCNiLEAST16}   {"%" PRIiLEAST16}
    int_least32_t   {"%" SCNiLEAST32}   {"%" PRIiLEAST32}
    int_least64_t   {"%" SCNiLEAST64}   {"%" PRIiLEAST64}
    uint_fast8_t    {"%" SCNuFAST8}     {"%" PRIuFAST8}
    uint_fast16_t   {"%" SCNuFAST16}    {"%" PRIuFAST16}
    uint_fast32_t   {"%" SCNuFAST32}    {"%" PRIuFAST32}
    uint_fast64_t   {"%" SCNuFAST64}    {"%" PRIuFAST64}
    int_fast8_t     {"%" SCNiFAST8}     {"%" PRIiFAST8}
    int_fast16_t    {"%" SCNiFAST16}    {"%" PRIiFAST16}
    int_fast32_t    {"%" SCNiFAST32}    {"%" PRIiFAST32}
    int_fast64_t    {"%" SCNiFAST64}    {"%" PRIiFAST64}
    uintptr_t       {"%" SCNuPTR}       {"%" PRIuPTR}
    intptr_t        {"%" SCNiPTR}       {"%" PRIiPTR}
    uintmax_t       {"%" SCNuMAX}       {"%" PRIuMAX}
    intmax_t        {"%" SCNiMAX}       {"%" PRIiMAX}
    size_t          "%zu"               "%zu"
    ptrdiff_t       "%ti"               "%ti"
}
----

==== Unqualified Data Type

(((Class,Unqualified Data Type)))

.Unqualified Data Type Attributes
[options="header",cols="2,3,10"]
|=========
|Attribute      |Type       |Description
|Name \{I,R30}  |Refers to Data{&nbsp}Type.Name
    |Each Data Type has a name by which it is known.
|Base Type \{R33}   |Refers to Base Data Type.Name
    |The name of the fully qualified type for which the unqualified
    type is a short hand name.
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class UnqualifiedDataType {
    attribute Name string -id 1
    attribute BaseType string

    reference R30 DataType -link Name
    reference R33 BaseDataType -link {BaseType Name}
}
----

[source,tcl]
.Population
----
<<bosal population>>=
class UnqualifiedDataType {
    Name                BaseType} {
    char                {signed char}
    short               {signed short int}
    {short int}         {signed short int}
    {unsigned short}    {unsigned short int}
    int                 {signed int}
    unsigned            {unsigned int}
    long                {signed long}
}
----

==== R33

(((Relationship,R33)))
[frame="topbot",grid="rows",cols="4>s,5^,2e,4<s"]
|=========
|Unqualified Data Type|is a shorthand for|exactly one     |Base Data Type
|Base Data Type |is the underlying type for|zero or more |Unqualified Data Type
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R33 UnqualifiedDataType 0..*--1 BaseDataType
----

==== Structure Data Type

(((Class,Structure Data Type)))

.Structure Data Type Attributes
[options="header",cols="2,3,10"]
|=========
|Attribute      |Type       |Description
|Name \{I,R30}  |Refers to Data{nbsp}Type.Name
    |The name of the structure data type.
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class StructureDataType {
    attribute Name string -id 1

    reference R30 DataType -link Name
}
----

==== Array Data Type

(((Class,Array Data Type)))

.Array Data Type Attributes
[options="header",cols="3,3,10"]
|=========
|Attribute      |Type       |Description
|Name \{I,R30}  |Refers to Data{nbsp}Type.Name
    |The name of the structure data type.
|Elements       |numeric
    |The number of element in the array type.
|Data Type \{R33}   |Refers to Data{nbsp}Type.Name
    |The data type of the array elements.
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class ArrayDataType {
    attribute Name string -id 1
    attribute Elements int
    attribute DataType string

    reference R30 DataType -link Name
    reference R34 DataType -link {DataType Name}
}
----

==== R34

(((Relationship,R34)))
[frame="topbot",grid="rows",cols="4>s,5^,2e,4<s"]
|=========
|Array Data Type|has elements of    |exactly one     |Data Type
|Data Type |is the data type of the elements of |zero or more |Array Data Type
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R34 ArrayDataType 0..*--1 DataType
----

==== Structure Field

(((Class,Structure Field)))

.Structure Field Attributes
[options="header",cols="4,4,10"]
|=========
|Attribute      |Type       |Description
|Structure \{I,R31}  |Refers to Structure{nbsp}Data{nbsp}Type.Name
    |The name of the structure data type to which the field belongs.
|Name \{I}  |string     |The name of the field.
|Data Type \{R32}   |Refers to Data{nbsp}Type.Name
    |The data type of the field.
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class StructureField {
    attribute Structure string -id 1
    attribute Name string -id 1
    attribute DataType string

    reference R31 StructureDataType -link {Structure Name}
    reference R32 DataType -link {DataType Name}
}
----

==== R31

(((Relationship,R31)))
[frame="topbot",grid="rows",cols="4>s,4^,2e,4<s"]
|=========
|Structure Field |is a member of |exactly one     |Structure Data Type
|Structure Data Type |is composed of |one or more |Structure Field
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R31 StructureField 1..*--1 StructureDataType
----

==== R32

(((Relationship,R32)))
[frame="topbot",grid="rows",cols="4>s,4^,2e,4<s"]
|=========
|Structure Field |is typed according to |exactly one     |Data Type
|Data Type |is the type of |zero or more |Structure Field
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R32 StructureField 0..*--1 DataType
----
