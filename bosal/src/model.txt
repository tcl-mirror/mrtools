// vim:set syntax=asciidoc:

= Bosal Data Model

== Introduction

In this section,
we present the class model underlying the `bosal` test harness.
There are two subsystems:

. The harness subsystem describes the components of a domain as
they relate to the needs of a test harness.
. The data type subsystem describes the supported type system that is
used to marshall and unmarshall data across the communications
interface.

=== Harness Subsystem

The following <<harness-class-diagram,figure>> shows the class diagram
for the harness subsystem.

[[harness-class-diagram,Harness Subsystem Class Diagram]]
image::bosal-harness-classes.pdf[title="Bosal Harness Subsystem"]
(((Class Diagram,Harness Subsystem)))

==== Test Harness

(((Class,Test Harness)))
.Test Harness Attributes
[options="header",cols="2,1,10"]
|=========
|Attribute      |Type       |Description
|Name \{I}      |string
    |Each Test Harness is given a name.
|Initialization |string
    |When a test harness is initialized at start up, the code contained
    in the Initialization attribute is executed.
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class TestHarness {
    attribute Name string -id 1
    attribute Initialization string -default {}
}
----

==== File Directory

(((Class,File Directory)))
.File Directory Attributes
[options="header",cols="2,3,10"]
|=========
|Attribute      |Type       |Description
|Name \{I}      |string
    |A path to a directory in the local file system which is searched
    for micca save files.
|Order \{I2}    |ordinal
    |A number indicating the relative order in which file searches
    are performed. Directoies given my *Name* are searched in
    ascending order of the *Order* attribute.
|Harness \{R2}  |Refers to Test{nbsp}Harness.Name.
    |The name of the Test Harness for which the File Directory is
    searched.
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class FileDirectory {
    attribute Name string -id 1
    attribute Order int -system 0
    attribute Harness string

    reference R2 TestHarness -link {Harness Name}
}
----

==== R2

(((Relationship, R2)))
[frame="topbot",grid="rows",cols="2s,4^,1e,2s"]
|=========
|File Directory |is a file search location for|exactly one|Test Harness
|Test Harness   |searches for files in|one or more|File Directory
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R2 FileDirectory 1..*--1 TestHarness
----

==== Domain

(((Class,Domain)))
.Domain Attributes
[options="header",cols="2,3,10"]
|=========
|Attribute      |Type       |Description
|Name \{I}      |string
    |Each Domain has a name by which it is known.
|Harness \{R1}  |Refers to Test{nbsp}Harness.Name.
    |The name of the Test Harness which will coordinate the execution
    of the Domain.
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class Domain {
    attribute Name string -id 1
    attribute Harness string

    reference R1 TestHarness -link {Harness Name}
}
----

==== R1

(((Relationship,R1)))
[frame="topbot",grid="rows",cols="2s,4^,1e,2s"]
|=========
|Domain         |is coordinated by |exactly one|Test Harness
|Test Harness   |coordinates |one or more|Domain
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R1 Domain 1..*--1 TestHarness
----

==== Domain Operation

(((Class,Domain Operation)))
.Domain Operation Attributes
[options="header",cols="2,3,10"]
|=========
|Attribute      |Type       |Description
|Domain \{I,R3} |Refers to Domain.Name
    |The name of the domain to which the operation applies.
|Name \{I}      |string
    |Each Domain Operation has a name by which it is invoked.
|Return Data Type \{R9} |Refers to Data{nbsp}Type.Name.
    |The name of the data type of the operation return value.
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class DomainOperation {
    attribute Domain string -id 1
    attribute Name string -id 1
    attribute ReturnDataType string

    reference R3 Domain -link {Domain Name}
    reference R9 DataType -link {ReturnDataType Name}
}
----

==== R3

(((Relationship,R3)))
[frame="topbot",grid="rows",cols="2s,4^,1e,2s"]
|=========
|Domain Operation   |operates on    |exactly one    |Domain
|Domain         |is operated on by  |zero or more   |Domain
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R3 DomainOperation 0..*--1 Domain
----

==== R9

(((Relationship,R9)))
[frame="topbot",grid="rows",cols="2s,4^,1e,2s"]
|=========
|Domain Operation   |returns a value of     |exactly one    |Data Type
|Data Type          |is the return type of  |zero or more   |Domain Operation
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R9 DomainOperation 0..*--1 DataType
----

==== Domain Operation Parameter

(((Class,Domain Operation Parameter)))
.Domain Operation Parameter Attributes
[options="header",cols="3,4,10"]
|=========
|Attribute              |Type       |Description
|Domain \{I,I2,R8}      |Refers to Domain{nbsp}Operation.Name
    |The name of the domain to which the parameter applies.
|Operation \{I,I2,R8}   |Refers to Domain{nbsp}Operation.Name
    |The name of the operation to which the parameter applies.
|Name \{I}              |string
    |Each Domain Operation Parameter has a name by which it is known.
|Position \{I2}         |ordinal
    |The order of the parameter when the operation is invoked.
|Data Type \{R10}       |Refers to Data{nbsp}Type.Name.
    |The name of the data type of the parameter value.
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class DomainOperationParameter {
    attribute Domain string -id 1 -id 2
    attribute Operation string -id 1 -id 2
    attribute Name string -id 1
    attribute Position int -id 2
    attribute DataType string

    reference R8 DomainOperation -link Domain -link {Operation Name}
    reference R10 DataType -link {DataType Name}
}
----

==== R8

(((Relationship,R8)))
[frame="topbot",grid="rows",cols="4s,3^,2e,4s"]
|=========
|Domain Operation Parameter |is a parameter of  |exactly one |Domain Operation
|Domain Operation   |is parameterized by|zero or more|Domain Operation Parameter
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R8 DomainOperationParameter 0..*--1 DomainOperation
----

==== R10

(((Relationship,R10)))
[frame="topbot",grid="rows",cols="4s,3^,2e,4s"]
|=========
|Domain Operation Parameter   |is typed according to|exactly one    |Data Type
|Data Type    |is the parameter type of|zero or more|Domain Operation Parameter
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R10 DomainOperationParameter 0..*--1 DataType
----

==== Class

(((Class,Class)))
.Class Attributes
[options="header",cols="3,3,10"]
|=========
|Attribute      |Type       |Description
|Domain \{I,R4} |Refers to Domain.Name
    |The name of the domain to which the Class belongs.
|Name \{I}      |string
    |Each Class has a name by which it is invoked.
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class Class {
    attribute Domain string -id 1
    attribute Name string -id 1

    reference R4 Domain -link {Domain Name}
}
----

==== R4

(((Relationship,R4)))
[frame="topbot",grid="rows",cols="2s,4^,1e,2s"]
|=========
|Class  |represents an entity in    |exactly one    |Domain
|Domain |represents entities by     |one or more    |Class
|=========

[source,tcl]
.Implementation
----
<<bosal configuration>>=
association R4 Class 1..*--1 Domain
----

=== Data Type Subsystem

image::bosal-datatype-classes.pdf[title="Bosal Data Type Subsytem"]
(((Class Diagram,Data Type Subsystem)))

==== Data Type

(((Class,Data Type)))
.Data Type Attributes
[options="header",cols="2,3,10"]
|=========
|Attribute      |Type       |Description
|Name \{I}      |string
    |Each Data Type has a name by which it is known.
|=========
 
[source,tcl]
.Implementation
----
<<bosal configuration>>=
class DataType {
    attribute Name string -id 1
}
----
