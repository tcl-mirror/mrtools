// vim:set syntax=asciidoc:

= Bosal Code Organization

[partintro]
--
In this section we show the organization of the files that can be
tangled from the literate source.
--

== Program Information

=== Copyright Information

This software is copyrighted.
It is licensed in the same manner as Tcl itself.

[source,tcl]
----
<<copyright info>>=
# This software is copyrighted 2017 by G. Andrew Mangogna.
# The following terms apply to all files associated with the software unless
# explicitly disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors and
# need not follow the licensing terms described here, provided that the
# new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
# OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
# THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
# OR MODIFICATIONS.
# 
# GOVERNMENT USE: If you are acquiring this software on behalf of the
# U.S. government, the Government shall have only "Restricted Rights"
# in the software and related documentation as defined in the Federal
# Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
# are acquiring the software on behalf of the Department of Defense,
# the software shall be classified as "Commercial Computer Software"
# and the Government shall have only "Restricted Rights" as defined in
# Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
# the authors grant the U.S. Government and others acting in its behalf
# permission to use and distribute the software in accordance with the
# terms specified in this license.
----

=== Version Information

----
<<version info>>=
Bosal version: 0.1
----

=== Edit Warning

----
<<edit warning>>=
# DO NOT EDIT THIS FILE!
# THIS FILE IS AUTOMATICALLY GENERATED FROM A LITERATE PROGRAM SOURCE FILE.
#
----

== Source Code

We start with some preliminaries.
`Bosal` is implemented in Tcl.
`Bosal` is also a
http://repos.modelrealization.com/cgi-bin/fossil/mrtools[rosea]
based appplication, so, we need the `rosea` package.

[source,tcl]
----
<<required packages>>=
package require rosea
----

We will find it convenient to import some of the commands from
TclRAL since we will be using them repeatedly.

[source,tcl]
----
<<tclral imports>>=
namespace import\
    ::ral::relvar\
    ::ral::relation\
    ::ral::tuple\
    ::ral::relformat\
    ::ralutil::pipe
----

The `::ralutil::pipe` command is used extensively in the code for `bosal`.
This command has nothing to do with relational algebra but rather
is a control structure.
It allows a sequence of operations to be written as a linear ``pipe''
where the result of one command is used as an argument to the next.
It turns out that such sequencing is common in relational algebraic
processing.
The command rewrites a linear sequence of commands into a set of nested
procedure invocations.
It is a classic Tcl control structure type of procedure and makes it
much easier to understand a sequence of operations without having to
tease apart the procedure nesting or introduce superfluous variables.

[source,tcl]
----
<<bosal.tcl>>=
<<edit warning>>
<<copyright info>>

package require Tcl 8.6
package require logger
<<required packages>>

rosea configure {
    domain bosal {
        <<bosal configuration>>
    }
}
rosea generate bosal

rosea populate {
    domain bosal {
        <<bosal population>>
    }
}

namespace eval ::bosal {
    variable version 0.1

    logger::initNamespace [namespace current]

    proc logproc {level txt} {
        if {[string match {-_logger*} $txt]} {
            set txt [lindex $txt end]
        }
        puts "bosal: $level: $txt"
    }
    proc errorlogproc {txt} {
        logproc error $txt
    }
    proc warnlogproc {txt} {
        logproc warn $txt
    }
    log::logproc error [namespace current]::errorlogproc
    log::logproc warn [namespace current]::warnlogproc

    <<tclral imports>>

    <<bosal commands>>
    <<configuration commands namespace>>
    <<generation commands namespace>>
}

package provide bosal $::bosal::version
----

=== Bosal Starpack Application

Tcl applications can be packages as a single file
executable with no external dependencies.
This is known as a ``starpack''.
When `bosal` is packaged as an application in a starpack,
this code is the main entry point.

[source,tcl]
----
<<bosal_main.tcl>>=
<<edit warning>>
<<copyright info>>

set iswrapped [expr {[lindex [file system [info script]] 0] ne "native"}]
if {$iswrapped} {
    set libdir [file join $::starkit::topdir lib]
    set appdir [file join $libdir application]
    set libs [list]
    if {$::tcl_platform(os) eq "Linux"} {
        set libs [glob -nocomplain -directory $libdir P-linux*]
    } elseif {$::tcl_platform(os) eq "Darwin"} {
        set libs [glob -nocomplain -directory $libdir P-macosx*]
    }
    foreach lib $libs {
        lappend ::auto_path $lib
    }
} else {
    set appdir [file dirname [info script]]
}

source [file join $appdir bosal.tcl]
package require bosal
package require cmdline

set cmdOpts {
    {version {Print out version information and exit}}
    {level.arg warn {Logger print level}}
    {nogenerate {Don't generate any output files}}
    {save.arg {} {Save the domain configuration to a file}}
    {savesqlite.arg {} {Save the domain configuration to a SQLite database}}
    {doc {Output a copy of the manual documentation and exit}}
    {expanderror.arg fail {How macro expansion errors are handled}}
    {debug.secret {Turn on debugging output}}
}

set usage "\[options] file1 file2 ...\noptions:\n"
try {
    set options [cmdline::getoptions argv $cmdOpts $usage]
} on error {result} {
    puts stderr $result
    exit 1
}

::bosal::log::setlevel [dict get $options level]

if {[dict get $options version]} {
    chan puts "bosal: version $::bosal::version"
    chan puts {
<<copyright info>>
}
    exit 0
} elseif {[dict get $options doc]} {
    file copy -force [file join $appdir HTML] ./bosaldoc
    exit 0
}

set nerrs 0
foreach file $argv {
    try {
        bosal configureFromFile $file
        bosal::populateFromDomains
    } on error result {
        puts $::errorInfo
        incr nerrs
    }
}
if {$nerrs != 0} {
    exit $nerrs
}

if {[dict get $options save] ne {}} {
    ral serializeToFile [dict get $options save] ::bosal::*
}

if {[dict get $options savesqlite] ne {}} {
    ral storeToSQLite [dict get $options savesqlite] ::bosal::*
}

if {![dict get $options nogenerate]} {
    try {
        set genfiles [bosal generate {*}$options]
    } on error {result} {
        puts stderr $result
        exit 1
    }
}

exit 0
----
