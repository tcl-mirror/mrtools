// vim:set syntax=asciidoc:

== Bosal Program Organization

In this section we show the organization of the files that can be
tangled from the literate source.

=== Source Code [[source-code]]

We start with some preliminaries.
`Bosal` is implemented in Tcl.
Since `Bosal` also uses data generated by the `micca` program,
we need the `micca` package.
Since `micca` is based on `rosea`,
the `rosea` package will also be included, transitively.

(((chunk,required packages)))

[source,tcl]
----
<<required packages>>=
package require micca
package require textutil::adjust
----

(((chunk,bosal.tcl)))

[source,tcl]
----
<<bosal.tcl>>=
<<edit warning>>
<<copyright info>>

package require Tcl 8.6
package require logger
<<required packages>>

namespace eval ::bosal {
    variable version\
    <<version info>>

    logger::initNamespace [namespace current]

    proc logproc {level txt} {
        if {[string match {-_logger*} $txt]} {
            set txt [lindex $txt end]
        }
        puts "bosal: $level: $txt"
    }
    proc errorlogproc {txt} {
        logproc error $txt
    }
    proc warnlogproc {txt} {
        logproc warn $txt
    }
    log::logproc error [namespace current]::errorlogproc
    log::logproc warn [namespace current]::warnlogproc

    <<bosal data>>
    <<bosal commands>>

    namespace export generate
    namespace ensemble create

    namespace eval Helpers {
        namespace path [list\
            ::micca\
            ::rosea::InstCmds\
        ]

        namespace import ::ral::*
        namespace import ::ralutil::*
        namespace import ::micca::@Config@::Helpers::typeCheck

        <<bosal helper data>>
        <<bosal helper commands>>
    }
    namespace eval GenCode {
        namespace path [list\
            ::micca\
            ::rosea::InstCmds\
            [namespace parent]::Helpers\
        ]

        namespace import ::ral::*
        namespace import ::ralutil::*
        namespace import ::micca::@Config@::Helpers::typeCheck

        <<bosal code template commands>>
    }
}

package provide bosal\
<<version info>>
----

==== Bosal Starpack Application

Tcl applications can be packaged as a single file
executable with no external dependencies.
This is known as a ``starpack''.
When `bosal` is packaged as an application in a starpack,
this code is the main entry point.

[source,tcl]
----
<<bosal_main.tcl>>=
<<edit warning>>
<<copyright info>>

set iswrapped [expr {[lindex [file system [info script]] 0] ne "native"}]
if {$iswrapped} {
    set libdir [file join $::starkit::topdir lib]
    set appdir [file join $libdir application]
    set libs [list]
    if {$::tcl_platform(os) eq "Linux"} {
        set libs [glob -nocomplain -directory $libdir P-linux*]
    } elseif {$::tcl_platform(os) eq "Darwin"} {
        set libs [glob -nocomplain -directory $libdir P-macosx*]
    }
    foreach lib $libs {
        lappend ::auto_path $lib
    }
} else {
    set appdir [file dirname [info script]]
}

source [file join $appdir bosal.tcl]
package require bosal
package require cmdline

set cmdOpts {
    {version {Print out version information and exit}}
    {header {Output a copy of the header file, bosal.h and exit}}
    {output.arg {-} {Output file name}}
    {main {Include a minimal main function}}
    {level.arg warn {Logger print level}}
    {nogenerate {Don't generate any output files}}
    {doc {Output a copy of the manual documentation and exit}}
    {expanderror.arg fail {How macro expansion errors are handled}}
}

set usage "\[options] file1 ...\noptions:\n"
try {
    set options [cmdline::getoptions argv $cmdOpts $usage]
} on error {result} {
    puts stderr $result
    exit 1
}

::bosal::log::setlevel [dict get $options level]

if {[dict get $options version]} {
    chan puts "bosal: version $::bosal::version"
    chan puts {
<<copyright info>>
}
    exit 0
} elseif {[dict get $options doc]} {
    file copy -force [file join $appdir HTML] ./bosaldoc
    exit 0
} elseif {[dict get $options header]} {
    set hchan [open bosal.h w]
    try {
        chan puts $hchan $::bosal::headerFile
    } on error {result opts} {
        return -options $opts $result
    } finally {
        chan close $hchan
    }
    exit 0
}

if {[llength $argv] == 0} {
    puts stderr [::cmdline::usage $cmdOpts $usage]
    exit 1
}

set nerrs 0
foreach file $argv {
    try {
        rosea restore ::micca $file
    } on error result {
        puts $::errorInfo
        incr nerrs
    }
}
if {$nerrs != 0} {
    exit $nerrs
}

if {![dict get $options nogenerate]} {
    try {
        set harness [bosal generate $options]
        set outfilename [dict get $options output]
        if {$outfilename eq "-"} {
            chan puts -nonewline $harness
        } else {
            set ochan [open $outfilename w]
            try {
                chan puts -nonewline $ochan $harness
            } on error {result opts} {
                return -options $opts $result
            } finally {
                chan close $ochan
            }
        }
    } on error {result} {
        puts stderr $result
        exit 1
    }
}

exit 0
----

==== Copyright Information

This software is copyrighted.
It is licensed in the same manner as Tcl itself.

[source,tcl]
----
<<copyright info>>=
# This software is copyrighted 2017 - 2018 by G. Andrew Mangogna.
# The following terms apply to all files associated with the software unless
# explicitly disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors and
# need not follow the licensing terms described here, provided that the
# new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
# OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
# THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
# OR MODIFICATIONS.
# 
# GOVERNMENT USE: If you are acquiring this software on behalf of the
# U.S. government, the Government shall have only "Restricted Rights"
# in the software and related documentation as defined in the Federal
# Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
# are acquiring the software on behalf of the Department of Defense,
# the software shall be classified as "Commercial Computer Software"
# and the Government shall have only "Restricted Rights" as defined in
# Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
# the authors grant the U.S. Government and others acting in its behalf
# permission to use and distribute the software in accordance with the
# terms specified in this license.
----

==== Version Information

----
<<version info>>=
"1.2"
----

==== Edit Warning

----
<<edit warning>>=
# DO NOT EDIT THIS FILE!
# THIS FILE IS AUTOMATICALLY GENERATED FROM A LITERATE PROGRAM SOURCE FILE.
#
----
