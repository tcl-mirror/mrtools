// vim:set syntax=asciidoc:

== Data types in bosal

`Bosal` uses a model to categorize ``C'' data types to support
generating code for converting to and from string representations
of the types found in a domain.

image::bosal-datatype-classes.pdf[title="Bosal Data Type Classes"]

[source,tcl]
----
<<bosal datatype classes>>=
class DataType {
    attribute Name string -id 1
    attribute PrintFormat string
}

generalization R30 DataType\
    PointerType ProvidedType EnumeratedType StructureType ArrayType

class PointerType {
    attribute Name string -id 1
    attribute ReferencedType string

    reference R30 DataType -link Name
    reference R36 DataType -link {ReferencedType Name}
}
association R36 PointerType 0..*--1 DataType

class ProvidedType {
    attribute Name string -id 1
    attribute InUse boolean -default false

    reference R30 DataType -link Name
}

class EnumeratedType {
    attribute Name string -id 1

    reference R30 DataType -link Name
}

class StructureType {
    attribute Name string -id 1

    reference R30 DataType -link Name
}

class ArrayType {
    attribute Name string -id 1
    attribute Elements string
    attribute ElementType string

    reference R30 DataType -link Name
    reference R34 DataType -link {ElementType Name}
}
association R34 ArrayType 0..*--1 DataType

class Enumerator {
    attribute Enumeration string -id 1 -id 2
    attribute Name string -id 1
    attribute Order int -id 2
    attribute Value string

    reference R35 EnumeratedType -link {Enumeration Name}
}
association R35 Enumerator 1..*--1 EnumeratedType

class StructureField {
    attribute Structure string -id 1
    attribute Name string -id 1
    attribute FieldType string

    reference R31 StructureType -link {Structure Name}
}
association R31 StructureField 1..*--1 StructureType

generalization R38 ProvidedType\
    DefinedIntegerType BaseType QualifiedType

class DefinedIntegerType {
    attribute Name string -id 1
    attribute Sign string

    reference R38 ProvidedType -link Name
    reference R39 SignQualifier -link {Sign Name}
}
association R39 DefinedIntegerType 0..*--1 SignQualifier

class BaseType {
    attribute Name string -id 1

    reference R38 ProvidedType -link Name
}

generalization R41 BaseType\
        UnqualifyingBase QualifyingBase

class UnqualifyingBase {
    attribute Name string -id 1

    reference R41 BaseType -link Name
}

class QualifyingBase {
    attribute Name string -id 1

    reference R41 BaseType -link Name
}

class QualifiedType {
    attribute Name string -id 1
    attribute BaseType string

    reference R38 ProvidedType -link Name
    reference R33 BaseType -link {BaseType Name}
}
association R33 QualifiedType 0..*--1 BaseType

class TypeQualifier {
    attribute Name string -id 1
}
generalization R40 TypeQualifier\
        SignQualifier SizeQualifier

class SignQualifier {
    attribute Name string -id 1

    reference R40 TypeQualifier -link Name
}

class SizeQualifier {
    attribute Name string -id 1

    reference R40 TypeQualifier -link Name
}

class TypeQualification {
    attribute TypeName string -id 1
    attribute QualifierName string -id 1

    reference R37 QualifiedType -link {TypeName Name}
    reference R37 TypeQualifier -link {QualifierName Name}
}
association R37 QualifiedType 0..*--1..* TypeQualifier\
        -associator TypeQualification
----

[source,tcl]
----
<<bosal datatype population>>=
class DataType {
    Name                PrintFormat         } {
    void                {}
    bool                {"u"}
    char                {"c"}
    int                 {"d"}
    float               {"g"}
    double              {"g"}
    int8_t              PRId8
    int16_t             PRId16
    int32_t             PRId32
    int64_t             PRId64
    int_least8_t        PRIdLEAST8
    int_least16_t       PRIdLEAST16
    int_least32_t       PRIdLEAST32
    int_least64_t       PRIdLEAST64
    int_fast8_t         PRIdFAST8
    int_fast16_t        PRIdFAST16
    int_fast32_t        PRIdFAST32
    int_fast64_t        PRIdFAST64
    uint8_t             PRIu8
    uint16_t            PRIu16
    uint32_t            PRIu32
    uint64_t            PRIu64
    uint_least8_t       PRIuLEAST8
    uint_least16_t      PRIuLEAST16
    uint_least32_t      PRIuLEAST32
    uint_least64_t      PRIuLEAST64
    uint_fast8_t        PRIuFAST8
    uint_fast16_t       PRIuFAST16
    uint_fast32_t       PRIuFAST32
    uint_fast64_t       PRIuFAST64
    intptr_t            PRIdPTR
    uintptr_t           PRIuPTR
    intmax_t            PRIdMAX
    uintmax_t           PRIuMAX
    size_t              {"z"}
    ptrdiff_t           {"t"}
    {signed char}       {"hhd"}
    {char signed}       {"hhd"}
    {unsigned char}     {"hhu"}
    {char unsigned}     {"hhu"}
    short               {"hd"}
    {signed short}      {"hd"}
    {short signed}      {"hd"}
    {unsigned short}    {"hu"}
    {short unsigned}    {"hu"}
    long                {"ld"}
    {signed long}       {"ld"}
    {long signed}       {"ld"}
    {unsigned long}     {"lu"}
    {long unsigned}     {"lu"}
    {long double}       {"Lg"}
    {double long}       {"Lg"}
    MRT_StateCode       {PRId8}
    MRT_EventCode       {PRIu8}
    MRT_DelayTime       {PRIu32}
    MRT_ClassId         {"hu"}
    MRT_InstId          {"hu"}
    MRT_AttrId          {"hu"}
    MRT_AttrSize        {"z"}
    MRT_AssignerId      {"hu"}
}

class ProvidedType {
    Name        } {
    void
    bool
    char
    int
    float
    double
    int8_t
    int16_t
    int32_t
    int64_t
    int_least8_t
    int_least16_t
    int_least32_t
    int_least64_t
    int_fast8_t
    int_fast16_t
    int_fast32_t
    int_fast64_t
    uint8_t
    uint16_t
    uint32_t
    uint64_t
    uint_least8_t
    uint_least16_t
    uint_least32_t
    uint_least64_t
    uint_fast8_t
    uint_fast16_t
    uint_fast32_t
    uint_fast64_t
    intptr_t
    uintptr_t
    intmax_t
    uintmax_t
    size_t
    ptrdiff_t
    {signed char}
    {unsigned char}
    {char signed}
    {char unsigned}
    short
    {signed short}
    {short signed}
    {unsigned short}
    {short unsigned}
    long
    {signed long}
    {long signed}
    {unsigned long}
    {long unsigned}
    {long double}
    {double long}
    MRT_StateCode
    MRT_EventCode
    MRT_DelayTime
    MRT_ClassId
    MRT_InstId
    MRT_AttrId
    MRT_AttrSize
    MRT_AssignerId
}

class DefinedIntegerType {
    Name                Sign        } {
    int8_t              signed
    int16_t             signed
    int32_t             signed
    int64_t             signed
    int_least8_t        signed
    int_least16_t       signed
    int_least32_t       signed
    int_least64_t       signed
    int_fast8_t         signed
    int_fast16_t        signed
    int_fast32_t        signed
    int_fast64_t        signed
    uint8_t             unsigned
    uint16_t            unsigned
    uint32_t            unsigned
    uint64_t            unsigned
    uint_least8_t       unsigned
    uint_least16_t      unsigned
    uint_least32_t      unsigned
    uint_least64_t      unsigned
    uint_fast8_t        unsigned
    uint_fast16_t       unsigned
    uint_fast32_t       unsigned
    uint_fast64_t       unsigned
    intptr_t            signed
    uintptr_t           unsigned
    intmax_t            signed
    uintmax_t           unsigned
    size_t              unsigned
    ptrdiff_t           signed
    MRT_StateCode       signed
    MRT_EventCode       unsigned
    MRT_DelayTime       unsigned
    MRT_ClassId         unsigned
    MRT_InstId          unsigned
    MRT_AttrId          unsigned
    MRT_AttrSize        unsigned
    MRT_AssignerId      unsigned
}

class BaseType {
    Name        } {
    void
    bool
    char
    int
    float
    double
}

class QualifyingBase {
    Name        } {
    char
    int
    double
}

class UnqualifyingBase {
    Name        } {
    void
    bool
    float
}

class TypeQualifier {
    Name        } {
    signed
    unsigned
    long
    short
}

class SignQualifier {
    Name        } {
    signed
    unsigned
}

class SizeQualifier {
    Name        } {
    long
    short
}

class QualifiedType {
    Name                BaseType        } {
    {signed char}       char
    {unsigned char}     char
    {char signed}       char
    {char unsigned}     char
    short               int
    {signed short}      int
    {short signed}      int
    {unsigned short}    int
    {short unsigned}    int
    long                int
    {signed long}       int
    {long signed}       int
    {unsigned long}     int
    {long unsigned}     int
    {long double}       double
    {double long}       double
}

class TypeQualification {
    TypeName            QualifierName   } {
    {signed char}       signed
    {char signed}       signed
    {unsigned char}     unsigned
    {char unsigned}     unsigned
    short               short
    {signed short}      signed
    {signed short}      short
    {short signed}      signed
    {short signed}      short
    {unsigned short}    unsigned
    {unsigned short}    short
    {short unsigned}    unsigned
    {short unsigned}    short
    long                long
    {signed long}       signed
    {signed long}       long
    {long signed}       signed
    {long signed}       long
    {unsigned long}     unsigned
    {unsigned long}     long
    {long unsigned}     unsigned
    {long unsigned}     long
    {long double}       long
    {double long}       long
}
----

[source,tcl]
----
<<bosal datatype commands>>=
::micca::@Config@::Helpers::typeparser create tnparse

proc CharacterizeType {typename} {
}

----
