[vset version 1.2.1]
[manpage_begin mecate n [vset version]]
[comment {
#
#*++
# PROJECT:
#   mecate
#
# MODULE:
#   mecate.man -- manual documentation for the mecate package
#
# ABSTRACT:
#
#*--
#
}]
[moddesc "Mecate Package for Bosal Test Harnesses"]
[titledesc "Interacting with a bosal generated test harness"]
[require Tcl 8.6]
[require mecate [opt [vset version]]]
[description]
This manpage describes the
[package mecate]
package which is a Tcl script extension that simplifies
interactions with a [cmd bosal] generated test harness.

[section Commands]
The main command in the package is a TclOO class command
to create a [method rein] object.
The methods of a [method rean] object provide
access to the test harness.
In addition,
some utility procedures are provided.
The package commands form a [cmd "namespace ensemble"] command.

[list_begin definitions]

[call [cmd "mecate rein create"] [arg reinobj] [arg [opt options]]]
[call [cmd "mecate rein new"] [arg [opt options]]]

The [package mecate] package is organized as a single TclOO class called
[class rein].
The [class rein] class command is also exported as an ensemble command
from the [namespace mecate] namespace.

The constructor for [class rein] takes a set of option / value pairs.
The options are:

[list_begin options]
[opt_def [option -timeout] "<msec timeout>"]
The default time out value for synchronization operations.
If no timeout option is given, the default is 2000 milliseconds.
[list_end]

[call [cmd "mecate eventTraceFormat"] [arg trace]]

The [cmd eventTraceFormat] converts a raw event [arg trace] dictionary
into a a human readable string.
The output is similar to that produced by [method formatEventTraces]
but is intended to format only a single trace.

[call [cmd "mecate instrTraceFormat"] [arg trace]]

The [cmd instrTraceFormat] converts a raw instrumentation [arg trace]
dictionary into a a human readable string.
The output is similar to that produced by [method formatInstrTraces]
but is intended to format only a single trace.

[call [cmd "mecate fatalTraceFormat"] [arg trace]]

The [cmd fatalTraceFormat] converts a raw fatal error [arg trace]
dictionary into a a human readable string.
The output is similar to that produced by [method formatFatalTraces]
but is intended to format only a single trace.


[list_end]

[section "Rein Object Methods"]
This section lists the methods supported by objects of the [class rein]
class.

[subsection "Class Management"]

[list_begin definitions]

[call [arg reinobj] [method "destroy"]]

The destructor for [class rein] objects closes any communications connection
made to the harnessed application.

[call [arg reinobj] [method cget] [arg option]]

The [method cget] method may be used to obtain the values of the options
that were set during construction.
[arg Option] is one of the options described for the constructor.
The method returns the value of the given [arg option].

[call [arg reinobj] [method configure]\
        [arg [opt "opt1 value1 opt2 value2 ..."]]]

The [method configure] method may be used to set the values of the
configuration options.
Option names and values are those described for the constructor.
Returns the empty string.

[list_end]

[subsection "Test Harness Management"]

The methods in this section are used to set up and take down a
test harness program.
It is necessary to start the execution of a test harness before
is can be used.
Sometimes this is accomplished outside of a test script,
for example if the test harness is running under control of a debugger.

When a [cmd bosal] generated test harness starts,
it acts as a server, opening a TCP port on the local host and awaiting
a connection.
To communicate with the test harness program,
it is necessary to establish a TCP client connection to the
test harness acting as a server.
The [class rein] class provides methods to manage these actions directly
from a test script.

[list_begin definitions]

[call [arg reinobj] [method start] [arg program] [arg [opt delay]]]

[list_begin options]
[opt_def [option program] ""]
    The file name of the test harness program executable.

[opt_def [option delay] ""]
    The the number of milliseconds to wait before control is returned to the
    caller.
    This time is used to insure that the harness program has
    had enough time to establish its communication interface before allowing
    the test to proceed.
[list_end]

The [method start] method is used to begin execution of the test harness
program.
Starting is separated out as a method because certain test situations
will have the harness program running under a debugger which will be
responsible for starting program execution.

The return value is the process ID of the harness program, although such
a number is of little use in the Tcl world.
When the test harness communications channel is destroyed,
the harness program itself exits.

[call [arg reinobj] [method connect] [arg [opt port]]]
[list_begin options]

[opt_def [option port] ""]
    The local host port number on which the test harness program
    accepts connection requests.
    By default this is port 3906.
[list_end]

The [method connect]` method forms a communications connection to the test
harness.
All I/O to and from the test harness happens across this connection.
The method returns the empty string and
throws an error if the connection cannot be established.

[call [arg reinobj] [method disconnect]]

The [method disconnect] method closes the communications connection to the test
harness.
This causes the test harness process to exit.

[call [arg reinobj] [method null]]

The [method null] method performs no action on the test domain,
but communicates with it to insure that it is responsive.

[call [arg reinobj] [method version]]

The [method version] method returns the version number of [cmd bosal]
used to create the test harness code.

[list_end]

[subsection "Harness Introspection"]

A [cmd bosal] generated harness has introspection capabilities that
can be used to determine the characteristics of the domains in the
harness.
This information is available using the [method query] method described in
this section.

[list_begin definitions]

[call [arg reinobj] [method query] [arg what] [arg [opt "arg1 arg2 ..."]]]

[list_begin options]
[opt_def [option [arg what]] ""]
    The type of query to be performed. The [arg what] argument may be one of
    the following:

    [list_begin options]

    [opt_def domains ""]
        Returns the names of the domains contained in the test harness.
    [opt_def "operations [arg domain]" ""]
        Returns the names of the domain operations for the given domain.
    [opt_def "doparams [arg domain] [arg operation]" ""]
        Returns the names and data types of the parameters for the
        given domain operation.
    [opt_def "classes [arg domain]" ""]
        Returns the names of the class for the given domain.
    [opt_def "attributes [arg domain] [arg class]" ""]
        Returns the names of the attributes for the given class.
    [opt_def "instances [arg domain] [arg class]" ""]
        Returns the total number of instances and the name and identifiers
        for the pre-existing instances.
    [opt_def "states [arg domain] [arg class]" ""]
        Returns the names of the states for the given class.
    [opt_def "events [arg domain] [arg class]" ""]
        Returns the names of the events for the given class.
    [opt_def "evparams [arg domain] [arg class] [arg event]" ""]
        Returns the parameter names and data types for the given event.
    [opt_def "current [arg domain] [arg class] [arg instance]" ""]
        Returns the current state of the given class instance.

    [list_end]
[list_end]

The [method query] method returns the result of querying various entities
in a test harness.
It is possible to determine the domains in the harness,
the classes of each domain and many other characteristics.

[list_end]

[subsection "Operations on Domains"]

[list_begin definitions]

[call [arg reinobj] [method domainop] [arg operation]\
        [arg [opt "arg1 arg2 ..."]]]

[list_begin options]
[opt_def operation ""]
    The name of the domain operation to invoke.
[opt_def argN ""]
    Arguments to the domain operation. The order of the arguments
    must be the same as that defined for the given domain operation.
[list_end]

The [method domainop] method invokes a domain operation on a domain.

[list_end]

[subsection "Operations on Class Instances"]

[list_begin definitions]

[call [arg reinobj] [method create] [arg domain] [arg class]]

[list_begin options]
[opt_def domain ""]
    The name of the domain containing the class.
[opt_def class ""]
    The name of the class of the instance to be create.
[list_end]

The [method create] method creates an instance of the given class and returns
a integer identifier for the instance.
The identifying number is unique only within the class.

[para]
[emph N.B.]
that the instance is created in an uninitialized state and it is
necessary to follow up with invocation of the [method update] method on the
instance to initialize it attributes.
Also, creating instances can cause problems with referential integrity
which will be detected on the next transaction boundary.
Since there is no way to deal with associations from the test harness
interface,
creating class instances is of limited utility.

[call [arg reinobj] [method delete] [arg domain] [arg class] [arg inst]]

[list_begin options]
[opt_def domain ""]
    The name of the domain containing the instance.
[opt_def class ""]
    The name of the class to which the instance belongs.
[opt_def inst ""]
    The integer identifier of the instance.
    Pre-existing instances may use the instance name for this field.
[list_end]

The [method delete] method deletes the given instance.

[para]
[emph N.B.]
Deleting an instance often causes a referential integrity problem that
my create a fatal error when the next thread of control is finished.
In general,
it is not safe to delete arbitrary instances and there is no mechanism
provide to manipulate relationship instances in the harnessed domains.

[call [arg reinobj] [method read] [arg domain] [arg class] [arg inst]\
        [arg [opt "attr1 attr2 ..."]]]

[list_begin options]
[opt_def domain ""]
    The name of the domain in which the instance is defined.
[opt_def class ""]
    The name of the class to which the instance belongs.
[opt_def inst ""]
    The name or ID number of the class instance to read.
[opt_def attrN ""]
    The names of the attributes whose values are returned.
    If no attribute names are given, then the return value is a list
    of alternating attribute name / attribute value elements
    for all the attributes of the class.
    Otherwise, only the named attribute values are returned as
    name / value elements.
[list_end]

The [method read] method reads the values of attributes from classes in a
domain.

[para]
[emph N.B.]
Not all attributes of an instance may be read.
In particular,
instance data used to implement associations and generalizations
is not available since these values are memory addresses and not meaningful
outside of the domain.

[call [arg reinobj] [method update] [arg domain] [arg class] [arg inst]\
        [arg [opt "attr1 value1 attr2 value2 ..."]]]

[list_begin options]
[opt_def domain ""]
    The name of the domain in which the instance is defined.
[opt_def class ""]
    The name of the class to which the instance belongs.
[opt_def inst ""]
    The name or ID number of the class instance to read.
[opt_def attrN ""]
    The name of the attribute to whose value is to be updated..
[opt_def valueN ""]
    The corresponding value that is to be updated into the attribute.
[list_end]

The [method update] method updates the values of attributes of classes in a
domain.
The attribute names and values are given in pairs as arguments to the
method.
Note that multiple attributes may be updated in a single invocation of the
method.

[list_end]

[subsection "Signaling Events"]

One of the primary ways to cause a domain to react is to signal
events to the class instances.
Both immediate and delayed signaling is supported.

[list_begin definitions]

[call [arg reinobj] [method signal] [arg domain] [arg class] [arg inst]\
        [arg event] [arg [opt "param1 param2 ..."]]]

[list_begin options]
[opt_def domain ""]
    The name of the domain in which the instance is defined.
[opt_def class ""]
    The name of the class to which the instance belongs.
[opt_def inst ""]
    The name or ID number of the class instance to read.
[opt_def event ""]
    The name of the event to signal.
[opt_def paramN ""]
    Parameters of the event. Parameters must be given in the same order
    as defined for the event or state into which the event causes
    a transition.
[list_end]

The [method signal] method signals an event to a class instance.
Signals generated from a test harness are considered to be generated outside
of a state machine context and so start a new thread of control

[call [arg reinobj] [method delaysignal] [arg domain] [arg class] [arg inst]\
        [arg delay] [arg event] [arg [opt "param1 param2 ..."]]]

[list_begin options]
[opt_def domain ""]
    The name of the domain in which the instance is defined.
[opt_def class ""]
    The name of the class to which the instance belongs.
[opt_def inst ""]
    The name or ID number of the class instance to read.
[opt_def delay ""]
    The minimum number of milliseconds that are to elapse before the
    event is signaled.
    A delay value of 0 results in the event being signaled immediately.
[opt_def event ""]
    The name of the event to signal.
[opt_def paramN ""]
    Parameters of the event. Parameters must be given in the same order
    as defined for the event or state into which the event causes
    a transition.
[list_end]

The [method delaysignal] method signals an event to a class instance at some
time in the future.

[call [arg reinobj] [method cancel] [arg domain] [arg class] [arg inst]\
        [arg event]]

[list_begin options]
[opt_def domain ""]
    The name of the domain of the instance whose event is to be canceled.
[opt_def class ""]
    The name of the class of the instance whose event is to be canceled.
[opt_def inst ""]
    The instance identifier or instance name whose event is to be canceled.
[opt_def event ""]
    The name of the event to cancel.
[list_end]

The [method cancel] method requests an delayed signal be canceled.

[call [arg reinobj] [method remaining] [arg domain] [arg class] [arg inst]\
        [arg event]]

[list_begin options]
[opt_def domain ""]
    The name of the domain for the instance whose remaining time is requested.
[opt_def class ""]
    The name of the class of the instance whose remaining time is requested.
[opt_def inst ""]
    The instance identifier or instance name remaining time is requested.
[opt_def event ""]
    The name of the event for which the remaining delay time is requested.
[list_end]

The [method remaining] method returns the number of milliseconds before the
event is to be signaled.
A return value of 0, implies that either the event has already been
signaled ([emph i.e.] its delay time has already expired)
or the delayed event did not exist.

[call [arg reinobj] [method createasync] [arg domain] [arg class] [arg event]\
        [arg [opt "param1 param2 ..."]]]

[list_begin options]
[opt_def domain ""]
    The name of the domain in which the class resides.
[opt_def class ""]
    The name of the class for which an instance is to be created.
[opt_def event ""]
    The name of the creation event to be signaled.
[opt_def paramN ""]
    The event parameters for the creation event.
[list_end]

The [method createasync] method creates a class instance asynchronously by
signaling a creation event.

[list_end]

[subsection "Controlling Execution"]

The test harness generated by [cmd bosal] makes extensive use of the
means provided by the [cmd micca] run-time code to control the event
loop.
The [cmd micca] run-time code allows the dispatch of individual events,
an entire thread of control and exiting the event event loop.
In addition, the test harness installs its own fatal condition handler
to prevent the harness program from exiting if a fatal error condition
arises.

[list_begin definitions]

[call [arg reinobj] [method eloop]\
    [arg [opt "run | halt | once | toc [opt "wait | nowait"]"]]]

With no arguments the [method eloop] method returns the current state of the
event loop, either [cmd running] or [cmd halted].

An additional argument may be given to control the state of the event loop.

[list_begin options]
[opt_def run ""]
    Start running the event loop. Returns [cmd running].
[opt_def halt "" ]
    Halt the dispatching of events. Returns [cmd halted].
[opt_def once ""]
    Dispatch one event from the event loop. Returns [cmd true] if the event
    was dispatched and [cmd false] if no event was awaiting dispatch.
[opt_def "toc [opt "wait | nowait"]" ""]
    Dispatch one thread of control. If [cmd wait] is specified (or if no
    additional option is given), then the event loop will wait until
    a thread of control event arrives.
    If [cmd nowait] is given and if there is no pending thread of control
    event, the command returns immediately.
    Returns [cmd true] if a thread of control was dispatched and
    [cmd false] otherwise.
[list_end]

[list_end]

[subsection "State Machine Traces"]

Test harnesses can output traces showing the chronological sequence
of event dispatch for the state machines.
[cmd Mecate] has methods to accumulate and synchronize to the
event traces.
Internally, [cmd rein] object keep a cache of the state machine traces
as well as accumulate them for later storage.
The cache is used to search and wait for particular events.

[list_begin definitions]

[call [arg reinobj] [method trace] [arg [opt "on | off"]]]

[list_begin options]
[opt_def "on | off" ""]
    Turn tracing either [cmd on] or [cmd off].
    In all cases, the current state of the tracing is returned.
[list_end]

The [method trace] method controls whether state machine dispatch traces
are output from the test harness and accumulated by [package mecate].

[call [arg reinobj] [method waitForEventTrace]\
        [arg [opt "field1 pattern1 field2 pattern2 ..."]]]

[list_begin options]
[opt_def fieldN ""]
    The name of a field of the event trace. Valid field names are:

    [list_begin options]
    [opt_def type ""]
        The type of the transition.
        The value of the type field is either [cmd transition],
        [cmd polymorphic], or [cmd creation].
    [opt_def event ""]
        The name of the event.
    [opt_def source ""]
        The class instance that signaled the event.
    [opt_def target ""]
        The class instance that received the event.
    [opt_def time ""]
        A timestamp of when the event was dispatched.
    [list_end]

[para]
For [cmd transition] type events, the following fields are also available:

    [list_begin options]
    [opt_def currstate ""]
        The name of the state before the event dispatch.
    [opt_def newstate ""]
        The new of the state after the event dispatch.
        If this field is [cmd IG], the event was ignored.
        If this field is [cmd CH], the event caused an error condition.
    [list_end]

[para]
For [cmd polymorphic] type events, the following fields are also available:

    [list_begin options]
    [opt_def relationship ""]
        The name of the generalization relationships across which the
        polymorphic event is inherited.
    [opt_def newevent ""]
        The new name the event has in the context of the next level of the
        generalization.
    [opt_def subclass ""]
        The name of the subclass to which the superclass instance was
        related when the polymorphic event was dispatched.
    [list_end]

[para]
For [cmd creation] type events, there are no additional fields.

[opt_def patternN ""]
    The corresponding pattern to match for the given key.
    Patterns may be of any form accepted by the `string match` command.
[list_end]

The [method waitForEventTrace] method examines the cache of state machine event
traces in chronological order searching for a match to the field / pattern
pairs given.
Any trace that does not match is discarded from the cache.
If necessary, execution of the test is suspended until a state machine
trace matching the given parameters arrives or a timeout occurs.
Matching multiple fields is conjunctive in nature,
[emph i.e.] if multiple fields are given,
then [emph all] fields must match to consider
the event trace to be a match.
[para]
The method returns the matching state machine trace.
If a timeout or fatal error occurs, then the method throw an error.

[call [arg reinobj] [method clearEventTraceCache]]

The [method clearEventTraceCache] method deletes any accumulated state machine
event traces contained in the event trace cache.
All future attempts to match an event trace will operate only against
those traces received after this method was invoked.

[call [arg reinobj] [method formatEventTraces] [arg [opt begin]]\
        [arg [opt finish]]]

[list_begin options]
[opt_def begin ""]
    An optional number giving the starting trace to include in the output.
    If missing, then `begin` is taken as 1, the first trace accumulated.
[opt_def finish ""]
    An optional number giving the last trace to include in the output.
    If missing, then `finish` is taken as the last trace accumulated.
[list_end]

The [method formatEventTraces] method returns a string containing a human
readable print out of the received traces.

[call [arg reinobj] [method discardEventTraces]]

The [method discardEventTraces] method deletes the set of accumulated event
traces.

[call [arg reinobj] [method traceNotify] [arg [opt prefix]]]

[list_begin options]
[opt_def prefix ""]
    A command prefix.
[list_end]

The [method traceNotify] method returns and optionally sets the command prefix
for a command that is executed whenever a state machine trace arrives from a
test harness.
The [arg prefix] argument is optional.
If present, then the argument is interpreted as a command prefix and
will be invoked with an additional argument as: [cmd prefix] [arg trace]
where [arg trace] is a dictionary with the trace information.
The keys to the trace dictionary are the same as the field names
listed in the [method waitForEventTrace] method.
If missing, then no changes are made to the notification command.
In both cases, the current value of the notification command prefix
is returned.
Setting the [arg prefix] to the empty string, disables trace notification.

[call [arg reinobj] [method seqDiag] [arg [opt begin]] [arg [opt finish]]]

[list_begin options]
[opt_def begin ""]
    An optional number giving the starting trace to include in the output.
    If missing, then `begin` is taken as 1, the first trace accumulated.
[opt_def finish ""]
    An optional number giving the last trace to include in the output.
    If missing, then `finish` is taken as the last trace accumulated.
[list_end]

The [method seqDiag] method returns a string consisting of text that can be
given to [cmd plantuml] to create a graphical representation of the
state machine traces as a UML sequence diagram.

[call [arg reinobj] [method seqDiagConfig]\
    [opt [arg "option 1 value1 option2 value2 ..."]]]

[list_begin options]
[opt_def optionN ""]
    An option name used to control details of how sequence diagrams
    are rendered.
    Value options are:
[list_begin options]
    [opt_def -showstates boolean]
        A boolean option which determines if state information is shown
        in the swim langes.
        It set to [option true], the initial states of the instances are
        shown at the top of the swimlane and each new state caused
        by an event transition is shown.
        Also, the non-transitioning states of "IG" and "CH" are shown
        when they occur.
        If set to [option false], then no state information is displayed
        in the swimlanes.
    [opt_def -participants list]
        This option is a list of names of class instances which are
        to be included in the sequence diagram.
        Rather than rendering all the events in the sequence diagram,
        this option provides a way to control which events are shown
        in the diagram.
        Only events that are signaled between participants are shown
        in the diagram.
        Participant names are of the form [option class.instance],
        where [option class] is the name of a class and [option instance]
        is either a named instance of the initial population or
        an instance number for dynamically created instances.
        The special instance, [option BOUNDARY], is used to show
        events signaled from outside a state machine context.
[list_end]
[opt_def valueN ""]
    The value of the corresponding option.
    The type of [option valueN] depends upon the option as described
    previously.
[list_end]

The [method seqDiagConfig] method sets one or more options used to
control the manner in which sequence diagrams are rendered.
The return value of the method is the current configuration
which is a dictionary of option name keys with corresponding option values.

[call [arg reinobj] [method seqDiagToChan] [arg channel]\
        [arg [opt begin]] [arg [opt finish]]]

[list_begin options]
[opt_def channel ""]
    The name of a Tcl I/O channel that is writable.
[opt_def begin ""]
    An optional number giving the starting trace to include in the output.
    If missing, then `begin` is taken as 1, the first trace accumulated.
[opt_def finish ""]
    An optional number giving the last trace to include in the output.
    If missing, then `finish` is taken as the last trace accumulated.
[list_end]

The [method seqDiagToChan] method writes to a Tcl channel a string consisting
of text that can be given to [cmd plantuml] to create a graphical
representation of the state machine traces as a UML sequence diagram.

[call [arg reinobj] [method seqDiagToFile] [arg filename]\
        [arg [opt begin]] [arg [opt finish]]]

[list_begin options]
[opt_def filename ""]
    The name of a file to which the sequence diagram text is to be written.
[opt_def begin ""]
    An optional number giving the starting trace to include in the output.
    If missing, then `begin` is taken as 1, the first trace accumulated.
[opt_def finish ""]
    An optional number giving the last trace to include in the output.
    If missing, then `finish` is taken as the last trace accumulated.
[list_end]

The [method seqDiagToFile] method writes to a file a string consisting of text
that can be given to [cmd plantuml] to create a graphical representation of the
state machine traces as a UML sequence diagram.

[list_end]

[subsection "Instrumentation Traces"]

In addition to event traces,
[cmd micca] domains produce instrumentation traces.
During code generation,
[cmd micca] inserts trace statements into state activities and other functions.
The traces statements are actually "C" pre-processor macros which,
by default, produce instrumentation output of the function name,
the file containing the function, and line number.
This gives a record which functions in the the domain are executed.
In addition, the [cmd MRT_DEBUG] macro,
which has the same interface as [cmd printf()],
is available to activities for generating instrumentation output.

In a test harness,
the instrumentation output is directed to the harness communications
port and the methods in this section define the operations that
can be applied to instrumentation traces.

[list_begin definitions]

[call [arg reinobj] [method instr] [arg [opt "on | off"]]]

[list_begin options]
[opt_def "on | off" ""]
    Turn tracing either [emph on] or [emph off].
    In all cases, the command returns the current state of
    instrumentation tracing.
[list_end]

The [method instr] method controls whether instrumentation traces
are output from the test harness and accumulated.

[call [arg reinobj] [method waitForInstrTrace]\
        [arg [opt "field1 pattern1 field2 pattern2 ..."]]]

[list_begin options]
[opt_def fieldN ""]
    The name of a field of the instrumentation trace. Valid field names are:

    [list_begin options]
    [opt_def time ""]
        A timestamp of when the trace was generated.
    [opt_def message ""]
        The text of the instrumentation trace message.
    [list_end]

[opt_def patternN ""]
    The corresponding pattern to match for the given key.
    Patterns may be of any form accepted by the [cmd "string match"] command.
[list_end]

The [method waitForInstrTrace] method suspends execution until a
instrumentation trace matches the given parameters or a timeout occurs.

[call [arg reinobj] [method clearInstrTraceCache]]

The [method clearInstrTraceCache] method deletes any accumulated
instrumentation traces contained in the instrumentation trace cache.
All future attempts to match an instrumentation trace will operate only against
those traces received after this method was invoked.

[call [arg reinobj] [method formatInstrTraces]\
        [arg [opt begin]] [arg [opt finish]]]

[list_begin options]
[opt_def begin ""]
    An optional number giving the starting trace to include in the output.
    If missing, then `begin` is taken as 1, the first trace accumulated.
[opt_def finish ""]
    An optional number giving the last trace to include in the output.
    If missing, then `finish` is taken as the last trace accumulated.
[list_end]

The [method formatInstrTraces] method returns a string containing a human
readable print out of the received instrumentation traces.

[call [arg reinobj] [method discardInstrTraces]]

The [method discardInstrTraces] method deletes the set of accumulated
instrumentation traces.

[call [arg reinobj] [method instrNotify] [arg [opt prefix]]]

[list_begin options]
[opt_def prefix ""]
    A command prefix.
[list_end]

The [method instrNotify] method returns command prefix for a command that
is executed whenever an instrumentation trace arrives from a test harness.
The [arg prefix] argument is optional.
If present, then the argument is interpreted as a command prefix and
will be invoked with an additional argument as: [cmd prefix] [arg instr]
where [arg instr] is a dictionary with the instrumentation information.
If missing, then no changes are made to the notification command.
In both cases, the current value of the notification command prefix
is returned.
Setting the [arg prefix] to the empty string, disables instrumentation
notification.

[list_end]

[subsection "Fatal Error Traces"]

The [cmd micca] run-time code detects several fatal errors.
By default,
the [cmd micca] run-time invokes the `abort` function from the "C" standard
library.
Most implementations of [method abort] cause the process to terminate and
dump core for debugging.

When running as a test harness,
terminating the process is not desirable.
We would like to be able to examine the state of things after the
fatal error has happened.
So,
[cmd bosal] generates code to install its own fatal error handler and
this handler allows the test harness communication socket to remain open.
The fatal error handle also emits a fatal error message
with the details.
Note that the fatal error messages are sent asynchronously to any
command / response sequence and cannot be tuned off.

[list_begin definitions]

[call [arg reinobj] [method waitForFatalTrace]\
        [arg [opt "field1 pattern1 field2 pattern2 ..."]]]

[list_begin options]
[opt_def fieldN ""]
    The name of a field of the fatal error trace. Valid field names are:

    [list_begin options]
    [opt_def time ""]
        A timestamp of when the trace was generated.
    [opt_def message ""]
        The text of the fatal error trace message.
    [list_end]

[opt_def patternN ""]
    The corresponding pattern to match for the given key.
    Patterns may be of any form accepted by the `string match` command.
[list_end]

The [method waitForFatalTrace] method suspends execution until a fatal error
trace matches the given parameters or a timeout occurs.

[call [arg reinobj] [method clearFatalTraceCache]]

The [method clearFatalTraceCache] method deletes any accumulated fatal error
traces contained in the fatal error trace cache.
All future attempts to match an fatal error trace will operate only against
those traces received after this method was invoked.

[call [arg reinobj] [method formatFatalTraces]\
        [arg [opt begin]] [arg [opt finish]]]

[list_begin options]
[opt_def begin ""]
    An optional number giving the starting trace to include in the output.
    If missing, then `begin` is taken as 1, the first trace accumulated.
[opt_def finish ""]
    An optional number giving the last trace to include in the output.
    If missing, then `finish` is taken as the last trace accumulated.
[list_end]

The [method formatFatalTraces] method returns a string containing a human
readable print out of the received traces.

[call [arg reinobj] [method discardFatalTraces]]

The [method discardFatalTraces] method deletes the set of accumulated fatal
error traces.

[call [arg reinobj] [method fatalNotify] [arg [opt prefix]]]

[list_begin options]
[opt_def prefix ""]
    A command prefix.
[list_end]

The [method fatalNotify] method returns command prefix for a command that
is executed whenever a fatal error trace arrives from a test harness.
The [arg prefix] argument is optional.
If present, then the argument is interpreted as a command prefix and
will be invoked with an additional argument as: [cmd prefix] [arg fatal]
where [arg fatal] is a dictionary with the fatal error information.
If missing, then no changes are made to the notification command.
In both cases, the current value of the notification command prefix
is returned.
Setting the [arg prefix] to the empty string,
disables fatal error notification.

[list_end]

[subsection "Saving Traces"]
Traces received by [cmd mecate] are accumulated and can be saved.
The traces can be serialized to the native format of TclRAL or
can be written to a SQLite database.

[list_begin definitions]
[call [arg reinobj] [method saveTraces] [arg filename]\
        [arg [opt "ral | sqlite"]]]

[list_begin options]
[opt_def filename ""]
    The name of the file to which trace data is stored.
[opt_def "ral | sqlite" ""]
    A string to designate the type of file to which trace data is stored.
    If [cmd ral] is given or the option is missing,
    trace data is stored in the native serialization format of TclRAL.
    If [cmd sqlite] is given,
    then trace data is stored in SQLite database.
[list_end]

The [method saveTraces] method stores any accumulated event, instrumentation
and fatal traces to a file.

[list_end]

[keywords micca bosal]

[manpage_end]
