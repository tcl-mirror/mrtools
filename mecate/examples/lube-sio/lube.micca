# DO NOT EDIT THIS FILE!
# THIS FILE IS GENERATED FROM THE SOURCE OF A LITERATE PROGRAM.
# YOU MUST EDIT THE ORIGINAL SOURCE TO MODIFY THIS FILE.
#*++
# Copyright:
#   Copyright 2016, by the authors of "Models to Code".
#   All rights reserved.
#
# Project:
#   Models to Code Book
#
# Module:
#   Automatic Lubrication System Domain micca file
#*--

domain lube {
    prologue {
        // Any additional implementation includes, etc.
        #include <time.h>
        #include <string.h>
        /*
         * To speed testing along, we will scale the time. When converting from
         * seconds to milliseconds in dealing with delayed events, we will us a
         * factor to allow us to scale real time. By default we will cause things
         * to run 4 times faster than real time.
         */
    #ifdef MRT_INSTRUMENT
    #   ifndef RUNFACTOR
    #       define  RUNFACTOR 4UL
    #   endif /* RUNFACTOR */
    #   define SecsToDelayTime(s)   ((s) * (1000UL / RUNFACTOR))
    #   define DelayTimeToSecs(d)   ((d) / (1000UL / RUNFACTOR))
    #   else
    #   define SecsToDelayTime(s)   ((s) * 1000UL)
    #   define DelayTimeToSecs(d)   ((d) / 1000UL)
    #endif /* MRT_INSTRUMENT */
    }
    typealias LubeCount_t uint32_t
    typealias Seconds_t uint32_t
    typealias Duration_t uint32_t
    typealias MPa_t uint32_t
    typealias Name_t {char[32]}
    typealias ModelName_t {char[32]}
    typealias FluidState_t {enum {
        FS_normal,
        FS_low,
        FS_verylow,
        FS_empty
    }}
    domainop void init {} {
        <%Autocycle_Session foreachInstance acs%>
            <%instance acs signal Created%>
        <%end%>
    }
    domainop void Suspend_Autocycle_Session {sessionId MRT_InstId} {
        <%Autocycle_Session idtoref sessionId session%>
        <%instance session operation Suspend%> ;
    }
    domainop void Injector_max_pressure {injId MRT_InstId} {
        <%Injector idtoref injId inj%> ;
        <%instance inj operation Max_system_pressure%> ;
    }
    domainop void Lock_Machinery {machineId MRT_InstId} {
        <%Machinery idtoref machineId machine%> ;
        <%instance machine operation Lock%> ;
    }
    domainop void Unlock_Machinery {machineId MRT_InstId} {
        <%Machinery idtoref machineId machine%> ;
        <%instance machine operation Unlock%> ;
    }
    eentity UI {
        operation void Deactivated {sessionId MRT_InstId} {
        }
    }
    eentity App {
        operation void Error {Msg {char const *}} {
            fprintf(stderr, "%s\n", Msg) ;
        }
    }
    eentity SIO {
        operation void Inject {injectorId MRT_InstId} {
        }
    
        operation void Stop_injecting {injectorId MRT_InstId} {
        }
    
        operation void Start_monitoring {injectorId MRT_InstId} {
        }
    
        operation void Stop_monitoring {injectorId MRT_InstId} {
        }
    }
    eentity ALARM {
        operation void Set_pressure_error {injectorId MRT_InstId} {
        }
        operation void Set_dissipation_error {injectorId MRT_InstId} {
        }
        operation void Clear_dissipation_error {injectorId MRT_InstId} {
        }
        operation void Set_lube_level_very_low {reservoirId MRT_InstId} {
        }
        operation void Clear_lube_level_very_low {reservoirId MRT_InstId} {
        }
        operation void Set_lube_level_low {reservoirId MRT_InstId} {
        }
        operation void Clear_lube_level_low {reservoirId MRT_InstId} {
        }
        operation void Set_lube_level_empty {reservoirId MRT_InstId} {
        }
        operation void Clear_lube_level_empty {reservoirId MRT_InstId} {
        }
    }
    class Lubrication_Schedule {
        attribute Name Name_t
        attribute Wait_interval Duration_t
        attribute Monitor_interval Duration_t
        attribute Max_low_lube_cycles LubeCount_t
        attribute Default_continuous_operation bool
        attribute Default_max_cycles LubeCount_t
    }
    class Injector_Design {
        attribute Model ModelName_t
        attribute Min_delivery_pressure MPa_t
        attribute Max_system_pressure MPa_t
        attribute Max_dissipation_pressure MPa_t
        attribute Delivery_window Seconds_t
        attribute Good_injection_duration Seconds_t
    }
    class Injector {
        attribute Pressure MPa_t -default 0
        attribute Dissipation_error bool -default false
        attribute Injecting bool -default false
        instop void Max_system_pressure {} {
            MRT_InstId injid = <%my instid%> ;
            <%ALARM Set_pressure_error injectorId injid%> ;
        
            <%my findOneRelated acs {R2 Autocycle_Session}%>
            <%instance acs operation Deactivate%> ;
        }
        statemodel {
            defaulttrans CH
            initialstate SLEEPING
            
            transition Start_injection - Wait_for_inject_pressure -> BUILDING_PRESSURE
            
            transition BUILDING_PRESSURE - Stop -> Quit_low_pressure_injection
            transition BUILDING_PRESSURE - Above_inject_pressure -> INJECTING_AT_PRESSURE
            transition BUILDING_PRESSURE - Below_inject_pressure -> IG
            transition BUILDING_PRESSURE - Above_dissipation_pressure -> IG
            
            transition INJECTING_AT_PRESSURE - Stop -> Cancel_injection
            transition INJECTING_AT_PRESSURE - Good_injection -> Completed_good_injection
            transition INJECTING_AT_PRESSURE - Below_inject_pressure -> Not_enough_pressure
            transition INJECTING_AT_PRESSURE - Above_inject_pressure -> IG
            transition INJECTING_AT_PRESSURE - Above_dissipation_pressure -> IG
            
            transition Not_enough_pressure - Wait_for_inject_pressure -> BUILDING_PRESSURE
            
            transition Cancel_injection - Injection_canceled -> Quit_low_pressure_injection
            
            transition Completed_good_injection - Stopped -> SLEEPING
            
            transition Quit_low_pressure_injection - Stopped -> SLEEPING
            
            transition Clear_error_and_check_interlock - Locked_out -> SLEEPING
            transition Clear_error_and_check_interlock - OK_to_start -> Start_injection
            
            transition SLEEPING - Wakeup -> Initiate_monitoring
            transition SLEEPING - Above_inject_pressure -> IG
            transition SLEEPING - Below_inject_pressure -> IG
            transition SLEEPING - Stop -> IG
            transition SLEEPING - Above_dissipation_pressure -> IG
            
            transition Initiate_monitoring - Monitor -> MONITORING
            
            transition MONITORING - Above_dissipation_pressure -> Set_dissipation_error
            transition MONITORING - Start -> Clear_error_and_check_interlock
            transition MONITORING - Stop -> SLEEPING
            transition MONITORING - Above_inject_pressure -> IG
            transition MONITORING - Below_inject_pressure -> IG
            
            transition Set_dissipation_error - Keep_monitoring -> MONITORING
            state Start_injection {} {
                MRT_InstId injid = <%my instid%> ;
                <%SIO Inject injectorId injid%> ;
                <%my signal Wait_for_inject_pressure%> ;
            }
            state BUILDING_PRESSURE {} {
                <%my findOneRelated inj_design R4%>
                if (<%my attr Pressure%> >
                        <%instance inj_design attr Min_delivery_pressure%>) {
                    <%my signal Above_inject_pressure%> ;
                }
            }
            state INJECTING_AT_PRESSURE {} {
                <%my findOneRelated inj_design R4%>
                MRT_DelayTime injdur = SecsToDelayTime(
                        <%instance inj_design attr Good_injection_duration%>) ;
                <%my delaysignal injdur Good_injection%>
                <%my update Injecting true%>
            }
            state Not_enough_pressure {} {
                <%my canceldelayed Good_injection%> ;
                <%my signal Wait_for_inject_pressure%> ;
            
                <%my findOneRelated res R3%>
                <%instance res signal Low_injection_pressure%>
                <%my update Injecting false%>
            }
            state Cancel_injection {} {
                <%my canceldelayed Good_injection%> ;
                <%my signal Injection_canceled%> ;
                <%my update Injecting false%>
            }
            state Completed_good_injection {} {
                MRT_InstId injid = <%my instid%> ;
                <%SIO Stop_injecting injectorId injid%> ;
            
                <%my findOneRelated acs {R2 Autocycle_Session}%>
                <%instance acs signal Good_injection%>
                <%my signal Stopped%>
                <%my update Injecting false%>
            }
            state Quit_low_pressure_injection {} {
                MRT_InstId injid = <%my instid%> ;
                <%SIO Stop_injecting injectorId injid%> ;
            
                <%my findOneRelated acs {R2 Autocycle_Session}%>
                <%instance acs signal Low_pressure_injection%>
                <%my signal Stopped%>
            }
            state Clear_error_and_check_interlock {} {
                if (!<%my attr Dissipation_error%>) {
                    MRT_InstId injid = <%my instid%> ;
                    <%ALARM Clear_dissipation_error injectorId injid%> ;
                }
                <%my update Dissipation_error false%>
            
                <%my findOneRelated machinery R5%>
                if (<%instance machinery attr Locked_out%>) {
                    <%my signal Locked_out%>
                } else {
                    <%my signal OK_to_start%>
                }
            }
            state SLEEPING {} {
                MRT_InstId injid = <%my instid%> ;
                <%SIO Stop_monitoring injectorId injid%> ;
            }
            state Initiate_monitoring {} {
                MRT_InstId injid = <%my instid%> ;
                <%SIO Start_monitoring injectorId injid%> ;
                <%my signal Monitor%>
            }
            state MONITORING {} {
            }
            state Set_dissipation_error {} {
                if (!<%my attr Dissipation_error%>) {
                    <%my update Dissipation_error true%>
                    MRT_InstId injid = <%my instid%> ;
                    <%ALARM Set_dissipation_error injectorId injid%> ;
                }
                <%my signal Keep_monitoring%> ;
            }
        }
    }
    class Autocycle_Session {
        attribute Cycles_requested LubeCount_t -default 0
        attribute Continuous_operation bool -default false
        attribute Failed_cycles LubeCount_t -default 0
        attribute Cycles_since_activation LubeCount_t -default 0
        attribute Lubricating bool -default false
        attribute Active bool -default false
        attribute Deactivate bool -default false
        attribute Suspend_requested bool -default false
        attribute Wait_time_remaining Seconds_t -default 0
        instop void Deactivate {} {
            <%my update Deactivate true%>
            <%my signal Deactivate%> ;
        }
        instop void Suspend {} {
            <%my update Suspend_requested true%>
            <%my signal Suspend%> ;
        }
        statemodel {
            defaulttrans CH
            initialstate Creating
            
            transition @ - New_session -> Creating
            
            transition Creating - Created -> NOT_ACTIVE
            
            transition NOT_ACTIVE - Activate -> Initialize
            transition NOT_ACTIVE - Change_schedule -> Spawn_new_session
            transition NOT_ACTIVE - Suspend -> IG
            transition NOT_ACTIVE - Resume -> IG
            transition NOT_ACTIVE - Deactivate -> IG
            
            final Spawn_new_session
            
            transition Initialize - Locked_out -> NOT_ACTIVE
            transition Initialize - Activated -> WAIT_INTERVAL
            
            transition WAIT_INTERVAL - Deactivate -> Cancel_wait_interval
            transition WAIT_INTERVAL - Suspend -> WAIT_SUSPENDED
            transition WAIT_INTERVAL - Get_ready_to_lubricate -> MONITOR_INTERVAL
            transition WAIT_INTERVAL - Change_schedule -> IG
            transition WAIT_INTERVAL - Resume -> IG
            transition WAIT_INTERVAL - Activate -> IG
            
            transition Cancel_wait_interval - Wait_interval_canceled -> NOT_ACTIVE
            
            transition WAIT_SUSPENDED - Deactivate -> NOT_ACTIVE
            transition WAIT_SUSPENDED - Resume -> WAIT_INTERVAL
            transition WAIT_SUSPENDED - Change_schedule -> IG
            transition WAIT_SUSPENDED - Suspend -> IG
            transition WAIT_SUSPENDED - Activate -> IG
            
            transition MONITOR_INTERVAL - Lubricate -> LUBE_INTERVAL
            transition MONITOR_INTERVAL - Suspend -> MONITOR_SUSPENDED
            transition MONITOR_INTERVAL - Deactivate -> Cancel_monitor_interval
            transition MONITOR_INTERVAL - Change_schedule -> IG
            transition MONITOR_INTERVAL - Resume -> IG
            transition MONITOR_INTERVAL - Activate -> IG
            
            transition MONITOR_SUSPENDED - Resume -> MONITOR_INTERVAL
            transition MONITOR_SUSPENDED - Deactivate -> NOT_ACTIVE
            transition MONITOR_SUSPENDED - Change_schedule -> IG
            transition MONITOR_SUSPENDED - Suspend -> IG
            transition MONITOR_SUSPENDED - Activate -> IG
            
            transition Cancel_monitor_interval - Monitor_interval_canceled -> NOT_ACTIVE
            
            transition LUBE_INTERVAL - Deactivate -> CANCELING_LUBRICATION
            transition LUBE_INTERVAL - Good_injection -> Normal_lubrication
            transition LUBE_INTERVAL - Lube_interval_ended -> LOW_PRESSURE_LUBRICATION
            transition LUBE_INTERVAL - Change_schedule -> IG
            transition LUBE_INTERVAL - Suspend -> IG
            transition LUBE_INTERVAL - Resume -> IG
            transition LUBE_INTERVAL - Activate -> IG
            
            transition CANCELING_LUBRICATION - Good_injection -> Count_cycle
            transition CANCELING_LUBRICATION - Low_pressure_injection -> Interrupted_cycle_count
            transition CANCELING_LUBRICATION - Change_schedule -> IG
            transition CANCELING_LUBRICATION - Suspend -> IG
            transition CANCELING_LUBRICATION - Resume -> IG
            transition CANCELING_LUBRICATION - Activate -> IG
            transition CANCELING_LUBRICATION - Deactivate -> IG
            
            transition Normal_lubrication - Count_as_normal -> Count_cycle
            
            transition LOW_PRESSURE_LUBRICATION - Low_pressure_injection -> Count_cycle
            transition LOW_PRESSURE_LUBRICATION - Good_injection -> Count_cycle
            transition LOW_PRESSURE_LUBRICATION - Change_schedule -> IG
            transition LOW_PRESSURE_LUBRICATION - Suspend -> IG
            transition LOW_PRESSURE_LUBRICATION - Resume -> IG
            transition LOW_PRESSURE_LUBRICATION - Activate -> IG
            transition LOW_PRESSURE_LUBRICATION - Deactivate -> IG
            
            transition Interrupted_cycle_count - Cycle_interrupted -> Count_cycle
            
            transition Count_cycle - Next_cycle -> WAIT_INTERVAL
            transition Count_cycle - Requested_cycles_complete -> NOT_ACTIVE
            state Creating {schedule {char const *} injector unsigned} {
                <%Lubrication_Schedule findWhere ls {strcmp(ls->Name, schedule) == 0}%>
                assert(ls != NULL) ;
                <%R2 reference self ls%>
                <%Injector idtoref injector inj%>
                <%R2 reference self inj%>
                <%my signal Created%>
            }
            state NOT_ACTIVE {} {
                MRT_InstId session = <%my instid%> ;
                <%UI Deactivated sessionId session%> ;
                <%my findOneRelated ls R2%>
            
                <%my attr Continuous_operation%> =
                        <%instance ls attr Default_continuous_operation%> ;
                <%my attr Cycles_requested%> = <%instance ls attr Default_max_cycles%> ;
                <%my attr Lubricating%> =
                <%my attr Active%> =
                <%my attr Deactivate%> =
                <%my attr Suspend_requested%> = false ;
            }
            state Initialize {continuous bool count LubeCount_t} {
                <%my findOneRelated machinery ~R2 R5%>
                if (<%instance machinery attr Locked_out%>) {
                    <%App Error Msg {"Machinery lockout active"}%> ;
                    <%my signal Locked_out%>
                } else {
                    if (count != 0) {
                        <%my update Cycles_requested count%>
                    }
                    <%my update Continuous_operation continuous%>
                    <%my update Cycles_since_activation 0%>
                    <%my update Failed_cycles 0%>
            
                    <%my findOneRelated ls R2%>
                    <%my attr Wait_time_remaining%> = <%instance ls attr Wait_interval%> ;
                    <%my update Active true%>
                    <%my signal Activated%>
                }
            }
            state WAIT_INTERVAL {} {
                if (<%my attr Deactivate%>) {
                    <%my signal Deactivate%>
                } else {
                    MRT_DelayTime wait_time =
                            SecsToDelayTime(<%my attr Wait_time_remaining%>) ;
                    <%my delaysignal wait_time Get_ready_to_lubricate%>
                    if (<%my attr Suspend_requested%>) {
                        <%my signal Suspend%>
                    }
                }
            }
            state Cancel_wait_interval {} {
                <%my canceldelayed Get_ready_to_lubricate%> ;
                <%my signal Wait_interval_canceled%> ;
            }
            state WAIT_SUSPENDED {} {
                <%my attr Wait_time_remaining%> =
                        DelayTimeToSecs(<%my delayremaining Get_ready_to_lubricate%>) ;
                <%my canceldelayed Get_ready_to_lubricate%>
                <%my update Suspend_requested false%>
            }
            state MONITOR_INTERVAL {} {
                <%my findOneRelated ls R2%>
                MRT_DelayTime monitor =
                        SecsToDelayTime(<%instance ls attr Monitor_interval%>) ;
                <%my delaysignal monitor Lubricate%>
                <%my findOneRelated inj ~R2%>
                <%instance inj signal Wakeup%>
            }
            state Cancel_monitor_interval {} {
                <%my canceldelayed Lubricate%> ;
                <%my findOneRelated inj ~R2%>
                <%instance inj signal Stop%>
                <%my signal Monitor_interval_canceled%>
            }
            state MONITOR_SUSPENDED {} {
                <%my canceldelayed Lubricate%> ;
                <%my findOneRelated inj ~R2%>
                <%instance inj signal Stop%>
            }
            state LUBE_INTERVAL {} {
                <%my findOneRelated inj ~R2%>
                <%instance inj signal Start%>
                <%instance inj findOneRelated inj_design R4%>
                MRT_DelayTime win =
                        SecsToDelayTime(<%instance inj_design attr Delivery_window%>) ;
                <%my delaysignal win Lube_interval_ended%>
                <%my update Lubricating true%>
            }
            state CANCELING_LUBRICATION {} {
                <%my canceldelayed Lube_interval_ended%> ;
                <%my findOneRelated inj ~R2%>
                <%instance inj signal Stop%>
                <%my update Lubricating false%>
            }
            state Normal_lubrication {} {
                <%my canceldelayed Lube_interval_ended%> ;
                <%my signal Count_as_normal%> ;
                <%my update Lubricating false%>
            }
            state LOW_PRESSURE_LUBRICATION {} {
                <%my findOneRelated inj ~R2%>
                <%instance inj signal Stop%>
                <%my attr Failed_cycles%>++ ;
                <%my update Lubricating false%>
            }
            state Count_cycle {} {
                <%my attr Cycles_since_activation%>++ ;
                <%my findOneRelated ls R2%>
                if (<%my attr Failed_cycles%> >= <%instance ls attr Max_low_lube_cycles%>) {
                    <%my findOneRelated res ~R2 R3%>
                    <%instance res signal Too_many_low_lube_cycles%>
                }
                if (<%my attr Continuous_operation%> ||
                        <%my attr Cycles_since_activation%> < <%my attr Cycles_requested%>) {
                    <%my signal Next_cycle%> ;
                } else {
                    <%my signal Requested_cycles_complete%> ;
                    mrt_SyncToEventLoop() ;
                }
            }
            state Interrupted_cycle_count {} {
                <%my attr Failed_cycles%>++ ;
                <%my signal Cycle_interrupted%> ;
            }
            state Spawn_new_session {schedule {char const *}} {
                <%my findOneRelated inj ~R2%>
                MRT_InstId injid = <%instance inj instid%> ;
                <%Lubrication_Schedule findWhere ls {strcmp(ls->Name, schedule) == 0}%>
                assert(ls != NULL) ;
                <%Autocycle_Session createasync New_session {schedule schedule injector injid}\
                    R2 {Lubrication_Schedule ls Injector inj}
                %>
            }
        }
    }
    class Machinery {
        attribute Locked_out bool -default false
        instop void Unlock {} {
            <%my update Locked_out false%>
        }
        instop void Lock {} {
            <%my update Locked_out true%>
            <%my foreachRelated acs ~R5 {R2 Autocycle_Session}%>
                <%instance acs operation Deactivate%> ;
            <%end%>
        }
    }
    class Reservoir {
        attribute Level FluidState_t
        statemodel {
            defaulttrans CH
            initialstate NORMAL
            
            transition NORMAL - Low_lube_level -> LOW
            transition NORMAL - Normal_lube_level -> IG
            transition NORMAL - Low_injection_pressure -> IG
            
            transition LOW - Low_lube_level -> IG
            transition LOW - Normal_lube_level -> NORMAL
            transition LOW - Too_many_low_lube_cycles -> VERY_LOW
            transition LOW - Low_injection_pressure -> IG
            
            transition VERY_LOW - Low_lube_level -> IG
            transition VERY_LOW - Normal_lube_level -> NORMAL
            transition VERY_LOW - Low_injection_pressure -> EMPTY
            
            transition EMPTY - Low_lube_level -> IG
            transition EMPTY - Normal_lube_level -> NORMAL
            transition EMPTY - Low_injection_pressure -> IG
            state NORMAL {} {
                <%my update Level FS_normal%>
            
                <%my foreachRelated acs ~R3 {R2 Autocycle_Session}%>
                    <%instance acs attr Failed_cycles%> = 0 ;
                <%end%>
                MRT_InstId resid = <%my instid%> ;
                <%ALARM Clear_lube_level_very_low reservoirId resid%> ;
                <%ALARM Clear_lube_level_low reservoirId resid%> ;
                <%ALARM Clear_lube_level_empty reservoirId resid%> ;
            }
            state LOW {} {
                <%my update Level FS_low%>
                MRT_InstId resid = <%my instid%> ;
                <%ALARM Set_lube_level_low reservoirId resid%> ;
            }
            state VERY_LOW {} {
                <%my update Level FS_verylow%>
                MRT_InstId resid = <%my instid%> ;
                <%ALARM Set_lube_level_very_low reservoirId resid%> ;
            }
            state EMPTY {} {
                <%my update Level FS_empty%>
                MRT_InstId resid = <%my instid%> ;
                <%ALARM Set_lube_level_empty reservoirId resid%> ;
                <%my foreachRelated acs ~R3 {R2 Autocycle_Session}%>
                    <%instance acs operation Deactivate%> ;
                <%end%>
            }
        }
    }
    association R4 Injector 0..*--1 Injector_Design
    association R5 Injector 1..*--1 Machinery
    association R1 Injector 0..*--1 Lubrication_Schedule
    association R2 -associator Autocycle_Session Injector 0..*--1 Lubrication_Schedule
    association R3 Injector 1..*--1 Reservoir
}

population lube {
    class Lubrication_Schedule {
        table {Name Wait_interval Monitor_interval Max_low_lube_cycles\
                Default_continuous_operation Default_max_cycles}\
        gearbox     {{"Gearbox"}     210   45    8     true  5000}\
        generator   {{"Generator"}   120   25    10    true  10000}\
        shaft       {{"Shaft"}       90    30    10    true  10000}\
        test2       {{"Test2"}       20    15    1     false 200}\
    }
    class Injector_Design {
        table {Model Min_delivery_pressure Max_system_pressure\
            Max_dissipation_pressure Delivery_window Good_injection_duration}\
        ihn4    {{"IHN4"}    19    35    32    90    9}\
        ix77b   {{"IX77B"}   15    26    26    120   11}\
    }
    class Injector {
        table {Pressure Dissipation_error Injecting R1 R3 R4 R5}\
        in1 {20  false   false gearbox   res1    ix77b   m1}\
        in2 {0   false   false shaft     res2    ihn4    m2}\
        in3 {0   true    true  generator res1    ix77b   m3}\
    }
    class Autocycle_Session {
        table {Cycles_requested Continuous_operation Failed_cycles Lubricating\
                Active Deactivate Wait_time_remaining R2}\
        acs1   {0 true 0 false true false 90 {Injector in1 Lubrication_Schedule gearbox}}\
        acs2   {0 true 1 true  true true  0  {Injector in2 Lubrication_Schedule shaft}}\
        acs3   {0 true 0 false true true  0  {Injector in3 Lubrication_Schedule generator}}\
    }
    class Machinery {
        table Locked_out\
        m1      {false}\
        m2      {false}\
        m3      {false}\
    }
    class Reservoir {
        table Level\
        res1    {FS_normal}\
        res2    {FS_low}\
    }
}
