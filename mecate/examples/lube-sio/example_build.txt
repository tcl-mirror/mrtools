1. Obtain a zip archive of the mrtools repository.
    Using a browser or you favorite URL handling download tool, visit the
    URI:

    http://repos.modelrealization.com/cgi-bin/fossil/mrtools/zip/trunk/mrtools.zip

    The resulting download is a zip file of the repository that you
    can unzip into a convenient location.

2. Obtain the executables for micca and bosal from the download pages of
    the mrtools repository:

    http://repos.modelrealization.com/cgi-bin/fossil/mrtools

    The home page has links to downloads for the three major platforms.
    Place the executables somewhere in your execution path.

3. Install Tcl/Tk.

    If working with a reasonable Linux distribution, the Tcl/Tk from the
    distribution repositories is usually quite good. Make sure it is
    at least Tcl version 8.6 or better. Also install "tcllib" and
    the SQLite bindings for Tcl -- these are usually a separate package.

    If distribution repositories are not adequate, then install Tcl/Tk
    from Active State.
    Go to http://www.activestate.com.
    Download and install the "community edition" of ActiveTcl.
    The Active State distribution seems to include sqlite3 bindings.

4. Obtain additional Tcl module files.

    From the mrtools repository home page, follow the links to the "mecate"
    module file and download it.

    Visit the TclRAL repository at:

    http://repos.modelrealization.com/cgi-bin/fossil/tclral

    From the home page navigate to the latest version download page
    (0.12.2) and download both the "multi-platform module for ral"
    and the "script module for ralutil".

    All the module files end in a ".tm" suffix and must be copied to
    a directory in your Tcl module path. The directories in the module
    path can be determined by executing the following sequence:

    $ tclsh
    % ::tcl::tm::path list
    <.... a long list of directory names>
    % exit
    $

    Choose one of the directories in the above list. I recommend one of
    the directories that has "site-tcl" as the last filename component.
    Move all the Tcl module files for mecate, ral, and ralutil into that
    directory.

5.  You will need a "C" compiler and the usual build tools to make an
    executable, e.g. GNU C, binutils, GDB, make, etc.

6.  Unzip the mrtools zip file into a convenient working directory.
    Something like the following:

    $ unzip mrtools.zip
    $ cd mrtools/mecate/examples/lube-sio
    $ make

    The Makefile will sequence running micca to generate the domain code
    for the two domains, bosal to construct a test harness around the
    domains, compiling and linking the harnessed executable and a
    Tcl test script that uses "mecate" to interact with the domains.

7.  A few things to note:
    a.  There is a long pause when the test runs. This is the result of a
        delayed signal in the domains and is expected.
    b.  The last step of the Makefile is to create a pretty HTML page
        of the code coverage using, "lcov". This will need to be install
        if you want the eye candy. It is usually available from
        distibution repositories.
    c.  The script leaves behind a file named, "lube-sio-seq.txt".
        This file can be run through "plantuml" to generate a PNG (by default)
        file with a pretty picture of the as-executed sequence diagram
        that the test cases evoked.
