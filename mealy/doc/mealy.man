[manpage_begin mealy n 1.4]
[comment {
#
#*++
# PROJECT:
#   mrtools
#
# MODULE:
#   mealy.man -- manual documentation for the mealy package
#
# ABSTRACT:
#
#*--
#
}]
[moddesc "Mealy State Machine"]
[titledesc "Mealy State Models and Event Dispatch"]
[require Tcl 8.5]
[require mealy [opt 1.4]]
[description]
This manpage describes the
[package mealy]
package which is a Tcl script extension that allows the
specification and execution of Mealy type state models.
[para]
The Mealy type of state models associates actions with transitions
and executes the action upon exit from a state.
We define a [emph "state model"] to be the invariant definition of
states, events and transitions.
We define a [emph "state machine"] to be an instance of a state model
that has an implicit state variable that holds its current state.
All state machines behave independently of each other
and all state machines that are instances of the same state model
have the same set of states, events and transitions.
[para]
Once a state model is defined and a state machine is created,
the package supplies commands to generate events to state machines.
Events may be delivered asynchronously or synchronously.
Asynchronous event delivery uses an internal queue and insures that
each state action completes before any other transitions are dispatched.
Asynchronous delivery uses the Tcl event loop.
Asynchronous delivery can also be delayed, in effect requesting
the event to be delivered at some time in the future.
Delayed events can also be cancelled and the time remaining for
a delayed event can be obtained.
[para]
Synchronous event delivery causes an immediate dispatch of the event
with the transition and
state action executed like any regular procedure.
Therefore, state actions may not be completed and complicated, cyclic
synchronous event generation can cause undesired results.
However for simple isolated state machines,
synchronous delivery avoids the need to enter the Tcl event loop.

[section COMMANDS]
The package uses an object oriented approach to defining state models
and machines, [emph i.e.] state models and state machines
are represented by commands that have subcommands for operations.
We divide the command descriptions into four sections:
[list_begin enumerated]
[enum]
Commands that define state models and asynchronous event generation.
[enum]
Commands that specify the details of a state model.
[enum]
Commands that instantiate state machines.
[enum]
Commands that provide for synchronous event reception.
[list_end]
The primary commands of the package are provided as an ensemble and
are listed in this section.
See the sections below for the other commands provided.

[list_begin definitions]
[call [cmd "::mealy model"] [arg name] [arg definition]]
The [cmd model] subcommand creates a command for a
state model called [arg name] and records its specification.
The return value is a fully qualified command name.
If [arg name] is not fully qualified,
then the command will be created in the current namespace.
The [arg definition] is evaluated in a context where the
[sectref "MODEL DEFINITION COMMANDS"]
described below are available.
These commands are used to define the states, events and transitions
of the state model.
The returned command is an ensemble command with the subcommands
listed below in the
[sectref "STATE MODEL COMMANDS"]
section.

[call [cmd "::mealy generate"] [arg src] [arg -] [arg event] [arg ->]\
    [arg target] [opt [arg "param1 param2 ..."]]]
The [cmd generate] subcommand arranges for the [arg src] state machine
to deliver [arg event] to the [arg target] state machine.
The [arg -] and [arg ->] arguments are syntactic sugar and are ignored.
The [arg event] must be a defined event of the [arg target] state machine.
When events are generated in a context outside of an executing
state action, [arg src] should be supplied as the empty string.
When the [arg target] state machine transitions to a new state,
the optional [arg paramN] parameters are supplied as arguments to
the transition.
These arguments must match the number of arguments specified by the
event or a run-time error will be generated.

[call [cmd "::mealy delay"] [arg time] [arg src] [arg -] [arg event] [arg ->]\
    [arg target] [opt [arg "param1 param2 ..."]]]
The [cmd delay] subcommand arranges for the [arg src] state machine
to deliver [arg event] to the [arg target] state machine
[arg time] milliseconds in the future.
The [arg -] and [arg ->] arguments are syntactic sugar and are ignored.
There may be only one delayed event outstanding for a given [arg src] /
[arg target] pair with the same [arg event] name.
Any attempt to generate a duplicate delayed event results in the
previous delayed event being silently cancelled and replaced by the later one
at the specified [arg time].
Like most timing in Tcl,
[arg time] represents the minimum number milliseconds that will elapse
before the event is posted for delivery.

[call [cmd "::mealy cancel"] [arg src] [arg -] [arg event] [arg ->]\
    [arg target]]
The [cmd cancel] subcommand cancels the delivery of any event named,
[arg event], that is outstanding between [arg src] and [arg target].
The [arg -] and [arg ->] arguments are syntactic sugar and are ignored.
Typically, the [arg event] is a delayed event generated by the [cmd delay]
command.


[call [cmd "::mealy remaining"] [arg src] [arg -] [arg event] [arg ->]\
    [arg target]]
The [cmd remaining] subcommand returns the number of milliseconds
remaining before [arg event] is delivered from [arg src] to [arg target].
The [arg -] and [arg ->] arguments are syntactic sugar and are ignored.
A return value of zero implies that no such delayed event was found.

[call [cmd "::mealy qwait"] [arg [opt block]]]
The [cmd qwait] subcommand dispatches all the events on the event queue.
The [arg block] argument is a boolean which indicates whether or not
the Tcl event loop is entered.
By default, the event is entered.
If [arg block] is false, then the event queue is dispatched without
entering the event loop.
[list_end]

[section "MODEL DEFINITION COMMANDS"]
The [arg definition] argument to the [cmd "::mealy model"] command
is evaluated as a Tcl script.
That script should invoke the following commands to define
the properties of the state model.
The order of invocation of these commands is arbitrary.

[list_begin definitions]
[call [cmd State] [arg name] [arg definition] [arg [opt final]]]
The [cmd State] command defines a state of the model named, [arg name].
When an event is received by a state machine instance of
this state model and the transition causes [arg name] state to
be exited, then code associated with the transition is executed.
The [arg definition] argument is evaluated as a Tcl script and
in a context where the [sectref "STATE DEFINITION COMMANDS"]
described below are available.
If [arg final] is present it is interpreted as a boolean to indicate
whether or not the state is a final state.
By default and if [arg final] is missing,
then the state is not a final state and the instance continues to
exist after the execution of the action.
If [arg final] is true (in one of the many ways a boolean may be
specified as true),
then the state given by [arg name] is considered to be a final state.
In this case and after [arg body] has been executed, then
the state machine is destroyed automatically.

[call [cmd DefaultTrans] [arg "\[IG | CH]"]]
The state transitions specified by the [cmd Transition] command
form a conceptual transition matrix.
It is allowed to under-specify the matrix, [emph i.e.] the
entire cross product of states and events does not have to be
supplied in Transition command invocations.
Any transition that is [emph not] specified by a [cmd Transition] command
will default to the value given to the [cmd DefaultTrans] command.
If there is no [cmd DefaultTrans] command invocation in a state model
definition, then the default transition is taken to be CH.

[call [cmd InitialState] [arg state]]
When a state machine is created,
it can be optionally be placed in any of its states.
If no initial state is supplied when the state machine is created,
then it will be placed in the [arg state] state.
If the state model definition does not include an invocation of
[cmd InitialState] then the first defined state is taken as the default
initial state.
[list_end]

[section "STATE DEFINITION COMMANDS"]
The [arg definition] argument to the [cmd "State"] command
is evaluated as a Tcl script.
That script should invoke the following command to define
the properties of the transitions from the given state.

[list_begin definitions]
[call [cmd Transition] [arg event] [arg arglist] [arg body] [arg ->]\
        [arg newState]]
The [cmd Transition] command specifies the transition that a state
machine is to make when it is in the enclosing state and it receives the
event named, [arg event].
The machine transitions to [arg newState] and [arg body] is 
a Tcl script to be invoked upon the transition.
The [arg arglist] is specified the same as the [cmd proc] command.
The [arg ->] argument is syntactic sugar and is ignored.
When [arg body] is invoked,
a hidden argument called [cmd self] is defined and its value is
set to the state machine command name for that instance.
Execution of [arg body] during a transition occurs in the namespace
in which the model command is defined.
Receiving [arg event] while in enclosing state causes the state machine
to transition to [arg newState] and to execute the [arg body]
with the formal parameters of [arg arglist] substituted by the actual
arguments given when the event was generated.
The [arg newState] must be a defined state or one of the special
non-transitioning states named [arg IG] or [arg CH].
If [arg newState] is IG, then the event is ignored and no transition
takes place.
If [arg newState] is CH, then the event is deemed logically not to be
able to happen and this is logged as an error.
When the event is generated, the parameter values must be supplied
as given by [arg arglist].
Failure to do so will result in a run-time error.
[para]
Note that no separate command is provided to define event names.
The set of events to which a state model response is gathered from
the mention of those event names in Transition command invocations.


[para]
The following shows an example of a simple two-state state model.
Note that the transition from state [cmd s2] via event [cmd e2] contains a
self directed event generation.
[list_end]

[example {
::mealy model m1 {
    State s1 {
        Transition e1 {a} {
            puts $a
        } -> s2
        Transition e2 {} {} -> IG
    }

    State s2 {
        Transition e2 {a} {
            chan puts $a
            ::mealy generate $self - e2 -> $self $a
        } -> s1
    }
}
}]

[section "STATE MODEL COMMANDS"]
The return value of [cmd "::mealy model"] is an ensemble command that
has the following subcommands.

[list_begin definitions]
[call [arg model] [cmd machine] [arg name] [opt [arg initialState]]]
The [cmd machine] subcommand creates a state machine and
places it in [arg initialState].
If [arg initialState] is missing, then the state machine is
placed in the initial state defined when the state model was specified.
The return value is a fully qualified command name, based on [arg name].
If [arg name] is not fully qualified, then the returned command is
created in the current namespace.
Although the new state machine is placed in [arg initialState],
the action associated with [arg initialState] is [emph not] executed.
[para]
The following example creates a state machine, i1, from state model,
m1, and places i1 initially in state s2.
[example {
m1 machine i1 s2
}]

[call [arg model] [cmd dot] [arg [opt includeCode]]]
The [cmd dot] subcommand returns a string which the representation of
the directed graph of the state model in the syntax of [cmd dot(1)]
(see [uri http://www.graphviz.org/ graphviz] for detail on the
[cmd dot] program).
If [arg includeCode] is missing or given as [emph true],
then the code associated with the transition is included along
the graph edge.
Otherwise, only the name of the event is used to decorate the graph edge.

[call [arg model] [cmd dotfile] [arg filename] [arg [opt includeCode]]]
The [cmd dotfile] subcommand invokes the [cmd dot] subcommand and
places the result into the file given by, [arg filename].
If [arg includeCode] is missing or given as [emph true],
then the code associated with the transition is included along
the graph edge.
Otherwise, only the name of the event is used to decorate the graph edge.

[call [arg model] [cmd draw] [arg [opt dotargs]]]
The [cmd draw] subcommand invokes the [cmd dot] subcommand handing the
output to [cmd dot(1)] to render the state model graph in PostScript.
Additional arguments to [cmd dot(1)] may be present.
By default [arg dotargs] is set to [emph -Gsize=7.5,10] to produce
a letter sized, portrait layout of the graph.

[call [arg model] [cmd destroy]]
The [cmd destroy] subcommand deletes the state model and cleans up
the internal resources used.
[emph N.B.] deleting a state model by necessity also deletes all
the state machine instances of that state model.
Destroying a state model is rarely used.

[list_end]

[section "STATE MACHINE COMMANDS"]
The return value of invoking a [arg model] [cmd machine] command
is a state machine command ensemble that has the following subcomands.

[list_begin definitions]
[call [arg machine] [cmd receive] [arg event] [opt [arg "param1 param2 ..."]]]
The [cmd receive] command performs a synchronous reception of
[arg event], transitioning the machine and executing the state action
of the new state with the values given by the [arg paramN] arguments.
This command may be invoked to accomplish the synchronous delivery
of [arg event] with it parameters and is the same command executed
internally when asynchronously delivered events are dispatched.

[call [arg machine] [cmd force] [arg state] [opt [arg "param1 param2 ..."]]]
The [cmd force] command forces a transition from the current state
to the state given by [arg state].
Optional [arg paramN] parameters must be given to match the signature
of [arg state].
This command is sometimes useful for error or reset processing.

[call [arg machine] [cmd configure] [arg [opt option]]\
        [arg [opt "value option value"]]]
The [cmd configure] command queries and modifies state machine options.
Each state machine implicitly has a dictionary of options that may
set set or queried.
If no [arg option] arguments are present,
then the command returns a list of the available option keys.
If a single [arg option] argument is present,
then the command returns a dictionary consisting of the single key and
its corresponding value.
If one or more [arg "option value"] pairs are present,
then the machine's option dictionary is set according the options and
values supplied.
In this case the command returns the empty string.

[call [arg machine] [cmd cget] [arg option]]
The [cmd cget] command returns the value that corresponds to [arg option]
from the machine's option dictionary.

[call [arg machine] [cmd destroy]]
The [cmd destroy] subcommand deletes the instance of the state machine
returning any resources in use.
[list_end]

[section "TRANSITION TRACING"]
The [package mealy] package uses [cmd ::logger::initNamespace] to
provide logging facilities.
To trace the event dispatch and transition information for a particular
state machine it is necessary to set the [arg trace] option on the
machine to [arg true] (via the [cmd configure] subcommand)
and to set set the logging level to [emph info].
Any errors encountered in asynchronous event dispatch are reported
at the [emph error] logging level.

[keywords Mealy States]

[manpage_end]
