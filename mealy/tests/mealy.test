#!/usr/bin/env tclsh
# This software is copyrighted 2010 - 2012 by G. Andrew Mangogna.
# The following terms apply to all files associated with the software unless
# explicitly disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors and
# need not follow the licensing terms described here, provided that the
# new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
# OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
# THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
# OR MODIFICATIONS.
# 
# GOVERNMENT USE: If you are acquiring this software on behalf of the
# U.S. government, the Government shall have only "Restricted Rights"
# in the software and related documentation as defined in the Federal
# Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
# are acquiring the software on behalf of the Department of Defense,
# the software shall be classified as "Commercial Computer Software"
# and the Government shall have only "Restricted Rights" as defined in
# Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
# the authors grant the U.S. Government and others acting in its behalf
# permission to use and distribute the software in accordance with the
# terms specified in this license.
#
#*++
# PROJECT:
#   mrtools
#
# MODULE:
#   mealy.test -- unit test for mealy package
#
# ABSTRACT:
#
#*--
#

package require Tcl 8.5
package require cmdline

source ../src/mealy.tcl

puts "testing mealy package: [package require mealy]"

set optlist {
    {level.arg warn {Log debug level}}
}
array set options [::cmdline::getKnownOptions argv $optlist]
::mealy::log::setlevel $options(level)

package require tcltest
eval tcltest::configure $argv

namespace eval ::mealy::test {
    namespace import ::tcltest::*
    namespace import ::ral::*
    namespace import ::ralutil::*

    test model-1.0 {
        build simple model
    } -setup {
    } -cleanup {
    } -body {
        mealy model simple {
            State s1 {
                Transition e1 {} {
                    puts "s1 - e1 -> s2"
                } -> s2
            }
            State s2 {}
        }
        relation cardinality $::mealy::StateModel
    } -result {1}

    test initialstate-1.0 {
        check the initial state of simple
    } -setup {
    } -cleanup {
    } -body {
        pipe {
            relvar set ::mealy::StateModel |
            relation restrictwith ~ {[string match *simple $ModelName]} |
            relation extract ~ InitialState
        }
    } -result {s1}

    test model-2.0 {
        state model error -- transition has non-existant state
    } -setup {
    } -cleanup {
    } -body {
        mealy model err1 {
            State s1 {
                Transition e1 {} {
                    puts s1
                } -> s2
            }
        }
    } -result {for association ::mealy::R3(::mealy::Transition [*] ==> [1] ::mealy::State), in relvar ::mealy::Transition
tuple {ModelName ::mealy::test::err1 CurrState s1 EventName e1 NewState s2 ActionBody {self {
                    puts s1
                } ::mealy::test}} references no tuple
} -returnCodes error

    test machine-1.0 {
        generate a state machine
    } -setup {
        simple machine s1
    } -cleanup {
        s1 destroy
    } -body {
        relation cardinality $::mealy::StateMachine
    } -result {1}

    test transition-1.0 {
        transition a state machine
    } -setup {
        simple machine s2
    } -cleanup {
        s2 destroy
    } -body {
        s2 receive e1
        pipe {
            relvar set ::mealy::StateMachine |
            relation restrictwith ~ {[string match *s2 $MachineId]} |
            relation extract ~ CurrState
        }
    } -output {s1 - e1 -> s2
} -result {s2}

    test transition-2.0 {
        events with parameters
    } -setup {
        mealy model reflex {
            State s2 {
                Transition e2 {a} {
                    puts "$self $a"
                } -> s1
                Transition e1 {a b} {
                    puts "$self $a $b"
                } -> s2
            }
            State s1 {
                Transition e1 {a b} {
                    puts "$self $a $b"
                } -> s2
            }
            InitialState s1
        }
        reflex machine r1
    } -cleanup {
        r1 destroy
    } -body {
        r1 receive e1 foo bar
        pipe {
            relvar set ::mealy::StateMachine |
            relation restrictwith ~ {[string match *r1 $MachineId]} |
            relation extract ~ CurrState
        }
    } -output {::mealy::test::r1 foo bar
} -result {s2}

    test initialstate-2.0 {
        check the initial state of reflex
    } -setup {
    } -cleanup {
    } -body {
        pipe {
            relvar set ::mealy::StateModel |
            relation restrictwith ~ {[string match *reflex $ModelName]} |
            relation extract ~ InitialState
        }
    } -result {s1}

    test transition-3.0 {
        reflexive transition
    } -setup {
        reflex machine r1
    } -cleanup {
        r1 destroy
    } -body {
        r1 receive e1 foo bar
        r1 receive e1 baz junk
        pipe {
            relvar set ::mealy::StateMachine |
            relation restrictwith ~ {[string match *r1 $MachineId]} |
            relation extract ~ CurrState
        }
    } -output {::mealy::test::r1 foo bar
::mealy::test::r1 baz junk
} -result {s2}

    test ignored-1.0 {
        ignored transition
    } -setup {
        mealy model m2 {
            State s1 {
                Transition e2 {} {
                    puts "$self s2"
                } -> s2
                Transition e3 {} {
                    puts "$self s3"
                } -> s3
            }
            State s2 {
                Transition e2 {} {} -> IG
                Transition e3 {} {} -> CH
            }
            State s3 {
                Transition e2 {} {
                    puts "$self s2"
                } -> s2
                Transition e1 {} {
                    puts "$self s1"
                } -> s1
            }
        }
        m2 machine i2
    } -cleanup {
        i2 destroy
    } -body {
        i2 receive e2
        i2 receive e2
        pipe {
            relvar set ::mealy::StateMachine |
            relation restrictwith ~ {[string match *i2 $MachineId]} |
            relation extract ~ CurrState
        }
    } -output {::mealy::test::i2 s2
} -result {s2}

    test event-1.0 {
        bad event name
    } -setup {
        m2 machine i2
    } -cleanup {
        i2 destroy
    } -body {
        i2 receive e4
    } -result {unknown event, "e4"} -returnCodes error

    test canthappen-1.0 {
        can't happen transition
    } -setup {
        m2 machine i2
    } -cleanup {
        i2 destroy
    } -body {
        i2 receive e2
        i2 receive e3
        pipe {
            relvar set ::mealy::StateMachine |
            relation restrictwith ~ {[string match *i2 $MachineId]} |
            relation extract ~ CurrState
        }
    } -output {::mealy::test::i2 s2
} -result {can't happen transition: Transition: ::mealy::test::i2 - s2 -> CH} -returnCodes error

    test isolated-1.0 {
        detect state models with isolated states
    } -setup {
    } -cleanup {
    } -body {
        mealy model m3 {
            State s1 {
                Transition e2 {} {
                    puts "$self s2"
                } -> s2
            }

            State s2 {
                Transition e2 {} {} -> IG
                Transition e3 {} {} -> CH
            }
            State s3 {}
        }
    } -result {isolated states: s3} -returnCodes error

    test generate-1.0 {
        generate events for async dispatch
    } -setup {
        m2 machine i3
    } -cleanup {
        i3 destroy
    } -body {
        mealy generate {} - e3 -> i3
        mealy qwait
        pipe {
            relvar set ::mealy::StateMachine |
            relation restrictwith ~ {[string match *i3 $MachineId]} |
            relation extract ~ CurrState
        }
    } -result {s3} -output {::mealy::test::i3 s3
}

    test generate-2.0 {
        generate multiple events for async dispatch
    } -setup {
        m2 machine i3
    } -cleanup {
        i3 destroy
    } -body {
        mealy generate {} - e3 -> i3
        mealy generate {} - e2 -> i3
        mealy qwait
        pipe {
            relvar set ::mealy::StateMachine |
            relation restrictwith ~ {[string match *i3 $MachineId]} |
            relation extract ~ CurrState
        }
    } -result {s2} -output {::mealy::test::i3 s3
::mealy::test::i3 s2
}

    test generate-3.0 {
        async dispatch of self-directed events
    } -setup {
        mealy model m4 {
            State s1 {
                Transition e1 {b} {
                    puts "s2: $b"
                    mealy generate $self - e2 -> $self $b
                } -> s2
            }
            State s2 {
                Transition e2 {a} {
                    puts "s1: $a"
                } -> s1
            }
        }
        m4 machine i4
    } -cleanup {
        i4 destroy
    } -body {
        mealy generate {} - e1 -> i4 foo
        mealy qwait
        pipe {
            relvar set ::mealy::StateMachine |
            relation restrictwith ~ {[string match *i4 $MachineId]} |
            relation extract ~ CurrState
        }
    } -result {s1} -output {s2: foo
s1: foo
}

    test generate-4.0 {
        self-directed events take precedence
    } -setup {
        m4 machine i4
    } -cleanup {
        i4 destroy
    } -body {
        mealy generate {} - e1 -> i4 foo
        mealy generate {} - e1 -> i4 bar
        mealy qwait
        pipe {
            relvar set ::mealy::StateMachine |
            relation restrictwith ~ {[string match *i4 $MachineId]} |
            relation extract ~ CurrState
        }
    } -result {s1} -output {s2: foo
s1: foo
s2: bar
s1: bar
}

    test delayed-1.0 {
        post a delayed event
    } -setup {
        m2 machine i2
    } -cleanup {
        i2 destroy
    } -body {
        mealy delay 100 {} - e2 -> i2
        after 300 set ::sync 1
        vwait ::sync
        pipe {
            relvar set ::mealy::StateMachine |
            relation restrictwith ~ {[string match *i2 $MachineId]} |
            relation extract ~ CurrState
        }
    } -output {::mealy::test::i2 s2
} -result {s2}

    test delayed-2.0 {
        delayed events delivered in order
    } -setup {
        m2 machine i2
    } -cleanup {
        i2 destroy
    } -body {
        mealy delay 200 {} - e2 -> i2
        mealy delay 100 {} - e3 -> i2
        after 300 set ::sync 1
        vwait ::sync
        pipe {
            relvar set ::mealy::StateMachine |
            relation restrictwith ~ {[string match *i2 $MachineId]} |
            relation extract ~ CurrState
        }
    } -output {::mealy::test::i2 s3
::mealy::test::i2 s2
} -result {s2}

    test delayed-3.0 {
        duplicate delayed events -- last one delivered
    } -setup {
        m4 machine i4
    } -cleanup {
        i4 destroy
    } -body {
        mealy delay 100 {} - e1 -> i4 foo
        mealy delay 100 {} - e1 -> i4 bar
        after 300 set ::sync 1
        vwait ::sync
        pipe {
            relvar set ::mealy::StateMachine |
            relation restrictwith ~ {[string match *i4 $MachineId]} |
            relation extract ~ CurrState
        }
    } -result {s1} -output {s2: bar
s1: bar
}

    test cancel-1.0 {
        cancel a delayed event before it expires
    } -setup {
        m2 machine i2
    } -cleanup {
        i2 destroy
    } -body {
        mealy delay 300 {} - e2 -> i2
        after 100 [list mealy cancel {} - e2 -> [namespace current]::i2]

        after 300 set ::sync 1
        vwait ::sync
        pipe {
            relvar set ::mealy::StateMachine |
            relation restrictwith ~ {[string match *i2 $MachineId]} |
            relation extract ~ CurrState
        }
    } -result {s1}

    test cancel-2.0 {
        cancel a delayed event after it expires
    } -setup {
        m2 machine i2
    } -cleanup {
        i2 destroy
    } -body {
        mealy delay 100 {} - e2 -> i2
        after 200 [list mealy cancel {} - e2 -> [namespace current]::i2]

        after 300 set ::sync 1
        vwait ::sync
        pipe {
            relvar set ::mealy::StateMachine |
            relation restrictwith ~ {[string match *i2 $MachineId]} |
            relation extract ~ CurrState
        }
    } -result {s2} -output {::mealy::test::i2 s2
}

    test cancel-3.0 {
        cancel first delayed event
    } -setup {
        m2 machine i2
    } -cleanup {
        i2 destroy
    } -body {
        mealy delay 100 {} - e1 -> i2
        mealy delay 200 {} - e2 -> i2
        after 50 [list mealy cancel {} - e1 -> [namespace current]::i2]

        after 300 set ::sync 1
        vwait ::sync
        pipe {
            relvar set ::mealy::StateMachine |
            relation restrictwith ~ {[string match *i2 $MachineId]} |
            relation extract ~ CurrState
        }
    } -result {s2} -output {::mealy::test::i2 s2
}

    test remaining-1.0 {
        remaining time of a delayed event
    } -setup {
        m2 machine i2
    } -cleanup {
        i2 destroy
    } -body {
        mealy delay 300 {} - e2 -> i2
        after 100
        set remain [mealy remaining {} - e2 -> i2]

        after 300 set ::sync 1
        vwait ::sync
        expr {$remain <= 200}
    } -result {1} -output {::mealy::test::i2 s2
}


if 0 {
    # This is just a template for additional tests.

    test X-1.0 {
    } -setup {
    } -cleanup {
    } -body {
    } -result {}
}

    cleanupTests
}

namespace delete ::mealy::test
