#!/usr/bin/env tclsh
# This software is copyrighted 2013 by G. Andrew Mangogna.
# The following terms apply to all files associated with the software unless
# explicitly disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors and
# need not follow the licensing terms described here, provided that the
# new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
# OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
# THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
# OR MODIFICATIONS.
# 
# GOVERNMENT USE: If you are acquiring this software on behalf of the
# U.S. government, the Government shall have only "Restricted Rights"
# in the software and related documentation as defined in the Federal
# Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
# are acquiring the software on behalf of the Department of Defense,
# the software shall be classified as "Commercial Computer Software"
# and the Government shall have only "Restricted Rights" as defined in
# Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
# the authors grant the U.S. Government and others acting in its behalf
# permission to use and distribute the software in accordance with the
# terms specified in this license.
#
#*++
# PROJECT:
#  mrtools
#
# MODULE:
#  dwarfdecode.test -- unit tests for dwarfdecode package
#
# ABSTRACT:
#
#*--
#

package require Tcl 8.6
package require cmdline
package require logger

source ../../elfdecode/src/elfdecode.tcl
chan puts "using elfdecode version: [package require elfdecode]"

source ../src/dwarfdecode.tcl
package require dwarfdecode
chan puts "testing dwarfdecode version: [package require dwarfdecode]"

# Add custom arguments here.
set optlist {
    {level.arg warn {Log debug level}}
    {file.arg {} {Elf file name}}
}
array set options [::cmdline::getKnownOptions argv $optlist]

::dwarfdecode::log::setlevel $options(level)
#::logger::setlevel $options(level)

package require tcltest
eval tcltest::configure $argv

namespace eval ::dwarfdecode::test {
    ::logger::initNamespace [namespace current] $options(level)

    namespace import ::tcltest::*

    elfdecode elffile create ef1
    ef1 readFile $options(file)

    test InfoStream-where-1.0 {
        Determine current location
    } -setup {
        set is [dwarfdecode::InfoStream new "\0"]
    } -cleanup {
        $is destroy
    } -body {
        $is where
    } -result {0}
    test InfoStream-remain-1.0 {
        Find remaining number of bytes
    } -setup {
        set is [dwarfdecode::InfoStream new "\x1\x2"]
    } -cleanup {
        $is destroy
    } -body {
        $is remain
    } -result {2}
    test InfoStream-seek-1.0 {
        Seek into data
    } -setup {
        set is [dwarfdecode::InfoStream new "\x1\x2"]
    } -cleanup {
        $is destroy
    } -body {
        $is seek 1
        $is where
    } -result {1}
    test InfoStream-seek-2.0 {
        Seek past end of data
    } -setup {
        set is [dwarfdecode::InfoStream new "\x1\x2"]
    } -cleanup {
        $is destroy
    } -body {
        $is seek 3
    } -result {attempt to seek past end of information} -returnCodes error
    test InfoStream-convert-1.0 {
        Convert an unsigned 4-byte little-endian integer
    } -setup {
        set is [dwarfdecode::InfoStream new "\x01\x02\x00\x00"]
    } -cleanup {
        $is destroy
    } -body {
        $is convert 4 iu value
        return [format %#x $value]
    } -result {0x201}
    test InfoStream-extractNULTermString-1.0 {
        Extract a "C" style string
    } -setup {
        set is [dwarfdecode::InfoStream new "Abc\0Def"]
    } -cleanup {
        $is destroy
    } -body {
        $is extractNULTermString
    } -result {Abc}
    test InfoStream-unsignedLEB128-1.0 {
        Decode 0 as unsigned LEB128
    } -setup {
        set is [dwarfdecode::InfoStream new "\0"]
    } -cleanup {
        $is destroy
    } -body {
        $is unsignedLEB128
    } -result {0}
    test InfoStream-unsignedLEB128-2.0 {
        Decode 1 byte non-zero unsigned LEB128
    } -setup {
        set is [dwarfdecode::InfoStream new "\x7f"]
    } -cleanup {
        $is destroy
    } -body {
        $is unsignedLEB128
    } -result {127}
    test InfoStream-unsignedLEB128-3.0 {
        Decode 2 byte unsigned LEB128
    } -setup {
        set is [dwarfdecode::InfoStream new "\x80\x01"]
    } -cleanup {
        $is destroy
    } -body {
        $is unsignedLEB128
    } -result {128}
    test InfoStream-signedLEB128-1.0 {
        Decode 0 as signed LEB128
    } -setup {
        set is [dwarfdecode::InfoStream new "\0"]
    } -cleanup {
        $is destroy
    } -body {
        $is signedLEB128
    } -result {0}
    test InfoStream-signedLEB128-2.0 {
        Decode 1 byte positive integer as signed LEB128
    } -setup {
        set is [dwarfdecode::InfoStream new "\2"]
    } -cleanup {
        $is destroy
    } -body {
        $is signedLEB128
    } -result {2}
    test InfoStream-signedLEB128-3.0 {
        Decode 1 byte negative integer as signed LEB128
    } -setup {
        set is [dwarfdecode::InfoStream new "\x7e"]
    } -cleanup {
        $is destroy
    } -body {
        $is signedLEB128
    } -result {-2}
    test InfoStream-signedLEB128-4.0 {
        Decode 2 byte positive integer as signed LEB128
    } -setup {
        set is [dwarfdecode::InfoStream new "\xff\x00"]
    } -cleanup {
        $is destroy
    } -body {
        $is signedLEB128
    } -result {127}
    test InfoStream-signedLEB128-4.1 {
        Decode 2 byte positive integer as signed LEB128
    } -setup {
        set is [dwarfdecode::InfoStream new "\x80\x01"]
    } -cleanup {
        $is destroy
    } -body {
        $is signedLEB128
    } -result {128}
    test InfoStream-signedLEB128-5.0 {
        Decode 2 byte negative integer as signed LEB128
    } -setup {
        set is [dwarfdecode::InfoStream new "\x81\x7f"]
    } -cleanup {
        $is destroy
    } -body {
        $is signedLEB128
    } -result {-127}
    test InfoStream-signedLEB128-5.0 {
        Decode 2 byte negative integer as signed LEB128
    } -setup {
        set is [dwarfdecode::InfoStream new "\x80\x7f"]
    } -cleanup {
        $is destroy
    } -body {
        $is signedLEB128
    } -result {-128}
    test DecodeAbbrevSet-1.0 {
        Decode an abbreviation set
    } -setup {
    } -cleanup {
        $abbrObj destroy
    } -body {
        set abbr_info [ef1 getSectionDataByName .debug_abbrev]
        log::debug "abbrev info is [string length $abbr_info] bytes long"
        set abbrObj [::dwarfdecode::DebugAbbrev new $abbr_info]
        set abset [namespace eval [info object namespace $abbrObj] {
            my DecodeAbbrevSet 0
        }]
        dict get [dict get $abset 1] tag
    } -result {DW_TAG_compile_unit}
    test TagNumToStr-1.0 {
        Decode an abbreviation entry tag number
    } -setup {
    } -cleanup {
        $abbrObj destroy
    } -body {
        set abbr_info [ef1 getSectionDataByName .debug_abbrev]
        set abbrObj [::dwarfdecode::DebugAbbrev new $abbr_info]
        namespace eval [info object namespace $abbrObj] {
            my TagNumToStr 1
        }
    } -result {DW_TAG_array_type}
    test TagNumToStr-2.0 {
        Decode an abbreviation entry tag number -- user defined range
    } -setup {
    } -cleanup {
        $abbrObj destroy
    } -body {
        set abbr_info [ef1 getSectionDataByName .debug_abbrev]
        set abbrObj [::dwarfdecode::DebugAbbrev new $abbr_info]
        namespace eval [info object namespace $abbrObj] {
            my TagNumToStr 0x4081
        }
    } -result {DW_TAG_user(0x4081)}
    test AttrNumToStr-1.0 {
        Decode an abbreviation entry attribute number
    } -setup {
    } -cleanup {
        $abbrObj destroy
    } -body {
        set abbr_info [ef1 getSectionDataByName .debug_abbrev]
        set abbrObj [::dwarfdecode::DebugAbbrev new $abbr_info]
        namespace eval [info object namespace $abbrObj] {
            my AttrNumToStr 3
        }
    } -result {DW_AT_name}
    test FormNumToStr-1.0 {
        Decode an abbreviation entry form number
    } -setup {
    } -cleanup {
        $abbrObj destroy
    } -body {
        set abbr_info [ef1 getSectionDataByName .debug_abbrev]
        set abbrObj [::dwarfdecode::DebugAbbrev new $abbr_info]
        namespace eval [info object namespace $abbrObj] {
            my FormNumToStr 4
        }
    } -result {DW_FORM_block4}
    test AbbrInfo-1.0 {
        Decode the abbreviations
    } -setup {
    } -cleanup {
        $abbrObj destroy
    } -body {
        set abbr_info [ef1 getSectionDataByName .debug_abbrev]
        log::debug "abbrev info is [string length $abbr_info] bytes long"
        set abbrObj [::dwarfdecode::DebugAbbrev new $abbr_info]
        set decodedAbbr [$abbrObj abbrevs 0]
        dict get [dict get $decodedAbbr 1] tag
    } -result {DW_TAG_compile_unit}

    cleanupTests
}

namespace delete ::dwarfdecode::test
