#!/usr/bin/env tclsh
# This software is copyrighted by G. Andrew Mangogna.
# The following terms apply to all files associated with the software unless
# explicitly disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors and
# need not follow the licensing terms described here, provided that the
# new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
# OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
# THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
# OR MODIFICATIONS.
# 
# GOVERNMENT USE: If you are acquiring this software on behalf of the
# U.S. government, the Government shall have only "Restricted Rights"
# in the software and related documentation as defined in the Federal
# Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
# are acquiring the software on behalf of the Department of Defense,
# the software shall be classified as "Commercial Computer Software"
# and the Government shall have only "Restricted Rights" as defined in
# Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
# the authors grant the U.S. Government and others acting in its behalf
# permission to use and distribute the software in accordance with the
# terms specified in this license.
#
#*++
# PROJECT:
#  mrtools
#
# MODULE:
#  dwarfdecode.test -- unit tests for dwarfdecode package
#
# ABSTRACT:
#
#*--
#

package require Tcl 8.6
package require cmdline
package require logger

source ../../elfdecode/src/elfdecode.tcl
package require elfdecode

source ../src/dwarfdecode.tcl
package require dwarfdecode

::oo::define oo::class self mixin

# Add custom arguments here.
set optlist {
    {level.arg warn {Log debug level}}
    {file.arg {} {Elf file name}}
}
array set options [::cmdline::getKnownOptions argv $optlist]

::dwarfdecode::log::setlevel $options(level)
#::logger::setlevel $options(level)

package require tcltest
eval tcltest::configure $argv

namespace eval ::dwarfdecode::test {
    ::logger::initNamespace [namespace current] $options(level)

    namespace import ::tcltest::*

    elfdecode elffile create ef1
    ef1 readFile $options(file)

if 0 {
    test AbbrInfo-1.0 {
        Decode the abbreviations
    } -setup {
    } -cleanup {
        $abbrObj destroy
    } -body {
        set abbr_info [ef1 getSectionDataByName .debug_abbrev]
        log::debug "abbrev info is [string length $abbr_info] bytes long"
        set abbrObj [::dwarfdecode::DebugAbbrev new $abbr_info]
        set decodedAbbr [$abbrObj decode 0]
        return
    } -result {}

    test decodeDebugInfo-1.0 {
        examine debug info data
    } -setup {
        set abbr_info [ef1 getSectionDataByName .debug_abbrev]
        set abbrObj [::dwarfdecode::DebugAbbrev new $abbr_info]
    } -cleanup {
        $abbrObj destroy
        $debugObj destroy
    } -body {
        set debug_info [ef1 getSectionDataByName .debug_info]
        set debugObj [::dwarfdecode::DebugInfo new $debug_info]
        $debugObj decode $abbrObj
        $debugObj print
    } -result {}
}

    test decodePubnames-1.0 {
        decode pubnames section
    } -setup {
        set pubnames_info [ef1 getSectionDataByName .debug_pubnames]
    } -cleanup {
        $pubnamesObj destroy
    } -body {
        set pubnamesObj [::dwarfdecode::DebugPubnames new $pubnames_info]
        $pubnamesObj decode
    } -result {}

if 0 {
    test decodeAranges-1.0 {
        decode aranges section
    } -setup {
        set arange_info [ef1 getSectionDataByName .debug_aranges]
    } -cleanup {
        $arangeObj destroy
    } -body {
        set arangeObj [::dwarfdecode::DebugAranges new $arange_info]
        $arangeObj decode
    } -result {}
}


if 0 {
    # This is just a template for additional tests.

    test X-1.0 {
    } -setup {
    } -cleanup {
    } -body {
    } -result {}
}

    ef1 destroy
    cleanupTests
}

namespace delete ::dwarfdecode::test
