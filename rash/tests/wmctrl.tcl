# DO NOT EDIT THIS FILE!
# THIS FILE IS AUTOMATICALLY GENERATED FROM A LITERATE PROGRAM SOURCE FILE.
#
# This software is copyrighted 2014 by G. Andrew Mangogna.
# The following terms apply to all files associated with the software unless
# explicitly disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors and
# need not follow the licensing terms described here, provided that the
# new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
# OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
# THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
# OR MODIFICATIONS.
# 
# GOVERNMENT USE: If you are acquiring this software on behalf of the
# U.S. government, the Government shall have only "Restricted Rights"
# in the software and related documentation as defined in the Federal
# Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
# are acquiring the software on behalf of the Department of Defense,
# the software shall be classified as "Commercial Computer Software"
# and the Government shall have only "Restricted Rights" as defined in
# Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
# the authors grant the U.S. Government and others acting in its behalf
# permission to use and distribute the software in accordance with the
# terms specified in this license.

package require Tcl 8.6
package require logger
package require rosea

rosea configure {
    domain wmctrl {
        operation createWasher {washer} {
            set wm [WashingMachine create MachineID $washer CycleType Normal]
            ClothesTub create MachineID $washer
            WaterValve create ValveID Hot MachineID $washer
            WaterValve create ValveID Cold MachineID $washer
            WaterValve create ValveID Drain MachineID $washer
            Motor create MotorID Pump MachineID $washer
            Motor create MotorID Agitator MachineID $washer
            Motor create MotorID Spin MachineID $washer
            WaterLevelSensor create MachineID $washer
        
            return $wm
        }
        operation deleteWasher {washer} {
            set wm [WashingMachine findById MachineID $washer]
            if {[isNotEmptyRef $wm]} {
                set ct [findRelated $wm ~R1]
                delete\
                    [findRelated $ct ~R3]\
                    [findRelated $ct ~R2]\
                    [findRelated $ct ~R5]
                delete $ct $wm
            }
            return
        }
        operation startWasher {washer} {
            set wm [WashingMachine findWhere {$MachineID eq $washer}]
            if {[isEmptyRef $wm]} {
                error "unknown washer, \"$washer\""
            }
        
            signal $wm Start
        
            return
        }
        operation selectCycle {washer cycle} {
            set wm [WashingMachine findWhere {$MachineID eq $washer}]
            if {[isEmptyRef $wm]} {
                error "unknown washer, \"$washer\""
            }
        
            set wc [WashingCycle findWhere {$CycleType eq $cycle}]
            if {[isEmptyRef $wc]} {
                error "unknown cycle, \"$cycle\""
            }
        
            R4 link $wm $wc
        
            return
        }
        class WashingMachine {
            attribute MachineID string -id 1
            attribute CycleType string
            reference R4 WashingCycle -link CycleType
            statemodel {
                initialstate Stopped
                defaulttrans CH
                
                state Stopped {} {
                    set ct [findRelated $self ~R1]
                    signal $ct Stop
                }
                transition Stopped - Start -> FillingToWash
                
                state FillingToWash {} {
                    set wc [findRelated $self R4]
                    set ct [findRelated $self ~R1]
                    signal $ct Fill [readAttribute $wc WashWaterTemp]
                }
                transition FillingToWash - Full -> Washing
                
                state Washing {} {
                    set ct [findRelated $self ~R1]
                    signal $ct Agitate
                    set wc [findRelated $self R4]
                    delaysignal [expr {[readAttribute $wc WashDuration] * 1000}] $self Done ; # <1>
                }
                transition Washing - Done -> DrainingWash
                
                state DrainingWash {} {
                    set ct [findRelated $self ~R1]
                    signal $ct Drain
                }
                transition DrainingWash - Empty -> FillingToRinse
                
                state FillingToRinse {} {
                    set wc [findRelated $self R4]
                    set ct [findRelated $self ~R1]
                    signal $ct Fill [readAttribute $wc RinseWaterTemp]
                }
                transition FillingToRinse - Full -> Rinsing
                
                state Rinsing {} {
                    set ct [findRelated $self ~R1]
                    signal $ct Agitate
                    set wc [findRelated $self R4]
                    delaysignal [expr {[readAttribute $wc RinseDuration] * 1000}] $self Done
                }
                transition Rinsing - Done -> DrainingRinse
                
                state DrainingRinse {} {
                    set ct [findRelated $self ~R1]
                    signal $ct Drain
                }
                transition DrainingRinse - Empty -> Spinning
                
                state Spinning {} {
                    set ct [findRelated $self ~R1]
                    signal $ct Spin
                    set wc [findRelated $self R4]
                    delaysignal [expr {[readAttribute $wc SpinDuration] * 1000}] $self Done
                }
                transition Spinning - Done -> Stopped
            }
        }
        class WashingCycle {
            attribute CycleType string -id 1
            attribute WashWaterTemp string
            attribute RinseWaterTemp string
            attribute WashDuration int
            attribute RinseDuration int
            attribute SpinDuration int
            attribute AgitationSpeed string
            attribute SpinSpeed string
        }
        class ClothesTub {
            attribute MachineID string -id 1
            reference R1 WashingMachine -link MachineID
            statemodel {
                initialstate Empty
                defaulttrans CH
                
                state Empty {} {
                    set mtr [findRelatedWhere $self ~R2 {$MotorID eq "Pump"}]
                    instop $mtr Stop
                    
                    set wv [findRelatedWhere $self ~R3 {$ValveID eq "Drain"}]
                    instop $wv Close
                    
                    set wls [findRelated $self ~R5]
                    instop $wls Disable
                    
                    set wm [findRelated $self R1]
                    signal $wm Empty
                }
                transition Empty - Fill -> Filling
                transition Empty - Spin -> Spinning
                
                state Filling {temp} {
                    set wls [findRelated $self ~R5]
                    instop $wls Enable
                    if {$temp eq "Hot"} {
                        set wv [findRelatedWhere $self ~R3 {$ValveID eq "Hot"}]
                        instop $wv Open
                    } elseif {$temp eq "Cold"} {
                        set wv [findRelatedWhere $self ~R3 {$ValveID eq "Cold"}]
                        instop $wv Open
                    } elseif {$temp eq "Warm"} {
                        set wvs [findRelatedWhere $self ~R3 {$ValveID eq "Hot" ||\
                                $ValveID eq "Cold"}]
                        forAllRefs wv $wvs {
                            instop $wv Open
                        }
                    }
                }
                transition Filling - TubFull -> Full
                transition Filling - TubEmpty -> IG
                
                state Full {} {
                    set wls [findRelated $self ~R5]
                    instop $wls Disable
                    set wvs [findRelatedWhere $self ~R3 {$ValveID eq "Hot" || $ValveID eq "Cold"}]
                    forAllRefs wv $wvs {
                        instop $wv Close
                    }
                    set wm [findRelated $self R1]
                    signal $wm Full
                }
                transition Full - Agitate -> Agitating
                
                state Agitating {} {
                    set mtr [findRelatedWhere $self ~R2 {$MotorID eq "Agitator"}]
                    instop $mtr Start
                }
                transition Agitating - Drain -> Emptying
                
                state Emptying {} {
                    set mtr [findRelatedWhere $self ~R2 {$MotorID eq "Agitator"}]
                    instop $mtr Stop
                    
                    set wv [findRelatedWhere $self ~R3 {$ValveID eq "Drain"}]
                    instop $wv Open
                    
                    set mtr [findRelatedWhere $self ~R2 {$MotorID eq "Pump"}]
                    instop $mtr Start
                    
                    set wls [findRelated $self ~R5]
                    instop $wls Enable
                }
                transition Emptying - TubEmpty -> Empty
                transition Emptying - TubFull -> IG
                
                state Spinning {} {
                    set wv [findRelatedWhere $self ~R3 {$ValveID eq "Drain"}]
                    instop $wv Open
                    
                    set mtr [findRelatedWhere $self ~R2 {$MotorID eq "Pump"}]
                    instop $mtr Start
                    
                    set mtr [findRelatedWhere $self ~R2 {$MotorID eq "Spin"}]
                    instop $mtr Start
                }
                transition Spinning - Stop -> StoppingSpin
                
                state StoppingSpin {} {
                    set mtr [findRelatedWhere $self ~R2 {$MotorID eq "Spin"}]
                    instop $mtr Stop
                    
                    set mtr [findRelatedWhere $self ~R2 {$MotorID eq "Pump"}]
                    instop $mtr Stop
                    
                    set wv [findRelatedWhere $self ~R3 {$ValveID eq "Drain"}]
                    instop $wv Close
                }
                transition StoppingSpin - Fill -> Filling
            }
        }
        class WaterValve {
            attribute ValveID string -id 1
            attribute MachineID string -id 1
            reference R3 ClothesTub -link MachineID
            instop Open {} {
                tailcall VALVE::open [readAttribute $self ValveID]
            }
            
            instop Close {} {
                tailcall VALVE::close [readAttribute $self ValveID]
            }
        }
        class Motor {
            attribute MotorID string -id 1
            attribute MachineID string -id 1
            reference R2 ClothesTub -link MachineID
            instop Start {} {
                tailcall MOTOR::start [readAttribute $self MotorID]
            }
            
            instop Stop {} {
                tailcall MOTOR::stop [readAttribute $self MotorID]
            }
        }
        class WaterLevelSensor {
            attribute MachineID string -id 1
            reference R5 ClothesTub -link MachineID
            instop Enable {} {
                tailcall SENSOR::enable [readAttribute $self MachineID]
            }
            
            instop Disable {} {
                tailcall SENSOR::disable [readAttribute $self MachineID]
            }
        }
        association R4 WashingMachine 0..*--1 WashingCycle
        association R1 ClothesTub 1--1 WashingMachine
        association R3 WaterValve 1..*--1 ClothesTub
        association R2 Motor 1..*--1 ClothesTub
        association R5 WaterLevelSensor 1--1 ClothesTub
    }
}

rosea generate {} wmctrl

rosea populate {
    domain wmctrl {
        class WashingCycle\
            {CycleType WashWaterTemp RinseWaterTemp WashDuration RinseDuration\
                     SpinDuration AgitationSpeed SpinSpeed} {
        
            Normal Cold Cold 20 10 10 Medium Medium
            Whites Hot Cold 20 10 20 High High
            PermPress Warm Cold 15 10 15 Medium Medium
            Delicate Cold Cold 15 10 10 Low Low
        }
        class WashingMachine {MachineID CycleType} {WasherOne Normal}
        class ClothesTub MachineID WasherOne
        class Motor\
            {MotorID    MachineID} {
            Pump        WasherOne
            Agitator    WasherOne
            Spin        WasherOne
        }
        class WaterValve\
            {ValveID    MachineID} {
            Hot         WasherOne
            Cold        WasherOne
            Drain       WasherOne
        }
        class WaterLevelSensor MachineID WasherOne
    }
}
