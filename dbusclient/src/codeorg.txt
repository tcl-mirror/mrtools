== Code Organization

In this section,
we show how the literate program chunks defined previously
are composed into the various source code files.

=== Package source code

The package source code is delivered in a file named, _dbusclient.tcl_.
The following chunk is a root chunk for extracting the package source code.

[source,tcl]
----
<<dbusclient.tcl>>=
<<edit warning>>
<<copyright info>>

<<required packages>>

namespace eval ::dbusclient {
    <<logger setup>>

    <<package exports>>
    namespace ensemble create
}

<<connection class>>
<<service class>>

package provide dbusclient 1.0
----

=== Unit tests

Part of the literate program documentation is to show the test cases
for the code.
The package uses `tcltest` to run and tally the tests.
In the document,
we have included the test cases near to the code they test.
The package tests are delivered in a file name, _dbusclient.test_.
The following chunk is a root chunk for extracting the package unit tests.

(((chunk,dbusclient.test)))
[source,tcl]
----
<<dbusclient.test>>=
<<edit warning>>
<<copyright info>>

<<required packages for test>>

# Add custom arguments here.
set optlist {
    {level.arg warn {Logging level}}
}
array set options [::cmdline::getKnownOptions argv $optlist]
tcltest::configure {*}$argv

logger::setlevel $options(level)

source ../code/dbusclient.tcl

namespace eval ::dbusclient::test {
    <<logger setup>>

    log::info "testing dbusclient version: [package require dbusclient]"

    namespace import ::tcltest::*
    namespace import ::dbusclient::*

    <<test utilities>>

    <<test server setup>>

    <<connection tests>>
    <<service tests>>

    <<test server cleanup>>

    cleanupTests
}
----

We collect all the additional packages required for the tests into
one place.

(((chunk,required packages for test)))
[source,c]
----
<<required packages for test>>=
<<required packages>>
package require tcltest
package require cmdline
----

////
test case template
----
test X-1.0 {
} -setup {
} -cleanup {
} -body {
} -result {}
----
////

=== Reference documentation

The manpage or reference documentation has been included in the
literate program source as comments.
This allows the documentation to be near the code it describes,
but by placing it in a comment, it does not clutter the text itself.

The manpages are formated with Tcl doctools that can be found in
`tcllib` and can be transformed into HTML (among other forms) using
`dtplite`.
The document is place in a file named, _dbuclient.man_.
The following chunk is a root chunk for extracting the package manpage
document.

(((chunk,dbusclient.man)))
[source,tcl]
----
<<dbusclient.man>>=
[comment {
<<edit warning>>
<<copyright info>>
}]
[vset version 1.0]
[manpage_begin dbusclient n [vset version]]
[comment {
#
#*++
# PROJECT:
#   dbusclient
#
# MODULE:
#   dbusclient -- manual documentation for the dbusclient package
#
# ABSTRACT:
#
#*--
#
}]
[moddesc "DBus Client Commands"]
[titledesc "Client side DBus interactions"]
[require Tcl 8.6]
[require dbusclient [opt [vset version]]]
<<man description>>
<<man commands section>>
[list_begin definitions]
<<man command synopsis>>
[list_end]

[subsection "Connection object methods"]
The following methods are available for [class Connection] objects.

[list_begin definitions]
<<man connection methods>>
[list_end]

[subsection "Service object methods"]
The following methods are available for [class Service] objects.

[list_begin definitions]
<<man service methods>>
[list_end]

[section Dependencies]

The [package dbusclient] package depends upon three binary Tcl packages.

[list_begin itemized]
[item] [package dbus] is the Tcl bindings to the DBus library.
[item] [package tcom] is used to parse XML returned during introspection.
[item] [package ral] is used to manage the introspection data.
[list_end]

[keywords DBus]

[manpage_end]
----

// vim:set syntax=asciidoc:

