== Code Organization

=== Package source code

[source,tcl]
----
<<dbusclient.tcl>>=
<<edit warning>>
<<copyright info>>

<<required packages>>

namespace eval ::dbusclient {
    <<logger setup>>

    <<package exports>>
    namespace ensemble create
}

<<connection class>>
<<service class>>

package provide dbusclient 1.0
----

=== Unit tests

Part of the literate program documentation is to show the test cases
for the code.
In the document,
we have included the test cases near to the code they test.
In this section,
the root chunk for the tests is defined.

The package uses `tcltest` to run and tally the tests.

(((chunk,dbusclient.test)))
[source,tcl]
----
<<dbusclient.test>>=
<<edit warning>>
<<copyright info>>

<<required packages for test>>

# Add custom arguments here.
set optlist {
    {level.arg warn {Logging level}}
}
array set options [::cmdline::getKnownOptions argv $optlist]
tcltest::configure {*}$argv

logger::setlevel $options(level)

source ../code/dbusclient.tcl

namespace eval ::dbusclient::test {
    <<logger setup>>

    log::info "testing dbusclient version: [package require dbusclient]"

    namespace import ::tcltest::*
    namespace import ::dbusclient::*

    <<test utilities>>

    <<connection tests>>
    <<service tests>>

    cleanupTests
}
----

We collect all the additional packages required for the tests into
one place.

(((chunk,required packages)))
[source,c]
----
<<required packages for test>>=
<<required packages>>
package require tcltest
package require cmdline
----

////
test case template
----
test X-1.0 {
} -setup {
} -cleanup {
} -body {
} -result {}
----
////

// vim:set syntax=asciidoc:

