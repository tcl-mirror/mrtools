[comment {
#
# DO NOT EDIT THIS FILE!
# THIS FILE IS AUTOMATICALLY EXTRACTED FROM A LITERATE PROGRAM SOURCE FILE.
#
# This software is copyrighted 2019 by G. Andrew Mangogna.
# The following terms apply to all files associated with the software unless
# explicitly disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors and
# need not follow the licensing terms described here, provided that the
# new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
# OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
# THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
# OR MODIFICATIONS.
# 
# GOVERNMENT USE: If you are acquiring this software on behalf of the
# U.S. government, the Government shall have only "Restricted Rights"
# in the software and related documentation as defined in the Federal
# Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
# are acquiring the software on behalf of the Department of Defense,
# the software shall be classified as "Commercial Computer Software"
# and the Government shall have only "Restricted Rights" as defined in
# Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
# the authors grant the U.S. Government and others acting in its behalf
# permission to use and distribute the software in accordance with the
# terms specified in this license.
}]
[vset version 1.0]
[manpage_begin dbusclient n [vset version]]
[comment {
#
#*++
# PROJECT:
#   dbusclient
#
# MODULE:
#   dbusclient -- manual documentation for the dbusclient package
#
# ABSTRACT:
#
#*--
#
}]
[moddesc "DBus Client Commands"]
[titledesc "Client side DBus interactions"]
[require Tcl 8.6]
[require dbusclient [opt [vset version]]]
[description]
This manpage describes the
[package dbusclient]
package which is a Tcl script extension that simplifies
client side programing for access to services on the DBus.

[section Commands]
The two TclOO class commands are exported from the [package dbusclient]
namespace and they form the subcommands of a namespace ensemble
on the [package ::dbusclient] namespace.
[list_begin definitions]

[call [cmd "dbusclient Connection create"] [arg connobj] [arg address]]
[call [cmd "dbusclient Connection new"] [arg address]]

The [class Connection] command creates a new instance and connects
to the DBus specified by [arg address].
The return value of the commands is the fully qualified connection object
command name, which is to be used when opening a service on the bus.
On most systems where the DBus daemon is run,
there are two well known busses named, [emph system] and [emph session].
[example {
Connection create sysBus system
}]

[call [cmd "dbusclient Service create"] [arg service] [arg connobj]]
[call [cmd "dbusclient Service new"] [arg connobj]]

The [class Service] command creates a new service instance for
the service defined on the [arg connobj] bus.
The return value of the commands is the fully qualified service object
command name, which is to be used when accessing provided services.
Although the service object may be named arbitrarily,
it is most convenient to [cmd create] a [class Service] object that
has the same name as the [arg service] with it accesses.
[list_end]

[subsection "Connection object methods"]
The following methods are available for [class Connection] objects.

[list_begin definitions]
[call [cmd "[arg connobj] destroy"]]

The destructor for a [class Connection] object disconnects from the
bus to which it was associated and cleans up any internal resources.
Any [class Service] objects using the connection are also destroyed.
[call [cmd "[arg connobj] call"] [arg target] [arg path] [arg interface]\
        [arg method] [arg sig] [arg [opt "arg1 arg2 ..."]]]

The [cmd call] method invokes the [arg method] method which belongs to
the [arg interface] interface on the object instance specified by
[arg path] which resides on the service [arg target].
The [arg sig] argument give the DBus signature for the method.
If [arg sig] is specified as the empty string,
no signature is used in the conversion of Tcl strings to the underlying
data types required by [arg method].
The remaining [arg argN] arguments are passed as arguments to the method.
[call [cmd "[arg connobj] listen"] [arg path] [arg signal] [arg [opt script]]]

The [method listen] method registers [arg script] to be invoked when
[arg signal] on [arg path] is seen on the DBus.
If [arg script] is not specified, the currently registered script is returned.
If [arg script] is the empty string, then the currently registered script
is removed.
When [arg script] is invoked,
a dictionary of the event details is supplied as an additional argument.
See the [package dbus] package documentation for the details of the
event dictionary.
[call [cmd "[arg connobj] filter"] [arg subcmd] [arg [opt "arg1 arg2 ..."]]]
[list_end]

[subsection "Service object methods"]
The following methods are available for [class Service] objects.

[list_begin definitions]
[call [cmd "[arg svcobj] destroy"]]

The destructor for a [class Service] object cleans up any internal
resources.
[call [cmd "[arg svcobj] connectedTo"]]

The [method connectedTo] method returns the Connection object command
name for the service.
[call [cmd "[arg svcobj] pathList"]]

The [method pathList] method returns a list of object instance path
names for the service.
[call [cmd "[arg svcobj] findPathsByPropertyValue"] [arg interface]\
    [arg property] [arg expression]]

The [method findPathsByPropertyValue] method returns a list of object path
names specified by the [arg interface] and [arg property] arguments
where [arg expression] also evaluates to [emph true].
The [arg expression] is evaluated in the context of the caller
and may reference variables named [var Path], [var Interface],
[var Property], [var Value], or [var Valid].
The values of these variables is set for each property value that
also matches the values of [arg interface] and [arg property]
before [arg expression] is evaluated.
This method provides a means of finding object paths whose property
values match a specified expression.

For example,
[example {
set conn [Connection create sysBus system]
Service create DBus org.freedesktop.DBus $conn
DBus findPathsByPropertyValue org.freedesktop.DBus Interfaces\
        {"org.freedesktop.DBus.Monitoring" in $Value}
}]

returns the object whose path is [cmd /org/freedesktop/DBus].
[call [cmd "[arg svcobj] pathInterfaces"] [arg path]]

The [method pathInterfaces] method returns a list of interfaces that are
implemented for [arg path].
[call [cmd "[arg svcobj] pathProperties"] [arg path] [arg interface]]

The [method pathProperties] method returns a list of property names that are
implemented by [arg interface] for the object specified by [arg path].
[call [cmd "[arg svcobj] interfaceMethods"] [arg interface]]

The [method interfaceMethods] method returns a list of methods supported
by the specified [arg interface].
[call [cmd "[arg svcobj] methodSignature"] [arg interface] [arg method]]

The [method methodSignature] method returns the DBus signature
string for the specified [arg interface] and [arg method].
[call [cmd "[arg svcobj] interfaceProperties"] [arg interface]]

The [method interfaceProperties] method returns a list of properties defined
by [arg interface].
[call [cmd "[arg svcobj] interfaceSignals"] [arg interface]]

The [method interfaceSignals] method returns a list of signals defined
by [arg interface].
[call [cmd "[arg svcobj] call"] [arg path] [arg interface] [arg method]\
        [arg [opt "arg1 arg2 ..."]]]

The [method call] method invokes the [arg method] method that is contained
in [arg interface] on the the object specified by [arg path].
Additional optional [arg argN] arguments are passes as arguments to
the called method.
The return value of the [method call] method is the return value of
the underlying service method from the DBus.
[call [cmd "[arg svcobj] property"] [arg path] [arg interface] [arg property]\
        [arg [opt value]]]

The [method property] method reads and optionally updates the value of
the [arg property] property for [arg path] that is part of [arg interface].
If [arg value] is specified,
then [arg property] is set to that value (if possible).
The return value of the method is the new value of [arg property].
[para]
Note that writing property values to services on the DBus is an
asynchronous operation and usually results in a property changed
signal being sent.
The [package dbusclient] package handles such asynchronous updates but
the Tcl event loop must be entered in order to do so.
[call [cmd "[arg svcobj] trace"] [arg operation] [arg type] [arg [opt args]]]

The [method trace] method causes Tcl commands to be executed when
certain conditions on the DBus are met.
The interface for this method is modeled after the core [cmd trace] command.
Legal [arg operation] argument values are:

[list_begin definitions]
[call [cmd "[arg svcobj] trace add"] [arg type] [arg [opt args]]]
The legal values for the [arg type] trace type are [var path],
[var signal], or [var property].
The return value of the command is a trace identifier,
which can be used to remove or query the trace.
Multiple traces may be added of any type and the parameters of the
trace may be the same.
Traces are executed in order from youngest (most recently added) to
oldest.

[list_begin definitions]
[call [cmd "[arg svcobj] trace add path"] [arg pathpattern] [arg cmdprefix]]
Arranges for [arg cmdprefix] to be invoked whenever an object instance
whose name matches [arg pathpattern] is added or removed from the service.
The matching against [arg pathpattern] is done in the same manner as
the [cmd "string match"] command.
When invoked, [arg cmdprefix] is supplied with two additional arguments,
a [arg status], which has a value of either [var added] or [var removed],
and the name of the added or removed path.

[call [cmd "[arg svcobj] trace add signal"] [arg interface]\
        [arg signal] [arg pathpattern] [arg cmdprefix]]

Arranges for [arg cmdprefix] to be invoked when the [arg signal] from
[arg interface] on an object instance matching [arg pathpattern]
is detected on the bus.
The matching against [arg pathpattern] is done in the same manner as
the [cmd "string match"] command.
When invoked, [arg cmdprefix] is supplied with additional arguments.
The first argument is a dictionary of event information as described
in the Event Handlers section of the [package dbus] package documentation.
Any arguments of the signal itself follow.

[call [cmd "[arg svcobj] trace add property"] [arg interface]\
        [arg property] [arg pathpattern] [arg cmdprefix]]

Arranges for [arg cmdprefix] to be invoked when the [arg property] associated
with [arg interface] for an object instance matching [arg pathpattern]
is reported.
The matching against [arg pathpattern] is done in the same manner as
the [cmd "string match"] command.
When invoked,
[arg cmdprefix] is supplied with up to five additional arguments.
The first argument is a status value of [var changed] or [var invalidated],
indicating if the property value has changed or is no longer valid.
The second argument is the path name of the object instance whose
property was affected.
The third argument is the name of the interface of which the property was
part.
The fourth argument is the name of the property that was affected.
If the status was [var changed], a fifth argument is supplied giving the
new value of the property.
[list_end]

[call [cmd "[arg svcobj] trace remove"] [arg traceid]]
Removes the trace identified by [arg traceid].
It is not an error to remove a non-existant trace.

[call [cmd "[arg svcobj] trace info"] [arg traceid]]
Returns a dictionary containing information about the trace specified
by [arg traceid].
The keys of the dictionary are:

[list_begin definitions]
[def Type]
Specifies the type of trace as either [var path], [var signal],
or [var property].
[def PathMatch]
Specifies the pattern that object instance path names must match
to trigger the trace.
[def CmdPrefix]
Specifies the command prefix to invoke when the trace performed.
[list_end]

For [var signal] type traces additional keys are:
[list_begin definitions]
[def Interface]
Specifies the interface that will trigger the trace.
[def Signal]
Specifies the name of the signal that will trigger the trace.
[list_end]

For [var property] type traces additional keys are:
[list_begin definitions]
[def Interface]
Specifies the interface that will trigger the trace.
[def Property]
Specifies the name of the property that will trigger the trace.
[list_end]

For [var path] type traces no additional information is provided.

[list_end]
[call [cmd "[arg svcobj] waitForProperty"] [arg interface] [arg property]\
    [arg pathpattern] [arg trigger] [arg [opt timeout]]]

The [method waitForProperty] method establishes a property trace on the
[arg property] property in [arg interface] matching [arg pathpattern].
These arguments are interpreted in the same manner as for the
[method "trace add"] method.
Then the script specified by [arg trigger] is executed in the
call stack of the caller.
Then the Tcl event loop is entered waiting for the property change
to occur.
If [arg timeout] is specified it is the number of milliseconds to
wait for the property change notification.
A [arg timeout] value of 0 is interpreted to mean to wait forever.
The default [arg timeout] value is 5000.
If [arg trigger] executes successfully and the DBus notification is
received before any timeout,
then the return value of the command is a dictionary giving the details
of the property change.
The keys to the dictionary are:

[list_begin definitions]
[def status]
A status element value of [cmd changed],
indicates the property value has changed and the new value is given
by the value element.
A status element value of [cmd invalidated],
indicates the property no longer has a valid value and in this case
no value element is included in the dictionary.
[def path]
The path name of the object to which the change occurred.
[def interface]
The interface of the changed property.
[def property]
The name of the changed property.
[def value]
The new value of the property if the status element has a value of
[cmd changed].
[list_end]
[call [cmd "[arg svcobj] waitForSignal"] [arg interface] [arg signal]\
    [arg pathpattern] [arg trigger] [arg [opt timeout]]]

The [method waitForSignal] method establishes a signal trace on the
[arg signal] signal in [arg interface] matching [arg pathpattern].
These arguments are interpreted in the same manner as for the
[method "trace add"] method.
Then the script specified by [arg trigger] is executed in the
call stack of the caller.
Then the Tcl event loop is entered waiting for the signal notification
to occur.
If [arg timeout] is specified it is the number of milliseconds to
wait for the property change notification.
A [arg timeout] value of 0 is interpreted to mean to wait forever.
The default [arg timeout] value is 5000.
If [arg trigger] executes successfully and the DBus signal is
received before any timeout,
then the return value of the command is a dictionary giving the details
of the signal.
The keys to the dictionary are:

[list_begin definitions]
[def path]
The path name of the object to which the change occurred.
[def interface]
The interface of the changed property.
[def signal]
The name of the received signal.
[def sender]
The sender of the signal.
[def signature]
The argument signature of the signal.
[def args]
A list of argument values that came with the signal.
[list_end]
[call [cmd "[arg svcobj] waitForPath"] [arg pathpattern] [arg trigger]\
        [arg [opt timeout]]]

The [method waitForPath] method establishes a path trace on the
object instance matching [arg pathpattern].
Then the script specified by [arg trigger] is executed in the
call stack of the caller.
Then the Tcl event loop is entered waiting for the path change
to occur.
If [arg timeout] is specified it is the number of milliseconds to
wait for the property change notification.
A [arg timeout] value of 0 is interpreted to mean to wait forever.
The default [arg timeout] value is 5000.
If [arg trigger] executes successfully and the DBus notification is
received before any timeout,
then the return value of the command is a dictionary giving the details
of the path change.
The keys to the dictionary are:

[list_begin definitions]
[def status]
A status element value of [cmd added],
indicates the path is newly created and the value is given
by the path element.
A status element value of [cmd removed],
indicates the path was deleted and the value of the deleted path
is given by the path element.
[def path]
The path name of the object which was added or removed.
[list_end]
[list_end]

[section Dependencies]

The [package dbusclient] package depends upon three binary Tcl packages.

[list_begin itemized]
[item] [package dbus] is the Tcl bindings to the DBus library.
[item] [package tcom] is used to parse XML returned during introspection.
[item] [package ral] is used to manage the introspection data.
[list_end]

[keywords DBus]

[manpage_end]
