[manpage_begin eventTrace n 1.0]
[comment {
#*++
# MODULE:
#
# ABSTRACT:
# 
# $Revision$
# $Date$
#*--
}]
[moddesc "eventTrace"]
[titledesc "State Machine Event Tracing"]
[require eventTrace [opt 1.0]]
[description]
The [cmd eventTrace] package provides a means of converting
state machine transition information provided by the
Single Threaded Software Architecture (STSA)
into a human readable string.
The package is provided as an ensemble of commands in the
[namespace ::eventTrace] namespace.
[para]
The STSA mechanisms can be conditionally compiled with the
[emph MECH_SM_TRACE] preprocessor define.
When so compiled, it is possible to register a callback function
that is invoked upon each event dispatch.
The details of the transition are given to the callback function
which is free to do as it wishes with the information.
One possible action is to ship the information across a communications
interface.
This package is intended to help make the raw trace information useful
for debugging and testing.
[para]
The lowest level of trace information is binary information
(the number of bytes is dependent upon the processor architecture).
All the information available to the STSA mechanisms is numeric in nature
since string information is deem too large to store in the embedded target.
Note however that POSIX executables built via [cmd tack] do emit
their trace information in string form.
In order to convert the numbers into more meaningful strings, two
additional sources of information are required.
[para]
First the various mappings of states, events, [emph etc.] numbers to
strings are needed.
[package eventTrace] supports applications built with [cmd pycca]
and directly reads the [arg -save] file produced by [cmd pycca].
This file contains all the numeric to string mappings encoded by [cmd pycca]
when the domain was generated.
The second source of information is symbols produced by the linker.
Since events are sent between instances,
the mechanisms are only aware of the addresses of those instances and
symbolic information mapping instance address to the instance class
is only available from the symbolic information of the linker.
[package eventTrace] will extract the symbolic information from several
different file formats.
The linker must be instructed to produce a symbol table as part of its output.

[section Commands]

[list_begin definitions]

[call [cmd "eventTrace setTracePlatform"] [arg "MSP430 | ELF | PEI"]]
The [cmd setTracePlatform] command determines the interpretation of
the symbol table given as an argument to the [cmd traceInit] command.
This command should be invoked before any others to establish the
format of the symbolic information.
If the platform is given as [arg MSP430] then the symbol file is
assumed to be an IAR linker map that has been generated with
symbol information (it is important to instruct the IAR linker to place
the proper symbol table information in the linker map).
If the platform is given as [arg ELF] then the symbol file is
assumed to be an ELF file that contains the executable as well as the
symbols (in this case it is important to include symbolic information
in the linker instructions).
If the platform is given as [arg PEI] then the symbol file is
assumed to be the output of running the command
[cmd "objdump --headers --syms --wide"] on a Microsoft Windows PEI
executable.
When the [cmd traceInit] command is invoked,
it used the value of the trace platform to determine how to obtain
the symbol information needed to format the event dispatch traces.


[call [cmd "eventTrace traceInit"] [arg symfile] [arg pyccafile]]
The [cmd traceInit] command initializes the internal
data structures with the symbolic information about the addresses
of instances and the mappings of transition numbers to strings.
The [arg symfile] argument is the name of symbol file whose format
is interpreted according to the previous invocation of the
[cmd setTracePlatform] command.
The [arg pyccafile] is the name of a file produced by [cmd pycca]
as a result of running [cmd pycca] with the [arg -save] option.
Returns the empty string.

[call [cmd "eventTrace scanTrace"] [arg bintrace]]
The [cmd scanTrace] command converts binary trace information into a
dictionary of numerical values.
The [arg bintrace] argument is a binary string of the trace information
as reported by the trace callbacks of the STSA mechanisms.
The length and format of the binary trace information is determined
by the target platform and is determined by the trace platform setting
given by the [cmd setTracePlatform] command.

The return value is a dictionary with the following keys:
[list_begin itemized]
[item] eventType
[item] eventNumber
[item] srcInst
[item] dstInst
[list_end]

If [emph eventType] is 0, indicating a normal event,
the returned dictionary will also contain:
[list_begin itemized]
[item] currState
[item] newState
[list_end]

If [emph eventType] is 1, indicating a polymorphic event,
the returned dictionary will also contain:
[list_begin itemized]
[item] subcode
[item] hierarchy
[item] mappedNumber
[item] mappedType
[list_end]

If [emph eventType] is 2, indicating a creation event,
the returned dictionary will also contain:
[list_begin itemized]
[item] dstClass
[list_end]

The values of all the dictionary keys are numeric, containing either
an integer code as assigned by [cmd pycca] or the memory address of
a class instance as located by the linker.

[call [cmd "eventTrace formatTrace"] [arg trace]]
The [cmd formatTrace] command converts a dictionary whose keys are the
same as that returned by [cmd scanTrace]
into a dictionary that contains the same keys but whose
values are text strings corresponding to values
entered in the [cmd pycca] source file or symbolic names found
in the symbolic information.

[call [cmd "eventTrace ptrace"] [arg trace]]
The [cmd ptrace] command accepts a dictionary whose keys are the
same as those produced by the [cmd scanTrace] command and
returns a string representation of a transition
trace that is intended for human consumption.

[call [cmd "eventTrace markTransition"]\
    [arg testName] [arg className] [arg stateName] [arg eventName]]
The [cmd markTransition] command records a state transition for later
reporting.
The [arg testName] argument gives the name of a test case that evoked
the transition.
The transition is for the class given by [arg className] when it's current
state is [arg stateName] and it receives the event given by [arg eventName].

[call [cmd "eventTrace reportCoverage"]]
The [cmd reportCoverage] command returns a string that reports the
transition coverage of all the test cases recorded with the [cmd markTransition]
command.

[call [cmd "eventTrace instAddress"] [arg className] [arg [opt instance]]]
The [cmd instAddress] command translates a class name and instance number or
name into an memory address.

[call [cmd "eventTrace instStorage"] [arg module] [arg className]]
The [cmd instStorage] command translate a module name and class name into
the beginning memory address of the instance storage pool for the class.

[list_end]

[manpage_end]
