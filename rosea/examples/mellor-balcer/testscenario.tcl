# DO NOT EDIT THIS FILE!
# THIS FILE IS AUTOMATICALLY GENERATED FROM A LITERATE PROGRAM SOURCE FILE.
#
# This software is copyrighted 2015 by G. Andrew Mangogna.
# The following terms apply to all files associated with the software unless
# explicitly disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors and
# need not follow the licensing terms described here, provided that the
# new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
# OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
# THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
# OR MODIFICATIONS.
# 
# GOVERNMENT USE: If you are acquiring this software on behalf of the
# U.S. government, the Government shall have only "Restricted Rights"
# in the software and related documentation as defined in the Federal
# Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
# are acquiring the software on behalf of the Department of Defense,
# the software shall be classified as "Commercial Computer Software"
# and the Government shall have only "Restricted Rights" as defined in
# Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
# the authors grant the U.S. Government and others acting in its behalf
# permission to use and distribute the software in accordance with the
# terms specified in this license.

package require rosea 1.5

proc ::syncToStateActivity {class state {timeout 3000}} {
    set activityproc\
        [rosea info statemodel activityproc bookstore $class $state] ; # <1>

    trace add execution $activityproc leave syncToStop ; # <2>

    set totimer [after $timeout set ::done TIMEOUT]
    vwait ::done ; # <3>
    after cancel $totimer
    trace remove execution $activityproc leave syncToStop

    if {$::done eq "TIMEOUT"} {
        error "Sync to $class / $state timed out"
    }
    return $::done
}
proc ::syncToStop {cmd code result op} {
    set ::done 1
}
proc ::logTraces {filenamebase} {
    set logchan [::open $filenamebase.log w]
    try {
        puts $logchan [rosea trace format [rosea trace decode all]]
    } finally {
        ::chan close $logchan
    }
    rosea trace diagram all $filenamebase.diag ; # <1>
    rosea trace control clear ; # <2>
}

rosea configureFromFile simplebookstore.tcl ; # <1>
rosea generate ; # <2>
rosea populateFromFile sbs_population.tcl

namespace eval ::bookstore::EE_CreditCardCompany {
    proc requestChargeApproval {accountNumber billingAddress cardholderName
                cardExpirationDate chargeID chargeAmount} {
        puts [info level 0]

        set chargeRef [::bookstore::CreditCardCharge findById chargeID $chargeID]
        after 100 [list rosea tunnel $chargeRef signal chargeProcessed approved] ; # <1>
    }
}
namespace eval ::bookstore::EE_OnLineCustomer {
    proc chargeDeclined {email} {
        puts [info level 0]
    }
    proc chargeApproved {email} {
        puts [info level 0]
    }
    proc orderReportedDelivered {email} {
        puts [info level 0]
    }
}
namespace eval ::bookstore::EE_ShippingCompany {
    proc shipmentReadyForPickup {shipmentID} {
        puts [info level 0]

        set shipmentRef [::bookstore::Shipment findById shipmentID $shipmentID]
        rosea tunnel $shipmentRef signal trackingNumberAssigned\
            FedEx 130047332

        after 200 [list rosea tunnel $shipmentRef signal pickedUp]
        after 400 [list ::bookstore::EE_ShippingCompany::reportDelivery\
                $shipmentID]
    }

    # We use a separate procedure, rather than directly tunneling the event, so
    # we can get a better value for the deliveryConfirmed event parameter.
    proc reportDelivery {shipmentID} {
        puts [info level 0]

        set shipmentRef [::bookstore::Shipment findById shipmentID $shipmentID]
        rosea tunnel $shipmentRef signal deliveryConfirmed\
                [clock format [clock seconds]]
    }
}
namespace eval ::bookstore::EE_ShippingClerk {
    proc shipmentReadyToPack {shipmentID} {
        puts [info level 0]
    }
}
proc ::bookstore::ShippingClerk::randomdelaysignal {instref event {max 10}} {
    delaysignal [expr {int(rand() * $max) * 100}] $instref $event
}

rosea trace control on

set exumlref [bookstore::Product findWhere\
        {[string match {Executable*} $productName]}]
set id [rosea tunnel $exumlref readAttribute productID] ; # <1>
set cartID [incr carttag]
bookstore::ShoppingCart createasync\
    startCart [list $id 1]\
    cartID $cartID totalValue 0 ; # <1>
syncToStateActivity ShoppingCart AddingSelectiontoOrder
set selection [bookstore::ProductSelection findById\
        cartID $cartID productID $id]
rosea::tunnel $selection signal changeQuantity 0
syncToStateActivity ShoppingCart CancelingEntireOrder
logTraces scenario1
set cartID [incr carttag]
bookstore::ShoppingCart createasync\
    startCart [list $id 1]\
    cartID $cartID totalValue 0

syncToStateActivity ShoppingCart AddingSelectiontoOrder
set selection [bookstore::ProductSelection findById\
        cartID $cartID productID $id]
rosea::tunnel $selection signal changeQuantity 3

syncToStateActivity ProductSelection ChangingQuantity
set musicRef [bookstore::Product findWhere\
        {[string match {Carnival*} $productName]}]
set id [rosea tunnel $musicRef readAttribute productID]

set cartRef [bookstore::ShoppingCart findById cartID $cartID]
rosea::tunnel $cartRef signal addSelection $id 2 ; # <1>
syncToStateActivity ShoppingCart AddingSelectiontoOrder
rosea::tunnel $cartRef signal checkOut\
        {5555 6666 7777 8888}\
        {100 E Main St., Anywhere, CO 88888}\
        {10/17}\
        {Fred Smith}\
        fsmith@gmail.com\
        {Fred Smith}\
        {222-555-1212}\
        {100 E Main St., Anywhere, CO 88888}

syncToStateActivity Order BeingPackedandShipped

logTraces scenario2
syncToStateActivity ShippingClerk CompletingJob 10000

logTraces scenario3
syncToStateActivity Shipment Delivered 10000

logTraces scenario4

rosea trace control off
