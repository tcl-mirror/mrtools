---
title: Tooling Requirements for Rosea Translated Models
author: Andrew Mangogna
date: 24 Oct 2017
urlcolor: Violet
linkcolor: Green
links-as-notes: 1
header-includes:
    - \renewcommand{\familydefault}{\sfdefault}
---

# Introduction

This document describes the necessary tooling required to run a
`rosea` translated executable model and gives instructions on obtaining
and installing the required software.

## Overview

Executable models can be translated to a Tcl run-time environment using
`rosea`.
`Rosea` takes a description of the domain as a domain specific language (DSL)
and generates the logic of the domain in Tcl.
Note that `rosea` does not generate any files.
Since the target environment is Tcl which is very dynamic in nature,
the generated code is simply executed on the fly.
There is no reason in Tcl to generate the Tcl code to a file and then
have to `source` it in later.

`Rosea` has a very fundamental dependency on `TclRAL`, which is a
relational algebra library.
`TclRAL` provides the core relational functions required to support
the modeling data semantics.

After translation via `rosea`,
it remains to set up some environment to run the resulting domain
implementation.
In the usual case of a complete application,
several domains would be bridged together and there would be
start-up code to get things going.
After that, the model execution evolves by the way it interacts with the
external world.
During development, it is convenient to be able to simulate
a more complete environment and the `rash` program is used to create a test
harness for running one or more domains.

So, we must have access to three primary packages to run a `rosea` domain,
namely:

* `TclRAL`
* rosea
* rash

Each of these packages has other dependencies that are usually resolved
by existing packages in `tcllib`.
We do *not* deal with the other dependencies here and assume you have
a reasonable "batteries included" Tcl distribution in place.

# Installing `TclRAL`

`TclRAL` can be obtained from the
[`TclRAL` fossil repository](http://repos.modelrealization.com/cgi-bin/fossil/tclral).
From the home page,
follow the link to the latest release (as of this writing the latest
version is 0.12.2).
Since `TclRAL` is a "C" based extension, you must choose the package
file that matches your intended execution environment.
Here we assume MacOSX is the target. For other targets the file names
will change, but they follow a similar naming pattern.

Download the `TclRAL` package file.
The file name is:

> `package-ral-0.12.2-macosx10.10-i386-x86_64.zip`.

(as mentioned other platforms will have differently named files that
follow this naming convention).

Use the teacup to install the package:

~~~~~
$ teacup install package-ral-0.12.2-macosx10.10-i386-x86_64.zip
~~~~~

`TclRAL` has a conpanion package named `ralutil` that is also required.
This package is Tcl based, so it does not have different versions for
different platforms.
It may be downloaded from the same page as `TclRAL`.
The downloaded file is named:

> `package-ralutil-0.12.2-tcl.tm`

Install `ralutil` using the teacup:

~~~~~
$ teacup install package-ralutil-0.12.2-tcl.tm
~~~~~

The man page documentation is also accessible from the download page.

Test that the package installation happened correctly:

~~~~~
$ tclsh
% package require ral
0.12.2
% package require ralutil
0.12.2
% exit
~~~~~

# Installing rosea

We present two methods for obtaining the `rosea` package.
In this section,
we follow the previously established pattern pattern.
In a
[following section],
we discuss cloning the fossil repository as a technique
to obtain the package files.

[following section]: # cloning-the-mrtools-repository

`Rosea` can be obtained from the
[mrtools fossil repository](http://repos.modelrealization.com/cgi-bin/fossil/mrtools).
Following the same approach as for `TclRAL`,
we will download a package and install it using the teacup program.
From the home page of the repository,
select the **Files** tab at the top.
This will bring up a listing of the top level files in the repository.
Selecting the **packages** directory brings up a list of packages
in the repository.
Select the file named:

> `package-rosea-1.7-tcl.tm`

This will bring up a page that shows the contents of the file.
Along the top of the page, select the **Download** button to download the
file.

Install the package using the teacup:

~~~~~
$ teacup install package-rosea-1.7-tcl.tm
~~~~~

Test that the installation is functional:

~~~~~
$ tclsh
% package require rosea
1.7
% exit
~~~~~

# Installing rash

From the same **packages** directory used to download `rosea`,
find the file named:

> `package-rash-1.0a3-tcl.tm`

As for `rosea`, select that file and then select the **Download**
button to obtain a copy of the package file.

Install the package using the teacup:

~~~~~
$ teacup install package-rash-1.0a3-tcl.tm
~~~~~

Test that the installation is functional:

~~~~~
$ tclsh
% package require rash
1.0a3
% exit
~~~~~

Note since `rash` uses Tk, the above test will bring up a Tk window.

# Cloning the mrtools repository

An alternative to downloading the indivdual `rosea` and `rash` package
files is to clone the entire fossil repository.
The advantage of cloning the repository is that you will have immediate
access to all the mrtools files and updating is much easier.

Getting access to fossil files is a two step process.

1. Clone the repository to obtain all the contents.
1. Open a version of the repository into a working directory.

It is useful to have a directory where the cloned repositories are stored
and a different directory to use as a working directory.
Do not make the repository storage directory part of a working directory
tree: keep it someplace separate.

To clone the repository:

~~~~~
$ cd /path to repository directory
$ fossil clone http://repos.modelrealization.com/cgi-bin/fossil/mrtools mrtools.fossil
~~~~~

To create a working directory and open the cloned repository:

~~~~~
$ cd /parent of working directory
$ mkdir mrtools
$ cd mrtools
$ fossil open /path to repository directory/mrtools.fossil
~~~~~

From here,
you can install the `rosea` and `rash` packages as follows:

~~~~~
$ cd packages
$ teacup install package-rosea-1.7-tcl.tm
$ teacup install package-rash-1.0a3-tcl.tm
~~~~~

# Running a domain

To run a `rosea` translated domain,
it is necessary to write a small script to load in the domain
and start `rash`.
The following is a very simple version of what such a script should do.

~~~~~{.tcl}
#!/usr/bin/env wish
package require rash
wm withdraw .
foreach file $argv {
    source $file
}
rash init
tkwait window .rash
~~~~~

Place the previous section in a file named `runrash` and
add execute permissions to the file.
Then the `rosea` domains may be run under `rash` by invoking:

~~~~~
$ ./runrash "name of rosea config/generate/populate script" ...
~~~~~
