\# Per Tcl conference request:
\# use 12 point font, i.e. +2 from the default 10 point
\# top, left and right margins at 1 inch
\# bottom margin at 1.5 inches
.nr pp +2
.nr sp +2
.nr tm 1.0i
\# .nr bm 1.5i
.po 1.0i
.ll 6.5i
\# .ls 2
\# Title
.ds TI Rosea -- A Relation Oriented Software Execution Architecture
\# Author
.ds AU Andrew Mangogna
\# PDF stuff
.nr PDFOUTLINE.FOLDLEVEL 2
.pdfview /PageMode /UseOutlines
.pdfinfo /Title     \*(TI
.pdfinfo /Author    \*(AU
.pdfinfo /Subject   Relation Oriented Software Development
.pdfinfo /Keywords  Software ROSEA
.tp
.sz +4
.(l C
.b ROSEA
.b "A Relation Oriented Software Execution Architecture"
.)l
.sz -2
.(l C
Andrew Mangogna
amangogna@modelrealization.com
22nd Annual Tcl/Tk Conference
October 19-23, 2015
.)l
.sp 2
.ce 1
.b Copyright
.(q
\[co] 2015, by G. Andrew Mangogna.
.br
Permission to copy and distribute this article by any means is granted
by the copyright holder provided the work is distributed in its entirety and
this notice appears on all copies.
.)q
.ce 1
.b Abstract
.(q
Rosea is a Tcl package that implements a data and execution domain that is
suitable as the target platform for translating executable software models into
programs using Tcl as the implementation language.  Translation is accomplished
by capturing the characteristics of the software model using a domain specific
language from which the data structures used by the run time component are
built.  This paper presents the design and implementation of rosea showing how
Executable UML model semantics are mapped to Tcl language constructs.  Model
classes are held in relation variables and class relationships are enforced as
referential integrity constraints between the relation variables.  Dynamics are
implemented as Moore type finite state machines.  Processing is event driven
and transactional in nature with the state of the program data being rolled
back if integrity checks fail.
.)q
\# set up a Courier font for code examples
.fp \n[.fp] C
.nr LF \n[.fp]-1
.uh "Introduction"
.lp
Rosea is an acronym for Relation Oriented Software Execution Architecture.
Rosea is a Tcl package written entirely in Tcl script but is heavily dependent
upon
.pdfhref W -D http://repos.modelrealization.com/cgi-bin/fossil/tclral TclRAL
a "C" based Tcl extension that implements the relational algebra.
.lp
The purpose of rosea is to provide an implementation target for translating
executable models of software into running programs using Tcl as the
implementation language.
In this paper we present two distinct views of the rosea package.
First, rosea is discussed from a modeling / translating point of view.
From this perspective,
rosea provides a means for model execution semantics to be mapped onto
Tcl language constructs.
Secondly, rosea is discussed from a Tcl language point of view.
From that perspective, rosea is an object system based on namespace
ensembles with object data stored as relation variables.
.uh "The Modeling View of Rosea"
.lp
The diagram below shows a general outline of a software development
workflow that is accomplished by translation.
.(b L
.PS
right
R: box width 1.1 "Requirements"
arrow linewid 0.3 "Analysis" above
E: box width 0.9 "Executable" "Model"
arrow linewid 0.3 "Translate" above
C: box width 1.1 outline "black" shaded "grey" "Domain" "Configuration"
move to C.s
down
move 0.25
P: box width 1.0 outline "black" shaded "grey" "Domain" "Population"
move to P.s
down
move 0.25
K: box width 1.0 outline "black" shaded "grey" "Rosea" "Package"
move to P.e
right
move
T: box width 0.8 outline "black" shaded "grey" "Tcl" "Program"
arrow from C.e to T.w "Generate" ljust above
arrow from P.e to T.w
arrow from K.e to T.w
.PE
.)b
.lp
.i Requirements
are analyzed to give
.i "Executable Models" .
A software system is divided into
.i Domains .
A domain encapsulates a cohesive subject matter.
A domain is then translated into the rosea configuration DSL
(Domain Specific Language).
That configuration is used to
.i generate
data that drives the run time execution of the domain.
Each domain is supplied with an initial
.i population
of class instances.
By combining the translated domain with its initial population and
the rosea package,
a running Tcl program is obtained.

Space considerations do now allow us to discuss in this paper how requirements
are gathered and then analyzed to yield executable models.
Rosea is concerned with only those items in the grayed out boxes in the above
diagram,
.i i.e. \&
rosea is concerned only with translating model logic into a Tcl
implementation.

We insist that the models must be executable if we are to translate them
and to that end we insist that models conform to the semantics of
.pdfhref W -D http://en.wikipedia.org/wiki/Executable_UML Executable UML.
Executable UML uses a well defined subset of UML that has rigorous
execution semantics.
There are several good books on Executable UML\**
.(f
\** Stephen J. Mellor and Marc J. Balcer,
.i "Executable UML: a foundation for model-driven architecture" ,
Addison-Wesley (2002), ISBN 0-201-74804-5.
.)f
\**
.(f
\** Chris Raistrick, Paul Francis, John Wright, Colin Carter and Ian Wilkie,
.i "Model Driven Architecture with Executable UML" ,
Cambridge University Press (2004), ISBN 0-521-53771-1.
.)f
\**
.(f
\** Leon Starr,
.i "How to Build Shlaer-Mellor Object Models" ,
Yourdon Press (1996), ISBN 0-13-207663-2.
.)f
and readers are encourage to consult at least one of them.

From the modeling perspective,
rosea provides an implementation of the Executable UML semantics
using Tcl as the implementation language.
The rosea package consists of three principle components:
.np
A domain specific language that is used to encode the model graphic.
The DSL is consists of a set of Tcl commands and so the DSL would
be classified as an
.i internal
DSL.
The DSL provides commands to define classes, attributes and relationships
and we shall see examples below.
.np
A set of run time procedures that activities in the model may invoke
to access data, navigate relationships and signal state machine events.
The function of the run time procedures is tailored to match the semantics
implied by the executable models.
.np
A generator that translates the configuration information provided by
the DSL into the data structures used by the run time.
The run time is completely data driven.
The exact behavior, in modeling terms,
that a domain exhibits depends upon the
data values supplied to the run time code
For example,
classes that exhibit state behavior supply a state transition table
to the run time code.
The behavior of the class depends upon the sequence of events received
by a class instance dispatched according to the specifications
in the state transition table.
.uh "Examples of Translating Data"
.lp
To get a sense of the rosea domain configuration DSL,
we will show an example of how to translate a model using rosea.
The example we show here is fully worked out in the
.pdfhref L -D resources literate program document
that is part of the rosea distribution.
In this paper,
we will translate only fragments of the model.
Consider the following fragment of a class diagram for a washing machine
control domain.
This domain controls a primitive automatic clothes washing machine.
.(b L
\X'pdf: pdfpic R4.pdf -L 6.5i
.sp 2.2i
.)b
.lp
This class model fragment states, roughly, that there exists a
.b "Washing Machine"
class that is identified by a
.b "Machine ID"
attribute
and is characterized by a
.b "Cycle Type"
attribute.
There is also a
.b "Washing Cycle"
class that is identified by a
.b "Cycle Type"
attribute and characterized by a number of attributes
that hold water temperatures, durations and speeds.
There also a relationship,
.b R4 ,
between
.b "Washing Machine"
instances and
.b "Washing Cycle"
instances.
The semantics of the relationship
is stated by the verb phrases on the class model graphic.
A
.b "Washing Machine"
.b "operates according to"
.i "exactly one"
.b "Washing Cycle"
and each
.b "Washing Cycle"
.b "prescribes the operation of"
.i "zero or more"
.b "Washing Machines"
.lp
As we set about to translate this fragment,
recall that models are organized into domains and the DSL has a
\fCdomain\fP
command.
The
\fCdomain\fP
command supplies a name for the domain and a script
which defines the characteristics of the domain.
.nr df \n[LF]
.(b L
domain wmctrl {
    # Domain definition for the Washing Machine Control Domain
    # .....
}
.)b
.nr df 0
.lp
The script for the
\fCdomain\fP
command is an ordinary Tcl script, but is evaluated in a context 
where specific commands may be invoked to configure the domain.
In the remaining portion of the example,
we will assume that the commands shown are invoked inside the
script portion of a
\fCdomain\fP
command.
.lp
Starting with the
.b "Washing Cycle"
class,
it is defined as follows.
.nr df \n[LF]
.(b L
class WashingCycle {
    attribute CycleType string -id 1
    attribute WashWaterTemp string
    attribute RinseWaterTemp string
    attribute WashDuration int
    attribute RinseDuration int
    attribute SpinDuration int
    attribute AgitationSpeed string
    attribute SpinSpeed string
}
.)b
.nr df 0
.lp
The \fCclass\fP command gives a name to the class and
takes a script that defines the properties of the class.
Class attributes are defined by invoking the \fCattribute\fP command,
which takes a name for the attribute and a Tcl data type.
It may seem unusual to specify a data type for a language like Tcl,
for which
.bi "everything is a string"
is such a firmly held principle.
This is an integrity check on the values that may be assigned to
an attribute.
For example,
the
.b WashDuration
attribute is declared as an \fCint\fP.
This shows the intent to store numbers in the attribute and potentially to
perform arithmetic operations on the attribute values.
Consequently,
the
.b WashDuration
attribute is not allowed to be set to a value that cannot reasonable be
converted into an integer (by the usual Tcl rules).
This prevents attributes being set to values that have no possibility
of being correct.
More detailed control of subsets of integer values is also available.
Of course,
\fCstring\fP is the universal Tcl type and any attribute whose type is
declared as \fCstring\fP can be set to anything.
.lp
All classes must have one or more identifiers.
An identifier consists of one or more attributes whose values must be
unique.
For the case of
.b "Washing Cycle" ,
there is one identifier and that identifier consists on only one attribute,
as indicated by the \fC-id 1\fP option on the
.b CycleType
attribute\**.
.(f
\** If there were multiple attributes in the first identifier,
then the \fC-id 1\fP option would be given for each attribute in the
identifier.
.)f
This option corresponds to the
.b {I}
notation on the model graphic.
.lp
The two classes in the model also participate in an
.i association
named,
.b R4 .
Associations define the way that class instances are related to each other.
The model graphic indicates the multiplicity and conditionality of
the relationship using standard UML annotations and indicates the
semantics of the relationship using verb phrases.
The \fCassociation\fP command captures the name of the association,
the participating classes and the multiplicity and conditionality.
.nr df \n[LF]
.(b L
association R4 WashingMachine 0..*--1 WashingCycle
.)b
.lp
There is a direct correspondence between the
\fCassociation\fP command arguments and the graphical notion for the
association.
.nr df 0
.lp
Associations are realized by having attributes of one class refer to
identifying attributes of another class.
By
.i "refer to" ,
we mean that the
.i value
of the referring attribute is equal to the
.i value
of the referenced identifying attribute.
Readers familiar with relational database management systems will
recognize this concept as similar to a
.i "foreign key constraint"
found in SQL.
The model graphic shows how the relationship is realized by the
.b {R4}
annotation.
The
.b "Cycle Type"
attribute in the
.b "Washing Machine"
class is annotated to indicate its role in realizing the
.b R4
relationship.
This shows up in the definition of the
.b WashingMachine
class shown below.
.nr df \n[LF]
.(b L
class WashingMachine {
    attribute MachineID string -id 1
    attribute CycleType string
    reference R4 WashingCycle -link CycleType

    # Other aspects of the Washing Machine class
    # ...
}
.)b
.nr df 0
The \fCreference\fP command states that the
.b WashingMachine
class realizes the association,
.b R4 ,
to the
.b WashingCycle
class by linking the value of the
.b CycleType
attribute in
.b WashingMachine
to be the same value as the
.b CycleType
attribute for some instance in the
.b WashingCycle
class.
The rosea run time code insures that this invariant is not violated
and any attempt to do so results in the state of the program being
rolled back to a valid set of values.
.uh "Examples of Translating State Models"
.lp
Executable models sequence and coordinate processing by using
state models.
Below is a state model diagram for the
.b "Washing Machine"
class.
.(b L
\X'pdf: pdfpic wm-states.pdf -L 6.5i
.sp 6.2i
.)b
.lp
This diagram represents graphically how the washing machine washes clothes by
progressing through a series of states filling the clothes tub with water,
washing, draining, rinsing and spinning the tub to obtain clean clothes.
The transitions from one state to another are driven by the events
as shown on the labels of the arrows directed from one state to another.
We must be careful to distinguish state model events from Tcl events.
State model events are implemented using Tcl events but,
in this context,
we are referring to the model level concept of an event to a state model.
.lp
This is a
.pdfhref W -D http://en.wikipedia.org/wiki/Moore_machine Moore type
state model,
.i i.e. \&
each state is associated with an activity that is executed
upon entry into the state.
The initial state,
.b Stopped ,
is shown with the grayed out background.
The rosea configuration DSL supports directly declaring a state model.
This is done with the \fCstatemodel\fP command that is part
of a class definition.
Below the
.b WashingMachine
class is shown with its state model definition.
.nr df \n[LF]
.(l L
class WashingMachine {
    attribute MachineID string -id 1
    attribute CycleType string
    reference R4 WashingCycle -link CycleType

    statemodel {
        initialstate Stopped

        state Stopped {} {
            # Stop spinning -- wash complete.
        }
        transition Stopped - Start -> FillingToWash
        state FillingToWash {} {
            # Fill the tub with wash water.
        }
        transition FillingToWash - Full -> Washing
        state Washing {} {
            # Agitate the tub to wash.
        }
        transition Washing - Done -> DrainingWash
        state DrainingWash {} {
            # Stop washing and drain
            # the dirty wash water.
        }
        transition DrainingWash - Empty -> FillingToRinse
        state FillingToRinse {} {
            # Fill the tub with rinse water.
        }
        transition FillingToRinse - Full -> Rinsing
        state Rinsing {} {
            # Agitate the tub to rinse.
        }
        transition Rinsing - Done -> DrainingRinse
        state DrainingRinse {} {
            # Stop rinsing and drain
            # the rinse water.
        }
        transition DrainingRinse - Empty -> Spinning
        state Spinning {} {
            # Spin out excess water.
        }
        transition Spinning - Done -> Stopped
    }
}
.)l
.nr df 0
.lp
The \fCstate\fP command specifies the name of the state,
any arguments to the state and the Tcl script to be executed
when the state is entered.
The interface to the \fCstate\fP command is the same as the
\fCproc\fP command\**.
.(f
\** Indeed state activities are realized as Tcl proc's.
.)f
We do not show any of the processing above, only the structural
aspects of the state model.
We will show the processing for one state below.
.lp
The \fCtransition\fP command defines which new state is entered
when the state machine is in some starting state and an event is received.
Transitions and states may be defined in any order.
The order we have presented above emphasizes the state with its outgoing
transitions and the simple circular nature of this particular state
model.
.uh "Examples of Translating State Activities"
.lp
Each state has an activity associated with it that is a Tcl script
which is run when the state is entered.
Rosea provides a number of commands that state activities may invoke
to accomplish required model level actions.
Since the state activity is also a Tcl script,
it has access to all the functionality provided by the Tcl language itself.
We will not detail all the model level actions a state activity may perform,
but two common ones are to navigate a relationship and to signal
an event.
The graphic below shows a portion of the state model for the
.b "Washing Machine"
class, complete with the action specification of what happens when
the state is entered.
The
.b Washing
state of the
.b "Washing Machine"
class is entered by receiving the
.b Full
event and remains in that state until the
.b Done
event is received.
The processing is expressed in an
.pdfhref W -D https://xtuml.org/learn/action-language-tutorial/ action language
that describes what the state activity must accomplish.
.(b L
\X'pdf: pdfpic wm-washing-state.pdf -C 3.5i 0 8.5i
.sp 4.1i
.)b
.lp
This action language description of the processing is translated into Tcl as
follows.
.nr df \n[LF]
.(l L
state Washing {} {
    # Agitate the tub to wash.

    # select one ct related by self->R1[CT]
    set ct [findRelated $self ~R1]
    # signal Agitate to ct
    signal $ct Agitate
    # select one wc related by self->R4[WC]
    set wc [findRelated $self R4]
    # signal Done to self at wc.WashDuration
    delaysignal [readAttribute $wc WashDuration] $self Done
}
.)l
.nr df 0
.lp
Each state activity has an implicitly defined variable named \fCself\fP.
This variable holds a reference to the particular class instance
for which the state activity is executing.
The \fCfindRelated\fP command traverses a relationship and
finds all the class instances that are related.
The \fCsignal\fP command signals an event to a set of class instances.
The \fCdelaysignal\fP command signals an event at a given time in the
future.
The \fCreadAttribute\fP command obtains the values of one or more attributes
given a reference to a class instance.
For the Washing state activity,
we have translated the action language into Tcl code in its most
straight forward way.
The code could be refined further to remove some, strictly speaking,
unnecessary variable assignments by using common Tcl command nesting.
.lp
For the
.b Washing
state,
the related
.b "Clothes Tub"
instance\**
.(f
\** The
.b "Clothes Tub"
class and the
.b R1
association do not appear on the class model fragment shown above but
are part of the complete example.
.)f
is signaled with the
.b Agitate
event to start the tub agitating the clothes.
The agitation will continue for the length of time specified
in the related
.b "Washing Cycle"
instance as given by the
.b "Wash Duration"
attribute.
From the fragment of the model graphic we saw above,
we know that traversing relationship,
.b R4 ,
will yield exactly one related instance of
.b "Washing Cycle"
because of the multiplicity and conditionality of the
.b R4
relationship on the
.b "Washing Cycle"
side (\c
.i i.e. \&
that side is marked as
.b 1 ")."
The
.b Done
event is signaled to ourselves when the amount of time held in the
.b "Wash Duration"
attribute has elapsed.
When the
.b Done
event is received,
the instance transitions to another state and performs the processing
required to stop washing and continue the other steps of obtaining
clean clothes.
.uh "Run Time Processing"
.lp
Interacting state machines play an important role in sequencing
and coordinating the processing of a domain.
Events are signaled to class instances and their state machine receives the
events, transitioning to a new state and executing the activity associated
with that new state\**.
.(f
\** The new state may be the same as the current state and, if so,
the state activity is executed again.
.)f
Rosea uses the Tcl event loop to implement state machine events
and state activities are executed as an \fCafter\fP command callback.
.lp
Typically,
execution unfolds when an event is delivered to a domain from an outside source
and a cascade of state activities are run as a result of the state transition
triggered by the event.
State machines signal other state machines which causes the
.i "thread of control"
to continue as the signaled events are received by class instances.
Eventually,
the result of the original event is fully realized,
state machines stop signaling further events
and the domain waits to receive the next external stimulus.
Rosea executes the thread of control as a
.i transaction
on the underlying data model.
At the end of the transaction,
all the integrity constraints represented in the class model
as relationships are checked.
If the data model is not consistent,
an error is thrown and the data is rolled back to its previous
set of values.
In this way,
the domain sequences from one consistent data state to another
as a result of executing threads of control started by
events arriving from the environment of the domain.
The transaction associated with a thread of control is transparent
to the executing domain.
Rosea manages the transaction boundaries and insures the domain sequences in
time from one consistent set of data values to another.
.uh "The Tcl View of Rosea"
.lp
The purpose of the rosea package is to provide a convenient means
to implement executable model semantics in the Tcl language.
We have seen how an executable model of a domain may be expressed
in the domain specific language provided by rosea.
In this section,
we discuss some of the details of how model semantics are mapped onto Tcl
language constructs.
In the end,
we are building Tcl programs regardless of the view of those programs
provided by the DSL.
.lp
From the Tcl perspective,
rosea is an extension that provides an object system.
However, the object system provided by rosea is based on the relational
model of data rather than the more conventional concepts of type hierarchy and
run time polymorphic function dispatch.
Since version 8.6,
Tcl has had core support for object orientation.
The core has basic object commands intended to provide the
foundation upon which full featured object systems may be built,
.i e.g. \&
IncrTcl.
In previous releases,
Tcl supported the concept of
.i "namespace ensembles" .
A namespace ensemble provides the means to map subcommand names
onto command prefixes.
Using this, one may construct object oriented commands
in Tcl via namespace ensembles.
Rosea uses namespace ensembles extensively.
Each domain is realized as a namespace ensemble command for its domain
operations and has a namespace defined whose name matches that of the domain.
In the domain namespace,
each class of the domain will have an ensemble command
with subcommands being defined for all the class based operations.
.lp
For example,
the \fCwmctrl\fP domain will be realized as an ensemble command
named \fC::wmctrl\fP\** and there will be a \fC::wmctrl\fP namespace
created.
In the \fC::wmctrl\fP namespace,
a \fC::wmctrl::WashingMachine\fP ensemble command is created
along with ensemble commands for all the classes in the domain.
.(f
\** By default domains are placed in the global namespace,
but may be placed in any desired namespace.
We'll use the global namespace here for simplicity.
.)f
.lp
The namespace ensemble approach can provide commands that follow the
typical Tcl object oriented approach,
but we still must deal with how to store instance data.
One approach for simple object systems using namespace ensembles is to store
the instance data in a dictionary held in a namespace variable.
In this strategy,
the dictionary key is some identifier of the instance and the dictionary
value holds the instance data.
That instance data can then be yet another dictionary with
instance attribute names as the keys of the nested dictionary.
.lp
In rosea,
TclRAL is used as the data storage mechanism.
TclRAL is a \*(lqC\*(rq based extension that provides native Tcl
data types for relation and tuple values.
In addition, TclRAL provides a relation variable concept along with
relation variable referential constraints.
Rosea maps each model class to a TclRAL relvar and class instances
are represented as tuples of the relation value stored in the relvar.
Each model level association or generalization relationship is mapped to a
TclRAL relvar constraint.

Fundamentally,
the executable models are based on relational data model concepts and TclRAL
was designed specifically to match the semantics of executable models.
Much of the underlying ability of rosea to navigate relationships
and insure data integrity derives directly from the use of TclRAL to
store class data.
This includes the transactional nature of the thread of control discussed
above.
.lp
The diagram below shows how the Tcl components of a domain are organized.
.(b L
.PS
right
A: box width 1.35 "::<domain name>"
move
move
B: box width 1.25 "<class relvars>"
C: arrow from A.e to B.w

move to C.c
down
D: line lineht 0.25
right
move
B: box width 1.6 "<class state relvars>"
arrow from D.s to B.w

move to D.s
down
D: line lineht 0.25
right
move
B: ellipse width 1.6 "<class ensemble" "commands>"
arrow from D.s to B.w

move to D.s
down
D: line lineht 0.25
right
move
B: ellipse width 2.2 "<relationship ensemble" "commands>"
arrow from D.s to B.w

move to D.s
down
D: line lineht 0.25
right
move
B: box width 1.0 "<run time" "data relvars>"
arrow from D.s to B.w

move to D.s
down
D: line lineht 0.25
right
move
F: B: box width 1.0 "::<class 1>"
arrow from D.s to B.w

move to D.s
down
D: line lineht 0.25
right
move
B: box width 1.0 "::<class ...>"
arrow from D.s to B.w

move to F.e
right
move
move
A: box width 1.0 "::__Activity"
C: arrow from F.e to A.w

move to C.c
down
D: line lineht 0.25
right
move
B: ellipse width 1.5 "::<class op procs>"
arrow from D.s to B.w

move to D.s
down
D: line lineht 0.25
right
move
B: ellipse width 1.5 "::<inst op procs>"
arrow from D.s to B.w

move to A.e
right
move
B: ellipse width 1.25 "state activity" "procs"
arrow from A.e to B.w

.PE
.)b
.lp
It should be noted and readers may have recognized that there is no
concept of inheritance in the object system presented by rosea.
There is no substantial notion of inheritance in the relational model of data
and the emphasis here is on the deep ties that the relational view
has to predicate logic and set theory.
Executable class models do have the notion of a generalization relationship,
but this actually represents a disjoint union\** of the class instances rather
than an inheritance of data type structure.
.(f
\** The disjoint union being complementary to the Cartesian product which
is the conceptual basis for associations.
.)f
For some,
the fact that the object orientation provided by rosea is not based on
type hierarchy will be disconcerting.
However,
object systems based on concepts other than type hierarchy can be useful in
some contexts,
.i e.g. \&
the \fCsnit\fP object system
is based heavily on delegation concepts.
.uh Conclusions
.lp
Rosea provides a means to translate executable software models
into a Tcl program.
It accomplishes this by using a domain specific language
to define the configuration of a translated model.
The DSL statements have a direct correspondence with the model graphic.
Model level concepts are mapped onto Tcl language constructs
by the generator and run time components.
The primary organization of the translation is as an object system based
on namespace ensembles for the commands and using TclRAL for data storage.
The use of TclRAL is significant as it provides all the relational
algebraic operations for operating on instance data as well as the
integrity constraints implied by the class model relationships.
.uh Resources
.pdfhref M -N resources
.lp
The rosea package is freely available and licensed under the same
license as Tcl itself.
The source code is available in a
.pdfhref W -D http://repos.modelrealization.com/cgi-bin/fossil/mrtools fossil repository
located at:
.(c
http://repos.modelrealization.com/cgi-bin/fossil/mrtools
.)c
.lp
This repository is
.pdfhref W -D http://chiselapp.com/user/mangoa01/repository/mrtools mirrored
to:
.(c
http://chiselapp.com/user/mangoa01/repository/mrtools
.)c
.sp
.lp
The rosea package was written in the
.pdfhref W -D http://www.literateprogramming.com literate programming style.
The
.pdfhref W -D http://repos.modelrealization.com/cgi-bin/fossil/mrtools/doc/trunk/rosea/doc/rosea.pdf literate program document
contains all of the design,
code, test cases and the example fragment used here is fully worked out.
There is also
.pdfhref W -D http://repos.modelrealization.com/cgi-bin/fossil/mrtools/doc/trunk/rosea/doc/rosea.html reference manual documentation
available.
