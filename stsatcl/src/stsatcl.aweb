// vim:syntax=asciidoc:
= stsatcl - An Software Architecture for Tcl

== Introduction

By analogy to
http://repos.modelrealization.com/cgi-bin/fossil/tcl-cm3/[STSA],
which is a software architecture for micro-controller
based implementations that are coded in ``C'',
the *stsatcl* package is a software architecture for Tcl based
applications.

The concepts here are similar to those used by +pycca+.
Specifically we are defining an implementation based scheme
that is to be used as the target for translating
XUML models into Tcl.

There are, of course, many differences in the way a ``C'' base
architecture and a Tcl based on will handle the implementation
aspects.
For example,
STSA uses pointers to traverse relationships.
There are no such things in Tcl.
However,
command names of TclOO objects can be used to serve the same purpose.
In STSA, ``C'' data types must be given for attributes.
In the Tcl world, everything is a string and Tcl variables can hold
data of any type.
Therefore type annotation is not necessary.
State models in Tcl have already been done in many ways.
Here we will follow the pattern of the *oomoore* package and
indeed pull large amounts of its code over.

=== Document Conventions

The source for this document conforms to
http://http://www.methods.co.nz/asciidoc/[asciidoc] syntax.
This document is also a
http://www.literateprogramming.com/[literate program].
The source code for the implementation is included here and
the build process extracts the source that is then given to the
Tcl interpreter.
This process is known as __tangle__ing.
The program,
http://repos.modelrealization.com/cgi-bin/fossil/tcl-cm3/[+atangle+],
is available to extract source code from the document source
and the +asciidoc+ tool chain can be used to produce a variety
of different output formats, although PDF is the preferred choice.

The goal of a literate program is to explain the logic of the
program in an order and fashion that facilitates understanding the
program details and then _tangle_ the resulting source to obtain
the Tcl code in an order suitable for the Tcl interpreter.
Briefly,
code is extracted from the literate source by
defining a series of _chunks_ that contain the source.
A chunk is _defined_ by including its name as:

........................
<<chunk name>>=
........................

The trailing +=+ sign denotes a definition.
A chunk defintion ends at the end of the source block
or at the beginning of another chunk definition.
A chunk may be _referenced_ from within a chunk definition by
using its name without the trailing +=+ sign, as in:

........................
<<chunk definition>>=
    <<chunk reference>>
........................

Chunk names are arbitrary.
Multiple definitions with the same name are simply concatenated in the order
they are encountered.
There are one or more _root chunks_ which form the conceptual tree
for the source files that are contained in the literate source.
By convention, root chunks are named the same as the file name to
which they will be tangled.
Tangling is then the operation of starting at a root chunk and
recursively substituting the definition for the chunk references that
are encountered.

For readers that are not familiar with the literate style and
have become adept at reading source code directly,
the chunks definitions and reordering
provided by the tangle operation can be a bit disconcerting at first.
You can, of course, examine the tangled source output,
but if you read the program as a document,
you will have to trust that the
author managed to arrange the chunk definitions and references in
a manner so that the tangled output is acceptable to the Tcl interpreter.

We will actually include root chunks for the following items:

* Tcl source for the package.
* Test cases that run under +tcltest+.
* The +pkgIndex.tcl+ package index file.

Since we also include test cases in this document,
the usual order will be to show a *method* and follow it by
the tests that exercise the method.
From a development and maintenance point of view,
is is beneficial to keep the code and tests lexically near each other.
However, you may wish to skip over the testing to keep the narrative
flow more consistent.

In addition to the explanation and code for the +stsatcl+ package,
we will also include an example and endeavor to show how an XUML model
is translated into a Tcl implementation using this package.
The example will, of necessity, be small and somewhat contrived to
insure that all the features of the package are used.
The use of small, contrived examples is always unfortunate but
this document is large enough with just the package and its test cases
that any _real-world_ example would over burden the entire undertaking.
Realistic models and their translation easily become books in themselves.

=== Design Concepts

The STSA Tcl package is based on TclOO.
The translation of XUML model classes to TclOO class is,
to a first approximation, one-to-one.
To support the XUML execution model,
we will create a meta-class called, +STSAClass+.
Instances of +STSAClass+ will correspond to the XUML classes
of the translation.
The constructor of +STSAClass+ will allow for the appropriate
configuration of the resulting XUML implemenation class.
Instances can then be created to populate the translation.
This is shown in the diagram below.

["ditaa",options="no-shadows",title="STSA Tcl Block Diagram"]
-----------------------------------------------------------------------------
+---------------+
|  STSA Class   |
|  o meta-class |
+-------+-------+
        |
        | create
        V
+-------+-------+
|  XUML Class   |
+-------+-------+
        |
        | create/new
        V
+-------+-------+
|  XMUL Object  |
+-------+-------+
-----------------------------------------------------------------------------

This package follows the common convention of defining a small
domain specific language (DSL) that is used in the construction
of objects to specify the required configuration.
In this case we are constructing classes that have STSA
qualities, namely:

* Definition of attributes.
* Definition of relationships.
* Definition of state models.

== STSA Class

(((class,STSA Class)))

The *stsatcl* package contains the +STSAClass+ class.
+STSAClass+ is actually a meta-class, _i.e._ it is a class
for defining other classes.

[source,tcl]
----
<<stsatcl commands>>=
::oo::class create ::stsatcl::STSAClass {
    superclass ::oo::class      ; # <1>
    unexport new                ; # <2>
    <<stsaclass configuration>>
}
----
<1> Deriving from +::oo::class+ make us a meta-class.
<2> We insist that all STSA classes be named commands.

=== Constructor

The idea is for the constructor of the +STSAClass+ to take a script
that consists of configuration commands.
Those commands will validate and store away the information.
Using the configuation information,
a new class is created with the properties described in the construction
configuration script.
Objects created from the class then have all the characteristics specified
in the configuration script.

(((method,STSAClass,constructor)))

[source,tcl]
----
<<stsaclass configuration>>=
constructor {config} {
    <<stsaclass constructor>>
}
----

=== Configuration DSL

The configuration language is really just a series of commands
that are implemented as methods of the class.
Technically,
the design is to use the +my eval+ command to evaluate the
configuration script in the context of the class being created.
The commands in the configuration script need to resolve correctly
in that context.
We would like _not_ to be forced to prefix the DSL commands with
the +my+ command as that clutters the expressiveness of the DSL.
The +oo::util+ package in +tcllib+ provides the +link+ command to make
the DSL command definitions easier.

[source,tcl]
----
<<required packages>>=
package require oo::util
# The mixin of "oo::class.Delegate", interacts badly with meta-classes that
# have constructor arguments. So we eliminate the oo::class mixins here. This
# will mean that you can't define class methods.
::oo::define oo::class self mixin
----

[source,tcl]
----
<<stsaclass constructor>>=
link\
    {attribute Attribute}\
    {reference Reference}\
    {partition Partition}\
    {classop ClassOp}\
    {instop InstOp}\
    {polymorphic Polymorphic}\
    {statemodel Statemodel}
----

So the +link+ command arranges, for example, that invoking +attribute+
in the namespace of the class being created actually
invokes the +Attribute+ method of the +STSAClass+ class.
The trickery to accomplish can be found in the source to the +oo::util+
package.
Here we follow the convention that the methods implementing
the DSL commands are unexported and the corresponding linked names
begin with lower case.

So there will be seven commands in the configuration DSL.
The +statemodel+ command will itself take another configuration
script to describe state and transition
and that will be described in a section of its own.
Each of the top level commands is described in a section below
and the method that implements the command is given.

The methods associated with the DSL follow the same general pattern.
They store the data given in the command arguments, possibly with some
validation, into data variable associated with the created class.
That data is then available to the class methods to implement
the semantics of XUML attribute access, relationship navigation
and state machine dispatch.
So it is very much a data-driven approach with the DSL commands
supplying the values of the data that determine the specific semantics
that are needed.

==== Attribute Method

The +attribute+ command is used to define the attributes of a XUML class.
It is invoked as:

.................
attribute attr-value-pair1 attr-value-pair2 ...
.................

The command may be invoked an arbitary number of times in the
configuration script.
Each +attr-value-pairN+ argument is treated as a one or two element list.
the first element gives the name of the attribute.
If the second element of the pair is present,
then it gives the default value for the attribute.
If the second element is missing then the default value is the empty string.

When objects of the resulting class are created,
the attributes will be present and have their default values after
construction.
We will also see that the resulting constructor also allows us to
override the defaults at creation time.

Attribute names form a set and so duplicates are not allowed.
We also do not allow the empty string as an attribute name on
the rational that the empty string cannot convey any semantics.
Attempts to define the empty string as an attribute name or
to define a duplicate attribute name cause an error to be thrown.

Attribute names will be stored away in an array.
The index to the array will be the attribute name itself and
the value of the array element will be the default value of the attribute.

[source,tcl]
----
<<stsaclass constructor>>=
my variable attrInfo
array set attrInfo {}
----

The implementation of the +Attribute+ method consists of an
interation over the arguments, validating the attribute names
and assigning the default values into the +attrInfo+ array.

(((method,STSAClass,Attribute)))

[source,tcl]
----
<<stsaclass configuration>>=
method Attribute {args} {
    my variable attrInfo

    foreach attr $args {
        lassign $attr name default
        if {$name eq {}} {
            set msg "invalid attribute name, \"$name\""
            throw [list STSACLASS BADATTRIBUTENAME $msg] $msg   ; # <1>
        }
        if {![info exists attrInfo($name)]} {
            set attrInfo($name) $default
        } else {
            set msg "duplicate attribute name, \"$name\""
            throw [list STSACLASS DUPATTRIBUTENAME $msg] $msg
        }
    }
}
----
<1> We will consistently use the +throw+ command to produce errors
in an effort to insure that reasonable error codes are produced.

==== Reference Method

In XUML,
a relationship between two classes is conceptually bi-directional.
The relationship defines a function (or partial function) between
the two instance sets of the classes and the idea is firmly grounded
in referential integrity ideas from the
http://en.wikipedia.org/wiki/Relational_model[Relational Model of Data].

In the implementation world,
a relationship is decomposed into _links_.
A link is uni-directional
and is included in a class if any of the class processing requires
_navigating_ the link to obtain instances of the related class.

In this architecture,
linkage is achieved by storing the command name of the object.
We will make sure to store the fully qualified command name
even if we take unqualified names as arguments.
So one aspect of linkage is to perform the object command name
qualification.

[source,tcl]
----
<<stsaclass configuration>>=
method Qualify {cmdname {level 4}} {
    tailcall expr {[string range $cmdname 0 1] ne "::" ?\
        [string trimright [uplevel $level namespace current] :]::$cmdname :\
        $cmdname}
}
----

XUML relationships also carry the notion of multiplicity and
conditionality.
So a relationship may navigate to multiple instances in one direction
and may also allow that no instances are related.
We need a way to specify whether a relationship is _singular_ or _multiple_
and whether it is _conditional_.

Just as for attributes,
we hold the reference information in an array.
The array index is the name of the linkage
and the array element is a dictionary.
We will see the structure of the dictionary below.

[source,tcl]
----
<<stsaclass constructor>>=
my variable refInfo
array set refInfo {}
----

(((method,STSAClass,Reference)))

The +reference+ command is invoked in the XUML class configuration
script to define a linkage where one class refers to another.
The invocation synopsis is:

................
reference rname type 
................


[source,tcl]
----
<<stsaclass configuration>>=
method Reference {rname type dstclass} {
    my variable refInfo
    if {[info exists refInfo($rname)]} {
        error "linkage, \"$rname\", already exists"
    }
    set dstclass [my Qualify $dstclass]

    if {![regexp -- {\A-(>{1,2})(c?)\Z} $type match mult cond]} {
        error "unknown reference type spec, \"$type\""
    }
    set mult [string equal $mult ">>"]
    set cond [string equal $cond "c"]

    set refInfo($rname) [dict create\
        type reference\
        dest $dstclass\
        mult $mult\
        cond $cond\
    ]
}
----

[source,tcl]
----
<<stsaclass configuration>>=
method Partition {rname args} {
    my variable refInfo
    if {[info exists refInfo($rname)]} {
        error "linkage, \"$rname\", already exists"
    }
    if {[llength $args] < 2} {
        error "partition, \"$rname\", must have at least two subclasses"
    }

    set subs [list]
    foreach sub $args {
        if {[string range $sub 0 1] ne "::"} {
            set sub\
                [string trimright [uplevel 3 namespace current] :]::$sub
        }
        lappend subs $sub
    }
    set refInfo($rname) [dict create\
        type partition\
        subclasses $subs\
    ]
}
----

[source,tcl]
----
<<stsaclass constructor>>=
my eval $config
----

[source,tcl]
----
<<stsaclass constructor>>=
define [self] variable {*}[array names attrInfo]
----

[source,tcl]
----
<<stsaclass constructor>>=
define [self] constructor {args} {
    classvariable attrInfo
    foreach attrName [array names attrInfo] {
        set $attrName $attrInfo($attrName)
    }

    classvariable refInfo
    foreach refName [array names refInfo] {
        my variable $refName
        set $refName {}
    }
}
----

[source,tcl]
----
<<constructor tests>>=
test constructor-1.0 {
    define simple reference
} -setup {
} -cleanup {
    test1 destroy
} -body {
    stsatcl STSAClass create test1 {
        reference R1 -> foo
    }
    return [set [info object namespace test1]::refInfo(R1)]
} -result {type reference dest ::stsatcl::test::foo mult 0 cond 0}

test constructor-2.0 {
    define reference with bad syntax
} -setup {
} -cleanup {
} -body {
    stsatcl STSAClass create test2 {
        reference R1 ->>x foo
    }
} -result {unknown reference type spec, "->>x"} -returnCodes error

test constructor-3.0 {
    configure attribute
} -setup {
} -cleanup {
    test3 destroy
} -body {
    stsatcl STSAClass create test3 {
        attribute Count {Maximum 20}
    }
    return [set [info object namespace test3]::attrInfo(Maximum)]
} -result {20}

test constructor-4.0 {
    define partition
} -setup {
    ::stsatcl STSAClass create super {
        partition R1 sub1 sub2
    }

    ::stsatcl STSAClass create sub1 {
        reference R1 -> super
    }

    ::stsatcl STSAClass create sub2 {
        reference R1 -> super
    }
} -cleanup {
    super destroy
    sub1 destroy
    sub2 destroy
} -body {
    super create sup1
    return [set [info object namespace super]::refInfo(R1)]
} -result {type partition subclasses {::stsatcl::test::sub1 ::stsatcl::test::sub2}}

test constructor-5.0 {
    create an instance
} -setup {
    stsatcl STSAClass create test5 {
        attribute Count {Maximum 20}
    }
} -cleanup {
    test5 destroy
} -body {
    test5 create inst5
    set [info object namespace inst5]::Maximum
} -result {20}
----

== Access to Attributes

[source,tcl]
----
<<stsaclass constructor>>=
define [self] method readAttribute {attribute} {
    return [set $attribute]
}
----

[source,tcl]
----
<<exported tests>>=
test readAttribute-1.0 {
    read attribute value
} -setup {
    stsatcl STSAClass create test-ra1 {
        attribute Count {Maximum 27}
    }
} -cleanup {
    test-ra1 destroy
} -body {
    test-ra1 create inst1-ra1
    inst1-ra1 readAttribute Maximum
} -result {27}
----

[source,tcl]
----
<<stsaclass constructor>>=
define [self] method updateAttribute {attribute value} {
    return [set $attribute $value]
}
----

[source,tcl]
----
<<exported tests>>=
test updateAttribute-1.0 {
    update attribute value
} -setup {
    stsatcl STSAClass create test-ra2 {
        attribute Count {Maximum 27}
    }
} -cleanup {
    test-ra2 destroy
} -body {
    test-ra2 create inst-ra2
    inst-ra2 updateAttribute Count 33
    inst-ra2 readAttribute Count
} -result {33}
----

== Relationship Navigation

[source,tcl]
----
<<required packages>>=
package require struct::set
----

[source,tcl]
----
<<stsaclass constructor>>=
define [self] method link {rname obj} {
    set obj [my ResolveObj $obj]
    classvariable refInfo
    my CheckRelName $rname
    my CheckReferenceObj $rname $obj

    my variable $rname
    switch -exact -- [dict get $refInfo($rname) type] {
        reference {
            if {[dict get $refInfo($rname) mult]} {
                ::struct::set include $rname $obj
            } else {
                set $rname $obj
            }
        }
        partition {
            set $rname $obj
        }
        default {
            error "unknown linkage type, \"[dict get $refInfo($rname) type]\""
        }
    }
    return $obj
}
----

[source,tcl]
----
<<exported tests>>=
test link-1.0 {
    link across singular reference
} -setup {
    stsatcl STSAClass create test-lt1 {
        reference R1 -> test-lt2
    }
    stsatcl STSAClass create test-lt2 {
        reference R1 -> test-lt1
    }
} -cleanup {
    test-lt1 destroy
    test-lt2 destroy
} -body {
    test-lt1 create lt1
    test-lt2 create lt2
    lt1 link R1 lt2
} -result {::stsatcl::test::lt2}
----

[source,tcl]
----
<<exported tests>>=
test link-2.0 {
    link across multiple reference
} -setup {
    stsatcl STSAClass create test-lt1 {
        reference R2 ->> test-lt2
    }
    stsatcl STSAClass create test-lt2 {
        reference R2 -> test-lt1
    }
} -cleanup {
    test-lt1 destroy
    test-lt2 destroy
} -body {
    test-lt1 create inst1
    test-lt2 create inst2
    test-lt2 create inst3
    inst1 link R2 inst2
    inst1 link R2 inst3
    llength [set [info object namespace inst1]::R2]
} -result {2}
----

[source,tcl]
----
<<exported tests>>=
test link-2.1 {
    link across multiple reference, duplicate references
} -setup {
    stsatcl STSAClass create test-lt1 {
        reference R2 ->> test-lt2
    }
    stsatcl STSAClass create test-lt2 {
        reference R2 -> test-lt1
    }
} -cleanup {
    test-lt1 destroy
    test-lt2 destroy
} -body {
    test-lt1 create inst1
    test-lt2 create inst2
    inst1 link R2 inst2
    inst1 link R2 inst2
    llength [set [info object namespace inst1]::R2]
} -result {1}
----

[source,tcl]
----
<<exported tests>>=
test link-3.0 {
    link across partition
} -setup {
    ::stsatcl STSAClass create super {
        partition R3 sub1 sub2
    }

    ::stsatcl STSAClass create sub1 {
        reference R3 -> super
    }

    ::stsatcl STSAClass create sub2 {
        reference R3 -> super
    }
} -cleanup {
    super destroy
    sub1 destroy
    sub2 destroy
} -body {
    super create sup1
    sub1 create inst1
    sup1 link R3 inst1
    llength [set [info object namespace sup1]::R3]
} -result {1}
----

[source,tcl]
----
<<stsaclass constructor>>=
define [self] method unlink {rname obj} {
    set obj [my ResolveObj $obj]
    classvariable refInfo
    my CheckRelName $rname
    my CheckReferenceObj $rname $obj

    my variable $rname
    switch -exact -- [dict get $refInfo($rname) type] {
        reference {
            if {[dict get $refInfo($rname) mult]} {
                if {[::struct::set contains [set $rname] $obj]} {
                    ::struct::set exclude $rname $obj
                } else {
                    error "object, \"$obj\", is not linked to \"$rname\""
                }
            } else {
                if {$obj eq [set $rname]} {
                    set $rname {}
                } else {
                    error "\"$obj\" is not linked to \"$rname\",\
                            \"[set $rname]\" is"
                }
            }
        }
        partition {
            if {$obj eq [set $rname]} {
                set $rname {}
            } else {
                error "\"$obj\" is not linked to \"$rname\",\
                        \"[set $rname]\" is"
            }
        }
        default {
            error "unknown linkage type, \"[dict get $refInfo($rname) type]\""
        }
    }

    return
}
----

[source,tcl]
----
<<exported tests>>=
test unlink-1.0 {
    unlink across singular reference
} -setup {
    stsatcl STSAClass create test-ul1 {
        reference R1 ->c test-ul2
    }
    stsatcl STSAClass create test-ul2 {
        reference R1 -> test-ul1
    }
} -cleanup {
    test-ul1 destroy
    test-ul2 destroy
} -body {
    test-ul1 create inst-ul1
    test-ul2 create inst-ul2
    inst-ul1 link R1 inst-ul2
    inst-ul1 unlink R1 inst-ul2
    set [info object namespace inst-ul2]::R1
} -result {}
----

[source,tcl]
----
<<exported tests>>=
test unlink-2.0 {
    unlink across multiple reference
} -setup {
    stsatcl STSAClass create test-ul3 {
        reference R1 ->> test-ul4
    }
    stsatcl STSAClass create test-ul4 {
        reference R1 -> test-ul3
    }
} -cleanup {
    test-ul3 destroy
    test-ul4 destroy
} -body {
    test-ul3 create inst1
    test-ul4 create inst2
    test-ul4 create inst3

    inst1 link R1 inst2
    inst1 link R1 inst3
    inst1 unlink R1 inst2
    llength [info object namespace inst1]::R1
} -result {1}

test unlink-3.0 {
    unlink across partition
} -setup {
    ::stsatcl STSAClass create super {
        partition R3 sub1 sub2
    }

    ::stsatcl STSAClass create sub1 {
        reference R3 -> super
    }

    ::stsatcl STSAClass create sub2 {
        reference R3 -> super
    }
} -cleanup {
    super destroy
    sub1 destroy
    sub2 destroy
} -body {
    super create inst-super
    sub1 create inst-sub1
    inst-super link R3 inst-sub1
    inst-super unlink R3 inst-sub1
    set [info object namespace inst-super]::R3
} -result {}
----

[source,tcl]
----
<<stsaclass constructor>>=
define [self] method -> {rname args} {
    classvariable refInfo
    my CheckRelName $rname

    my variable $rname
    set relobjs [set $rname]

    switch -exact -- [dict get $refInfo($rname) type] {
        reference {
            if {![dict get $refInfo($rname) cond] && [llength $relobjs] == 0} {
                error "reference, \"$rname\", is unconditional, yet no\
                        instances were found"
            }
        }
        partition {
            if {$relobjs eq {}} {
                error "superclass partition, \"$rname\", is unconditional,\
                        yet no instances were found"
            }
            if {[llength $args] < 1} {
                error "partition navigation from supertype to subtype\
                        requires the destination subtype class"
            }

            set subclass [lindex $args 0]
            set args [lrange $args 1 end]

            set subclass [my ResolveObj $subclass]
            if {[llength [info class instances $subclass $relobjs]] == 0} {
                set relobjs [list]
            }
        }
        default {
            error "unknown linkage type, \"[dict get $refInfo($rname) type]\""
        }
    }

    if {[llength $args] != 0} {
        set related [list]
        foreach robj $relobjs {
            ::struct::set add related [$robj -> {*}$args]
        }
    } else {
        set related $relobjs
    }

    return [expr {[llength $related] < 2 ? [lindex $related 0] : $related}]
}
define [self] export ->
----

[source,tcl]
----
<<exported tests>>=
test reference-1.0 {
    traverse a singular relationship
} -setup {
    stsatcl STSAClass create rt1 {
        reference R1 -> rt2
    }
    stsatcl STSAClass create rt2 {
        reference R1 -> rt1
    }
} -cleanup {
    rt1 destroy
    rt2 destroy
} -body {
    rt1 create inst1
    rt2 create inst2
    inst1 link R1 inst2
    inst1 -> R1
} -result {::stsatcl::test::inst2}
----

[source,tcl]
----
<<exported tests>>=
test reference-1.1 {
    traverse many singular relationships
} -setup {
    stsatcl STSAClass create rt1 {
        reference R1 -> rt2
    }
    stsatcl STSAClass create rt2 {
        reference R1 -> rt1
    }
} -cleanup {
    rt1 destroy
    rt2 destroy
} -body {
    rt1 create inst1
    rt2 create inst2
    inst1 link R1 inst2
    inst2 link R1 inst1

    inst1 -> R1 R1
} -result {::stsatcl::test::inst1}
----

[source,tcl]
----
<<exported tests>>=
test reference-1.2 {
    traverse many singular relationships -- violate conditionality
} -setup {
    stsatcl STSAClass create rt1 {
        reference R1 -> rt2
    }
    stsatcl STSAClass create rt2 {
        reference R1 -> rt1
    }
} -cleanup {
    rt1 destroy
    rt2 destroy
} -body {
    rt1 create inst1
    rt2 create inst2
    inst1 link R1 inst2
    inst1 -> R1 R1
} -result {reference, "R1", is unconditional, yet no instances were found}\
  -returnCodes error
----

[source,tcl]
----
<<exported tests>>=
test reference-2.0 {
    traverse a multiple relationship
} -setup {
    stsatcl STSAClass create rt1 {
        reference R2 ->> rt2
    }
    stsatcl STSAClass create rt2 {
        reference R2 -> rt1
    }
} -cleanup {
    rt1 destroy
    rt2 destroy
} -body {
    rt1 create inst1
    rt2 create inst2
    rt2 create inst3
    inst1 link R2 inst2
    inst1 link R2 inst3
    inst1 -> R2
} -result {::stsatcl::test::inst2 ::stsatcl::test::inst3}
----

[source,tcl]
----
<<exported tests>>=
test reference-2.1 {
    traverse a multiple relationship, then a singular
} -setup {
    stsatcl STSAClass create rt1 {
        reference R2 ->> rt2
    }
    stsatcl STSAClass create rt2 {
        reference R2 -> rt1
    }
} -cleanup {
    rt1 destroy
    rt2 destroy
} -body {
    rt1 create inst1
    rt2 create inst2
    rt2 create inst3
    inst1 link R2 inst2
    inst1 link R2 inst3
    inst2 link R2 inst1
    inst3 link R2 inst1

    inst1 -> R2 R2
} -result {::stsatcl::test::inst1}
----

[source,tcl]
----
<<exported tests>>=
test reference-3.0 {
    traverse across partition
} -setup {
    ::stsatcl STSAClass create super {
        partition R3 sub1 sub2
    }

    ::stsatcl STSAClass create sub1 {
        reference R3 -> super
    }

    ::stsatcl STSAClass create sub2 {
        reference R3 -> super
    }
} -cleanup {
    super destroy
    sub1 destroy
    sub2 destroy
} -body {
    super create sup1
    sub1 create inst1

    sup1 link R3 inst1
    sup1 -> R3 sub1
} -result {::stsatcl::test::inst1}
----

[source,tcl]
----
<<exported tests>>=
if 0 {
test reference-3.1 {
    traverse across partition and single reference
} -setup {
    super create sup1
    sub2 create s2
    stsatcl::STSAClass create b1 {}
} -cleanup {
    sup1 destroy
    s2 destroy
    b1 destroy
} -body {
    sup1 link R1 s2
    s2 link R1 sup1
    s2 link R2 b1
    sup1 -> R1 sub2 R2
} -result {::stsatcl::test::b1}

test reference-3.2 {
    traverse across partition and single reference -- empty
} -setup {
    super create sup1
    sub1 create s1
} -cleanup {
    sup1 destroy
    s1 destroy
} -body {
    sup1 link R1 s1
    s1 link R1 sup1
    sup1 -> R1 sub2 R2
} -result {}
}
----

[source,tcl]
----
<<stsaclass constructor>>=
define [self] method CheckRelName {rname} {
    classvariable refInfo
    if {![info exists refInfo($rname)]} {
        error "unknown linkage, \"$rname\""
    }
}
----

[source,tcl]
----
<<stsaclass constructor>>=
define [self] method CheckReferenceObj {rname obj} {
    classvariable refInfo

    set objclass [info object class $obj]
    switch -exact -- [dict get $refInfo($rname) type] {
        reference {
            set destclass [dict get $refInfo($rname) dest]
            if {!($objclass eq $destclass ||\
                    $destclass in [info class superclasses $objclass])} {
                error "instance, \"$obj\", is not an instance of class,\
                        \"[dict get $refInfo($rname) dest]\""
            }
        }
        partition {
            set subclasses [dict get $refInfo($rname) subclasses]
            foreach subclass $subclasses {
                if {$objclass eq $subclass ||\
                    $subclass in [info class superclasses $objclass]} {
                    return
                }
            }
            error "instance, \"$obj\", is not an instance of any class,\
                    \"[join $subclasses {, }]\""
        }
        default {
            error "unknown linkage type, \"[dict get $refInfo($rname) type]\""
        }
    }
}
----

[source,tcl]
----
<<stsaclass constructor>>=
define [self] method ResolveObj {obj} {
    if {[string range $obj 0 1] ne "::"} {
        set obj\
            [string trimright [uplevel 2 namespace current] :]::$obj
    }
    return $obj
}
----

== Code Organization

=== Source Code

[source,tcl]
----
<<stsatcl.tcl>>=
# DO NOT EDIT THIS FILE!
# THIS FILE IS AUTOMATICALLY GENERATED FROM A LITERATE PROGRAM SOURCE FILE.
#
# Copyright 2014, InCube Labs, LLC.
# All rights reserved.  This file contains unpublished work that is
# confidential and proprietary to InCube Labs.  This document may not, in
# whole or in part, be duplicated, disclosed or used for any purposes,
# whatsoever, without written permission from InCube Labs.
#

package require Tcl 8.6
package require logger

<<required packages>>

namespace eval ::stsatcl {
    namespace export STSAClass
    namespace ensemble create

    variable version 1.0
}

<<stsatcl commands>>

package provide stsatcl $::stsatcl::version
----

=== Unit Tests

[source,tcl]
----
<<stsatcl.test>>=
# DO NOT EDIT THIS FILE!
# THIS FILE IS AUTOMATICALLY GENERATED FROM A LITERATE PROGRAM SOURCE FILE.
#
# Copyright 2014, InCube Labs, LLC.
# All rights reserved.  This file contains unpublished work that is
# confidential and proprietary to InCube Labs.  This document may not, in
# whole or in part, be duplicated, disclosed or used for any purposes,
# whatsoever, without written permission from InCube Labs.
#

package require Tcl 8.6
package require cmdline
package require logger

source ../src/stsatcl.tcl
chan puts "testing stsatcl version: [package require stsatcl]"

# Add custom arguments here.
set optlist {
    {level.arg warn {Log debug level}}
    {port.arg {} {Target comm port}}
}
array set options [::cmdline::getKnownOptions argv $optlist]

package require tcltest
eval tcltest::configure $argv

namespace eval ::stsatcl::test {
    ::logger::initNamespace [namespace current] $::options(level)

    namespace import ::tcltest::*

    <<test utility procs>>
    <<constructor tests>>
    <<unexported tests>>
    <<exported tests>>

    cleanupTests
}
----


////
----
test X-1.0 {
} -setup {
} -cleanup {
} -body {
} -result {}
----
////

=== Package Index

We also provide a root chunk to extract a package index file.

[source,tcl]
----
<<pkgIndex.tcl>>=
package ifneeded stsatcl 1.0 [list source [file join $dir stsatcl.tcl]]
----
