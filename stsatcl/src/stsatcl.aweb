// vim:syntax=asciidoc:
= stsatcl - An Software Architecture for Tcl

== Introduction

By analogy to STSA,
which is a software architecture for micro-controller
based implementations that are coded in ``C'',
the *stsatcl* package is a software architecture for Tcl based
application.

This package follows the common convention of defining a small
domain specific language (DSL) that is used in the constructing
of objects to configure the object.
In this case we are constructing classes that have STSA
qualities, namely:

* Definition of attributes.
* Definition of relationships.
* Definition of state models.

The concepts here are similar to those used by +pycca+.
Specifically we are defining implementation aspects and the
package is expected to be used as the target for translating
XUML models into Tcl.

There are, of course, many differences in the way a ``C'' base
architecture and a Tcl based on will handle the implementation
aspects.
For example,
STSA uses pointers to traverse relationships.
There are no such things in Tcl.
However,
command names of TclOO objects can be used to serve the same purpose.
In STSA, ``C'' data types must be given for attributes.
In the Tcl world, everything is a string and Tcl variables can hold
data of any type.
Therefore type annotation is not necessary.
State models in Tcl have already been done in many ways.
Here we will follow the pattern of the *oomoore* package and
indeed pull large amounts of its code over.

["ditaa",options="no-shadows",title="STSA Tcl Block Diagram"]
-----------------------------------------------------------------------------
+---------------+
|  STSA Class   |
|  o meta-class |
+-------+-------+
        |
        | create
        V
+-------+-------+
|  XUML Class   |
+-------+-------+
        |
        | create/new
        V
+-------+-------+
|  XMUL Object  |
+-------+-------+
-----------------------------------------------------------------------------

== STSA Class

(((class,STSA Class)))

The *stsatcl* package contains the +STSAClass+ class.
+STSAClass+ is actually a meta-class, _i.e._ it is a class
for defining other classes.

[source,tcl]
----
<<stsatcl commands>>=
::oo::class create ::stsatcl::STSAClass {
    superclass ::oo::class
    unexport new                ; # <1>
    <<stsaclass configuration>>
}
----
<1> We insist that all STSA classes be named commands.

The idea is for the constructor of the +STSAClass+ to take a script
that consists of configuration commands.
Those commands will validate and store away the information.
Using the configuation information,
a new class is created with the requested properties.
Objects created from the class then have all the characteristics specified
in the configuration script.

The constructor of +STSAClass+ takes a configuration script
that contains commands from our mini-DSL.
The result is a class, from which objects may be created,
that have the characteristics as defined by the configuration.

(((method,STSAClass,constructor)))

[source,tcl]
----
<<stsaclass configuration>>=
constructor {config} {
    <<stsaclass constructor>>
}
----

=== Configuration DSL

The configuration language is really just a series of commands
that are implemented as methods of the class.
Technically,
the design is to use the +my eval+ command to evaluate the
configuration script in the context of the class being created.
The commands in the configuration script need to resolve correctly
in that context.
The +oo::util+ package in +tcllib+ provides the +link+ command to make
the DSL command definitions easier.

[source,tcl]
----
<<required packages>>=
package require oo::util
# The mixin of "oo::class.Delegate", interacts badly with meta-classes that
# have constructor arguments. So we eliminate the oo::class mixins here. This
# will mean that you can't define class methods.
::oo::define oo::class self mixin

package require struct::set
----

[source,tcl]
----
<<stsaclass constructor>>=
link\
    {attribute Attribute}\
    {reference Reference}\
    {partition Partition}\
    {polymorphic Polymorphic}\
    {statemodel Statemodel}
----

=== DSL Implementation Methods

We will first consider the commands that form our mini-DSL
that is used to configure an +STSAClass+.
First we consider the data, namely attributes and relationships.
Next we will deal with the more complicated issue of state models.

==== Attribute Method

(((method,STSAClass,Attribute)))

[source,tcl]
----
<<stsaclass constructor>>=
my variable attrInfo
array set attrInfo {}

<<stsaclass configuration>>=
method Attribute {args} {
    my variable attrInfo

    foreach attr $args {
        lassign $attr name default
        if {![info exists attrInfo($name)]} {
            set attrInfo($name) $default
        }
    }
}
----

==== Configurating references

The defintions are for the decomposed *paths* of relationships,
so we expect definitions to appear in both of the participating
classes.
Since we are defining the decomposed paths,
we need only specify whether the relationship is +singular+ or +multiple+.

The command that implements the mini-language is straight forward.
Singular relationship linkage is held in a simple variable that contains
a object command.
We define a command to link, unlink and obtain the command implied by
the relationship.

(((method,STSAClass,Reference)))

[source,tcl]
----
<<stsaclass constructor>>=
my variable refInfo
array set refInfo {}

<<stsaclass configuration>>=
method Reference {rname type dstclass} {
    my variable refInfo
    if {[info exists refInfo($rname)]} {
        error "linkage, \"$rname\", already exists"
    }
    if {[string range $dstclass 0 1] ne "::"} {
        set dstclass\
            [string trimright [uplevel 3 namespace current] :]::$dstclass
    }

    if {![regexp -- {\A-(>{1,2})(c?)\Z} $type match mult cond]} {
        error "unknown reference type spec, \"$type\""
    }
    set mult [string equal $mult ">>"]
    set cond [string equal $cond "c"]

    set refInfo($rname) [dict create\
        type reference\
        dest $dstclass\
        mult $mult\
        cond $cond\
    ]
}
----

[source,tcl]
----
<<stsaclass configuration>>=
method Partition {rname args} {
    my variable refInfo
    if {[info exists refInfo($rname)]} {
        error "linkage, \"$rname\", already exists"
    }
    if {[llength $args] < 2} {
        error "partition, \"$rname\", must have at least two subclasses"
    }

    set subs [list]
    foreach sub $args {
        if {[string range $sub 0 1] ne "::"} {
            set sub\
                [string trimright [uplevel 3 namespace current] :]::$sub
        }
        lappend subs $sub
    }
    set refInfo($rname) [dict create\
        type partition\
        subclasses $subs\
    ]
}
----

[source,tcl]
----
<<stsaclass constructor>>=
my eval $config
----

[source,tcl]
----
<<stsaclass constructor>>=
define [self] variable {*}[array names attrInfo]
----

[source,tcl]
----
<<stsaclass constructor>>=
define [self] constructor {args} {
    classvariable attrInfo
    foreach attrName [array names attrInfo] {
        set $attrName $attrInfo($attrName)
    }

    classvariable refInfo
    foreach refName [array names refInfo] {
        my variable $refName
        set $refName {}
    }
}
----

[source,tcl]
----
<<constructor tests>>=
test constructor-1.0 {
    define simple reference
} -setup {
} -cleanup {
    test1 destroy
} -body {
    stsatcl STSAClass create test1 {
        reference R1 -> foo
    }
    return [set [info object namespace test1]::refInfo(R1)]
} -result {type reference dest ::stsatcl::test::foo mult 0 cond 0}

test constructor-2.0 {
    define reference with bad syntax
} -setup {
} -cleanup {
} -body {
    stsatcl STSAClass create test2 {
        reference R1 ->>x foo
    }
} -result {unknown reference type spec, "->>x"} -returnCodes error

test constructor-3.0 {
    configure attribute
} -setup {
} -cleanup {
    test3 destroy
} -body {
    stsatcl STSAClass create test3 {
        attribute Count {Maximum 20}
    }
    return [set [info object namespace test3]::attrInfo(Maximum)]
} -result {20}

test constructor-4.0 {
    define partition
} -setup {
    ::stsatcl STSAClass create super {
        partition R1 sub1 sub2
    }

    ::stsatcl STSAClass create sub1 {
        reference R1 -> super
    }

    ::stsatcl STSAClass create sub2 {
        reference R1 -> super
    }
} -cleanup {
    super destroy
    sub1 destroy
    sub2 destroy
} -body {
    super create sup1
    return [set [info object namespace super]::refInfo(R1)]
} -result {type partition subclasses {::stsatcl::test::sub1 ::stsatcl::test::sub2}}

test constructor-5.0 {
    create an instance
} -setup {
    stsatcl STSAClass create test5 {
        attribute Count {Maximum 20}
    }
} -cleanup {
    test5 destroy
} -body {
    test5 create inst5
    set [info object namespace inst5]::Maximum
} -result {20}
----

== Access to Attributes

[source,tcl]
----
<<stsaclass constructor>>=
define [self] method readAttribute {attribute} {
    return [set $attribute]
}
----

[source,tcl]
----
<<exported tests>>=
test readAttribute-1.0 {
    read attribute value
} -setup {
    stsatcl STSAClass create test-ra1 {
        attribute Count {Maximum 27}
    }
} -cleanup {
    test-ra1 destroy
} -body {
    test-ra1 create inst1-ra1
    inst1-ra1 readAttribute Maximum
} -result {27}
----

[source,tcl]
----
<<stsaclass constructor>>=
define [self] method updateAttribute {attribute value} {
    return [set $attribute $value]
}
----

[source,tcl]
----
<<exported tests>>=
test updateAttribute-1.0 {
    update attribute value
} -setup {
    stsatcl STSAClass create test-ra2 {
        attribute Count {Maximum 27}
    }
} -cleanup {
    test-ra2 destroy
} -body {
    test-ra2 create inst-ra2
    inst-ra2 updateAttribute Count 33
    inst-ra2 readAttribute Count
} -result {33}
----

== Relationship Navigation

[source,tcl]
----
<<stsaclass constructor>>=
define [self] method link {rname obj} {
    set obj [my ResolveObj $obj]
    classvariable refInfo
    my CheckRelName $rname
    my CheckReferenceObj $rname $obj

    my variable $rname
    switch -exact -- [dict get $refInfo($rname) type] {
        reference {
            if {[dict get $refInfo($rname) mult]} {
                ::struct::set include $rname $obj
            } else {
                set $rname $obj
            }
        }
        partition {
            set $rname $obj
        }
        default {
            error "unknown linkage type, \"[dict get $refInfo($rname) type]\""
        }
    }
    return $obj
}
----

[source,tcl]
----
<<exported tests>>=
test link-1.0 {
    link across singular reference
} -setup {
    stsatcl STSAClass create test-lt1 {
        reference R1 -> test-lt2
    }
    stsatcl STSAClass create test-lt2 {
        reference R1 -> test-lt1
    }
} -cleanup {
    test-lt1 destroy
    test-lt2 destroy
} -body {
    test-lt1 create lt1
    test-lt2 create lt2
    lt1 link R1 lt2
} -result {::stsatcl::test::lt2}
----

[source,tcl]
----
<<exported tests>>=
test link-2.0 {
    link across multiple reference
} -setup {
    stsatcl STSAClass create test-lt1 {
        reference R2 ->> test-lt2
    }
    stsatcl STSAClass create test-lt2 {
        reference R2 -> test-lt1
    }
} -cleanup {
    test-lt1 destroy
    test-lt2 destroy
} -body {
    test-lt1 create inst1
    test-lt2 create inst2
    test-lt2 create inst3
    inst1 link R2 inst2
    inst1 link R2 inst3
    llength [set [info object namespace inst1]::R2]
} -result {2}
----

[source,tcl]
----
<<exported tests>>=
test link-2.1 {
    link across multiple reference, duplicate references
} -setup {
    stsatcl STSAClass create test-lt1 {
        reference R2 ->> test-lt2
    }
    stsatcl STSAClass create test-lt2 {
        reference R2 -> test-lt1
    }
} -cleanup {
    test-lt1 destroy
    test-lt2 destroy
} -body {
    test-lt1 create inst1
    test-lt2 create inst2
    inst1 link R2 inst2
    inst1 link R2 inst2
    llength [set [info object namespace inst1]::R2]
} -result {1}
----

[source,tcl]
----
<<exported tests>>=
test link-3.0 {
    link across partition
} -setup {
    ::stsatcl STSAClass create super {
        partition R3 sub1 sub2
    }

    ::stsatcl STSAClass create sub1 {
        reference R3 -> super
    }

    ::stsatcl STSAClass create sub2 {
        reference R3 -> super
    }
} -cleanup {
    super destroy
    sub1 destroy
    sub2 destroy
} -body {
    super create sup1
    sub1 create inst1
    sup1 link R3 inst1
    llength [set [info object namespace sup1]::R3]
} -result {1}
----

[source,tcl]
----
<<stsaclass constructor>>=
define [self] method unlink {rname obj} {
    set obj [my ResolveObj $obj]
    classvariable refInfo
    my CheckRelName $rname
    my CheckReferenceObj $rname $obj

    my variable $rname
    switch -exact -- [dict get $refInfo($rname) type] {
        reference {
            if {[dict get $refInfo($rname) mult]} {
                if {[::struct::set contains [set $rname] $obj]} {
                    ::struct::set exclude $rname $obj
                } else {
                    error "object, \"$obj\", is not linked to \"$rname\""
                }
            } else {
                if {$obj eq [set $rname]} {
                    set $rname {}
                } else {
                    error "\"$obj\" is not linked to \"$rname\",\
                            \"[set $rname]\" is"
                }
            }
        }
        partition {
            if {$obj eq [set $rname]} {
                set $rname {}
            } else {
                error "\"$obj\" is not linked to \"$rname\",\
                        \"[set $rname]\" is"
            }
        }
        default {
            error "unknown linkage type, \"[dict get $refInfo($rname) type]\""
        }
    }

    return
}
----

[source,tcl]
----
<<exported tests>>=
test unlink-1.0 {
    unlink across singular reference
} -setup {
    stsatcl STSAClass create test-ul1 {
        reference R1 ->c test-ul2
    }
    stsatcl STSAClass create test-ul2 {
        reference R1 -> test-ul1
    }
} -cleanup {
    test-ul1 destroy
    test-ul2 destroy
} -body {
    test-ul1 create inst-ul1
    test-ul2 create inst-ul2
    inst-ul1 link R1 inst-ul2
    inst-ul1 unlink R1 inst-ul2
    set [info object namespace inst-ul2]::R1
} -result {}
----

[source,tcl]
----
<<exported tests>>=
test unlink-2.0 {
    unlink across multiple reference
} -setup {
    stsatcl STSAClass create test-ul3 {
        reference R1 ->> test-ul4
    }
    stsatcl STSAClass create test-ul4 {
        reference R1 -> test-ul3
    }
} -cleanup {
    test-ul3 destroy
    test-ul4 destroy
} -body {
    test-ul3 create inst1
    test-ul4 create inst2
    test-ul4 create inst3

    inst1 link R1 inst2
    inst1 link R1 inst3
    inst1 unlink R1 inst2
    llength [info object namespace inst1]::R1
} -result {1}

test unlink-3.0 {
    unlink across partition
} -setup {
    ::stsatcl STSAClass create super {
        partition R3 sub1 sub2
    }

    ::stsatcl STSAClass create sub1 {
        reference R3 -> super
    }

    ::stsatcl STSAClass create sub2 {
        reference R3 -> super
    }
} -cleanup {
    super destroy
    sub1 destroy
    sub2 destroy
} -body {
    super create inst-super
    sub1 create inst-sub1
    inst-super link R3 inst-sub1
    inst-super unlink R3 inst-sub1
    set [info object namespace inst-super]::R3
} -result {}
----

[source,tcl]
----
<<stsaclass constructor>>=
define [self] method -> {rname args} {
    classvariable refInfo
    my CheckRelName $rname

    my variable $rname
    set relobjs [set $rname]

    switch -exact -- [dict get $refInfo($rname) type] {
        reference {
            if {![dict get $refInfo($rname) cond] && [llength $relobjs] == 0} {
                error "reference, \"$rname\", is unconditional, yet no\
                        instances were found"
            }
        }
        partition {
            if {$relobjs eq {}} {
                error "superclass partition, \"$rname\", is unconditional,\
                        yet no instances were found"
            }
            if {[llength $args] < 1} {
                error "partition navigation from supertype to subtype\
                        requires the destination subtype class"
            }

            set subclass [lindex $args 0]
            set args [lrange $args 1 end]

            set subclass [my ResolveObj $subclass]
            if {[llength [info class instances $subclass $relobjs]] == 0} {
                set relobjs [list]
            }
        }
        default {
            error "unknown linkage type, \"[dict get $refInfo($rname) type]\""
        }
    }

    if {[llength $args] != 0} {
        set related [list]
        foreach robj $relobjs {
            ::struct::set add related [$robj -> {*}$args]
        }
    } else {
        set related $relobjs
    }

    return [expr {[llength $related] < 2 ? [lindex $related 0] : $related}]
}
define [self] export ->
----

[source,tcl]
----
<<exported tests>>=
test reference-1.0 {
    traverse a singular relationship
} -setup {
    stsatcl STSAClass create rt1 {
        reference R1 -> rt2
    }
    stsatcl STSAClass create rt2 {
        reference R1 -> rt1
    }
} -cleanup {
    rt1 destroy
    rt2 destroy
} -body {
    rt1 create inst1
    rt2 create inst2
    inst1 link R1 inst2
    inst1 -> R1
} -result {::stsatcl::test::inst2}
----

[source,tcl]
----
<<exported tests>>=
test reference-1.1 {
    traverse many singular relationships
} -setup {
    stsatcl STSAClass create rt1 {
        reference R1 -> rt2
    }
    stsatcl STSAClass create rt2 {
        reference R1 -> rt1
    }
} -cleanup {
    rt1 destroy
    rt2 destroy
} -body {
    rt1 create inst1
    rt2 create inst2
    inst1 link R1 inst2
    inst2 link R1 inst1

    inst1 -> R1 R1
} -result {::stsatcl::test::inst1}
----

[source,tcl]
----
<<exported tests>>=
test reference-1.2 {
    traverse many singular relationships -- violate conditionality
} -setup {
    stsatcl STSAClass create rt1 {
        reference R1 -> rt2
    }
    stsatcl STSAClass create rt2 {
        reference R1 -> rt1
    }
} -cleanup {
    rt1 destroy
    rt2 destroy
} -body {
    rt1 create inst1
    rt2 create inst2
    inst1 link R1 inst2
    inst1 -> R1 R1
} -result {reference, "R1", is unconditional, yet no instances were found}\
  -returnCodes error
----

[source,tcl]
----
<<exported tests>>=
test reference-2.0 {
    traverse a multiple relationship
} -setup {
    stsatcl STSAClass create rt1 {
        reference R2 ->> rt2
    }
    stsatcl STSAClass create rt2 {
        reference R2 -> rt1
    }
} -cleanup {
    rt1 destroy
    rt2 destroy
} -body {
    rt1 create inst1
    rt2 create inst2
    rt2 create inst3
    inst1 link R2 inst2
    inst1 link R2 inst3
    inst1 -> R2
} -result {::stsatcl::test::inst2 ::stsatcl::test::inst3}
----

[source,tcl]
----
<<exported tests>>=
test reference-2.1 {
    traverse a multiple relationship, then a singular
} -setup {
    stsatcl STSAClass create rt1 {
        reference R2 ->> rt2
    }
    stsatcl STSAClass create rt2 {
        reference R2 -> rt1
    }
} -cleanup {
    rt1 destroy
    rt2 destroy
} -body {
    rt1 create inst1
    rt2 create inst2
    rt2 create inst3
    inst1 link R2 inst2
    inst1 link R2 inst3
    inst2 link R2 inst1
    inst3 link R2 inst1

    inst1 -> R2 R2
} -result {::stsatcl::test::inst1}
----

[source,tcl]
----
<<exported tests>>=
test reference-3.0 {
    traverse across partition
} -setup {
    ::stsatcl STSAClass create super {
        partition R3 sub1 sub2
    }

    ::stsatcl STSAClass create sub1 {
        reference R3 -> super
    }

    ::stsatcl STSAClass create sub2 {
        reference R3 -> super
    }
} -cleanup {
    super destroy
    sub1 destroy
    sub2 destroy
} -body {
    super create sup1
    sub1 create inst1

    sup1 link R3 inst1
    sup1 -> R3 sub1
} -result {::stsatcl::test::inst1}
----

[source,tcl]
----
<<exported tests>>=
if 0 {
test reference-3.1 {
    traverse across partition and single reference
} -setup {
    super create sup1
    sub2 create s2
    stsatcl::STSAClass create b1 {}
} -cleanup {
    sup1 destroy
    s2 destroy
    b1 destroy
} -body {
    sup1 link R1 s2
    s2 link R1 sup1
    s2 link R2 b1
    sup1 -> R1 sub2 R2
} -result {::stsatcl::test::b1}

test reference-3.2 {
    traverse across partition and single reference -- empty
} -setup {
    super create sup1
    sub1 create s1
} -cleanup {
    sup1 destroy
    s1 destroy
} -body {
    sup1 link R1 s1
    s1 link R1 sup1
    sup1 -> R1 sub2 R2
} -result {}
}
----

[source,tcl]
----
<<stsaclass constructor>>=
define [self] method CheckRelName {rname} {
    classvariable refInfo
    if {![info exists refInfo($rname)]} {
        error "unknown linkage, \"$rname\""
    }
}
----

[source,tcl]
----
<<stsaclass constructor>>=
define [self] method CheckReferenceObj {rname obj} {
    classvariable refInfo

    set objclass [info object class $obj]
    switch -exact -- [dict get $refInfo($rname) type] {
        reference {
            set destclass [dict get $refInfo($rname) dest]
            if {!($objclass eq $destclass ||\
                    $destclass in [info class superclasses $objclass])} {
                error "instance, \"$obj\", is not an instance of class,\
                        \"[dict get $refInfo($rname) dest]\""
            }
        }
        partition {
            set subclasses [dict get $refInfo($rname) subclasses]
            foreach subclass $subclasses {
                if {$objclass eq $subclass ||\
                    $subclass in [info class superclasses $objclass]} {
                    return
                }
            }
            error "instance, \"$obj\", is not an instance of any class,\
                    \"[join $subclasses {, }]\""
        }
        default {
            error "unknown linkage type, \"[dict get $refInfo($rname) type]\""
        }
    }
}
----

[source,tcl]
----
<<stsaclass constructor>>=
define [self] method ResolveObj {obj} {
    if {[string range $obj 0 1] ne "::"} {
        set obj\
            [string trimright [uplevel 2 namespace current] :]::$obj
    }
    return $obj
}
----

== Code Organization

=== Source Code

[source,tcl]
----
<<stsatcl.tcl>>=
# DO NOT EDIT THIS FILE!
# THIS FILE IS AUTOMATICALLY GENERATED FROM A LITERATE PROGRAM SOURCE FILE.
#
# Copyright 2014, InCube Labs, LLC.
# All rights reserved.  This file contains unpublished work that is
# confidential and proprietary to InCube Labs.  This document may not, in
# whole or in part, be duplicated, disclosed or used for any purposes,
# whatsoever, without written permission from InCube Labs.
#

package require Tcl 8.6
package require logger

<<required packages>>

namespace eval ::stsatcl {
    namespace export STSAClass
    namespace ensemble create

    variable version 1.0
}

<<stsatcl commands>>

package provide stsatcl $::stsatcl::version
----

=== Unit Tests

[source,tcl]
----
<<stsatcl.test>>=
# DO NOT EDIT THIS FILE!
# THIS FILE IS AUTOMATICALLY GENERATED FROM A LITERATE PROGRAM SOURCE FILE.
#
# Copyright 2014, InCube Labs, LLC.
# All rights reserved.  This file contains unpublished work that is
# confidential and proprietary to InCube Labs.  This document may not, in
# whole or in part, be duplicated, disclosed or used for any purposes,
# whatsoever, without written permission from InCube Labs.
#

package require Tcl 8.6
package require cmdline
package require logger

source ../src/stsatcl.tcl
chan puts "testing stsatcl version: [package require stsatcl]"

# Add custom arguments here.
set optlist {
    {level.arg warn {Log debug level}}
    {port.arg {} {Target comm port}}
}
array set options [::cmdline::getKnownOptions argv $optlist]

package require tcltest
eval tcltest::configure $argv

namespace eval ::stsatcl::test {
    ::logger::initNamespace [namespace current] $::options(level)

    namespace import ::tcltest::*

    <<test utility procs>>
    <<constructor tests>>
    <<unexported tests>>
    <<exported tests>>

    cleanupTests
}
----


////
----
test X-1.0 {
} -setup {
} -cleanup {
} -body {
} -result {}
----
////

=== Package Index

We also provide a root chunk to extract a package index file.

[source,tcl]
----
<<pkgIndex.tcl>>=
package ifneeded stsatcl 1.0 [list source [file join $dir stsatcl.tcl]]
----
