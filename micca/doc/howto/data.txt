== Translating data

The first facet of an XUML model to be translated is the data.
It is recommended that all the classes and relationships be defined
first and that you insure that `micca` reads the DSL contining just
the data specifications without error.
In subsequent additions to the domain configuration,
state models and domain activities are added.
Getting the foundations in data correct are essential to the
remaining parts of the translation and so they must be done first.

A `micca` domain specification starts with the `domain` command.
For brevity,
the examples in this section assume they are placed in the
domain script definition of a `domain` command.
The following shows a sketch of how a domain script could be structured.
The order of commands in a domain configuration script is arbitrary.
`Micca` reads and parses the entire script before attempting to generate
code.
Consequently,
you need not be concerned about forward declarations or insuring that
things are some how _defined_ before they are _used_.
The `micca` DSL is a specification language and not an executable language.

.Domain command example
==============
----
domain atc {
    # Domain commands define the characteristics of a domain.
    # These are:
    #       class
    #       association
    #       generalization
    #       domainop
    #       eentity
    #       typealias
    #       interface
    #       prologue
    #       epilogue

    class Controller {
        # Class commands define the platform classes.
        # These are:
        #       attribute
        #       classop
        #       instop
        #       statemodel
        #       polymorphic
        #       constructor
        #       destructor
    }

    association R1 Station 0..1--1 Controller

    # ...
    # and so on, giving the platform specific description of the domain
}
----
==============


=== How memory is managed

When translating the data portion of an XUML model,
it is helpful to understand the platform specifics on which the
translated code is run.
`Micca` assumes that all domain data is held in the primary memory of
a processor and, consequently, the memory is directly addressable.
This is a common situation, but it is important to emphasize that
there is no assumption of secondary storage such as a disk drive
and no presumed persistance as might be provided by a database
management system.
The execution architecture provide by `micca` is _not_ targeted
at the class of applications which would require secondary data storage.

`Micca` also insists that the maximum number of instances of each class
be defined at compile time.
The `micca` run-time does no dynamic memory allocation
from a system heap, _i.e._ there are no calls to `malloc()`.
Each class has its own pool of memory where instances are either part of
the initial instance population or created at run-time.
The memory pool is declared as a ``C'' variable of array type.
Initial instances differ from dynamically created instances by
providing initial values for each attribute.
The memory pool for a class must be sized for the worst case number of
instances the class will ever have and that size is known when the ``C'' code
for the translation is compiled.
Memory is handled in this way to make it more deterministic.

The most important concepts about how data is managed by `micca` are:

. Each platform class definition is converted into a ``C'' structure
    definition.
. The instances of a class are stored in an array of structures corresponding
    to the platform class definition and the size of the
    array is fixed at compile time.

For programmers who are more accustomed to dynamic memory allocation,
worst case memory sizing may seem restrictive or sub-optimal.
In practice,
it is slightly more work to consider the number of instances a class
may have,
but rarely are an _arbitrary_ number of class instances required.
For example,
one may consider wanting an arbitrary number of network connections.
In truth,
operating systems do not allow processes to consume extremely large
numbers of resources and even if the resources were available,
at some time the ability to service connections runs up against the
compute power of the processor.
It may seem like an arbitrary number are required, but what if that
number were 7 million or 250 million?
In practice,
the number of instances of a class are typically small.
Furthermore,
if your application truly makes demands for very large numbers of class
instances,
them you should choose a different target translation platform
than `micca` provides.

Because all data is held in primary memory and the size of that
memory is known at compile time,
the platform specific model that `micca` targets has two characteristics
that are particularly helpful to the implementation.

. All class instances have an architecturally generated identifier
    that consists of its address in primary memory.
    This identifier is used internal to the domain for all references
    to the class instances.
. All class instances have an architecturally generated identifier
    that can be used outside of the domain in order to specify
    the identity of class instances requesting or receiving services.
    The external identifier is the index in the storage pool array
    of a class.
    It is integer valued and unique within a given class.
    To uniquely identify an instance outside of a domain,
    we must know both the class to which the instance belongs and its
    external identifying integer value.
    `Micca` automatically generates pre-processor symbols for this
    information.

Neither of the previous characteristics is particularly profound.
Most programs that use data from primary memory use a _pointer_ or
_object id_ as a reference handle.
Accessing the class indirectly through a reference is a fundamental
mechanism supported by the addressing modes of all modern processors.
The mechanism is so common that we often forget that we are imposing
an identification scheme on the underlying classes.
However,
it is important to note that the use of a memory address as a class
instance identifier does _not_ enforce any identity constraints
imposed by identifying attributes of a class.
This limitation is considered below when we discuss the processing
associated with instance creation.

=== Translating data types

A class model defines data types for its attributes.
The data type definitions must specify a set of values that
attributes of the type may have and any non-obvious or uncommon
operations on the values.
It is rare to see unadorned data types such as, integer, in a
well designed class model.

At translation time,
``C'' data types must be chosen that accomodate the properties of
the model data types.
`Micca` provides the `typealias` command to specify a name for
a ``C'' data.

There is an inherent ambiguity of types in the ``C'' language.
Because ``C'' has a `typedef` statement,
new type names may be introduced.
It is not possible for `micca` to resolve that
ambiguityfootnote:[At least not without parsing all the ``C'' content.].
To break the ambiguity,
`micca` requires that all type names end in `_t`, following the
usual conventions for standard type names.

For example,
if there is a model type for direction which has two values, up and down,
then it can be translated as:

----
typealias Direction_t {enum {
    Up, Down}
}
----

Note the braces used to enclose the definition.

In this manner,
translations can name the model level types and supply equivalent
``C'' data types for them.

Note that the type system for model level types is open ended.
A model might, for example, define a 3-d vector and a set of operations
on 3-d vectors that can be applied to attributes of that type.
Such complex types require the translation to supply

=== Translating classes

In our usage here,
we are overloading the term _class_ to have different meanings.
A model class and a platform-specific class are two distinct things.
They are related.
They are counterparts of each other in the model and platform realms,
but they are logically different entities
and that distinction must be clear in a Translator's thinking.
In this section,
we discuss how to transform the logic of a model class into the
specifications of an platform-specific class.
To be clear,
we will refer to _model class_ when we are discussing the class
characteristics as they are presented in the XUML data model and
_platform class_ when we are discussing how the `micca` implementation
of the model level concepts is realized.

==== Purely descriptive attributes

Attributes that are descriptive in nature and play no other role in the
model class are declared using `attribute` commands.
For example,
a model class might appear as:

["plantuml",title="Pump model class"]
----
@startuml
hide methods
hide circle
skinparam class {
    BackgroundColor yellow
    BorderColor black
}

class Pump {
    Pump ID : ID    {I}
    Max pressure : MPa
    Min pressure : MPa
    Flow rate : Liters per minute
}
@enduml
----

The three attributes, *Max pressure*, *Min pressure*, and *Flow rate*
are descriptive of the characteristics of a *Pump* and serve no other
role in the model class.
They are specified in the platform class using the `attribute` commmand.

.Pump platform class 
----
class Pump {
    attribute Max_pressure MPa_t
    attribute Min_pressure MPa_t
    attribute Flow_rate LpM_t
}
----

[NOTE]
Class names and attribute names must be valid ``C''
identifiersfootnote:[A valid ``C'' identifier must start with a
letter or underscore and be followed by any number of letters,
underscores or decimal digits.
Note, some ``C'' compilers may limit the number of characters
in an identifier that are considered significant.
Most modern ``C'' compilers to not have such limitations.].
These names are passed along to the ``C'' compiler to name structures
and structure members.
Analysts may name entities as they wish for the clarity of the analytical
model.
Translation must take the names and make them suitable for the
target platform.
In this case,
it usually suffices to replace any characters that cannot be in a
``C'' identifier with the underscore (`_`) character.
It is important *not* to obfuscate the correspondence between the
attribute name in the model and the one used in the implementation.
We also assume
that the `MPa_t` and `LpM_t` type aliases have been defined as discussed
previously.

===== Default attribute values

An attribute may be given a default value.
If the analyst provides a default value specification in the model
it can be used as a default value for the translation by
given the `attribute` command the `-default` option.

For the previous example,
if the class had appeared as:

["plantuml",title="Pump model class with default attribute"]
----
@startuml
hide methods
hide circle
skinparam class {
    BackgroundColor yellow
    BorderColor black
}

class Pump {
    Pump ID : ID    {I}
    Max pressure : MPa
    Min pressure : MPa   = 15
    Flow rate : Liters per minute
}
@enduml
----

We can specify the default value as:

.Pump platform class 
----
class Pump {
    attribute Max_pressure MPa_t
    attribute Min_pressure MPa_t -default 15
    attribute Flow_rate LpM_t
}
----

Attributes which have a default value can be omitted when creating
an instance, either at run-time or as part of the initial instance population.

===== Zero initialized attributes

The `attribute` command also takes an optional `-zeroinit` option
which gives the attribute a default value of all bits being zero.
Like an attribute with a default value,
an attribute declared as `-zeroinit` need not have a value provided when
it is created.

===== Dependent attributes

An `attribute` may be modeled as _mathematically dependent_.
For those attributes,
the analysis model must provide a _formula_ in action language that
computes the value of the attribute.
The formula must then be translated into ``C''.
The following is a brief example of a dependent attribute translation.

["plantuml",title="Model class with dependent attribute"]
----
@startuml
hide methods
hide circle
skinparam class {
    BackgroundColor yellow
    BorderColor black
}
skinparam note {
    BackgroundColor white
    BorderColor black
}

class Extent {
    ID : unique        {I}
    Height : numeric
    Width : numeric
    Area : numeric   {M}
}

note bottom : Area = Height * Width
@enduml
----

We can specify the attribute as dependent and supply the
code necessary to compute the formula.

.Pump platform class 
----
class Extent {
    attribute Height unsigned
    attribute Width unsigned
    attribute Area -dependent {
        *Area = self->Height * self->Width ;
    }
}
----

We consider how the ``C'' code is specified in a following section.

==== Identifying attributes

Since `micca` is providing an identifier for each instance,
our goal is to eliminate identifying attributes whenever possible.
Attributes that are system generated and serve only an
identifying or referential role may simply be elided.
In the previous examples,
the model attributes, *Pump.Pump ID* and *Extent.ID* were not
present in the corresponding specifications for the platform class.

In the following situations identifying attributes may *not* be eliminated:

* The attribute serves a descriptive role for the processing and it's value
    is read and used in a computation.
* The attribute value is needed to insure an identity constraint.

In both these cases, the attribute,
with an appropriate ``C'' data type,
must be included in the platform class definition.

==== Referential attributes

Once again, the platform specific choice of `micca` to provide an
identifier for a class instance,
means that identifier can be used in place of referential attributes
to manage relationships.
As we see in the following section,
`micca` is able to provide the necessary storage and operations
on class instance references to implement relationships.
So, again our intent is to eliminate referential attributes when possible.

There is a situation where this is _not_ possible.

* If the model reads a referential attribute and treats it descriptively,
  _i.e._ uses the attribute value in some computation,
  then it is necessary to translate that attribute access into a
  relationship navigation that ultimately terminates at the identifier
  value to which the attribute refers.

Consider the following class model fragment.

["plantuml",title="Model class with referential attribute"]
----
@startuml
hide methods
hide circle
skinparam class {
    BackgroundColor yellow
    BorderColor black
}

class Part {
    Manufacturer : name    {I,R1}
    Model Number : name   {I,R1}
    Serial Number : string  {I}
}

class "Part Description" {
    Manufacturer : name  {I}
    Model Number : name {I}
    Color : color
}

Part "1..*" -- "1" "Part Description" : R1

@enduml
----

Assume that there is an activity in the model which determines
the serial numbers of all the *Parts* manufactured by the Acme company.
That activity is a search of the *Part* instances finding those
whose *Manufacturer* attribute equals "Acme".
In this situation,
*Part.Manufacturer* can be eliminated from the platform class,
but *Part Description.Manufacturer* must be retained.
The search must then be coded to navigate the *R1* association
to obtain the value of the *Manufacturer* attribute.
We know that referential attributes refer to identifying attributes and
by following the relationship (perhaps multiple relationships) we must
eventually arrive at an identifying attribute value.

So the above situation might be translated as:

----
class Part_Description {
    attribute Manufacturer {char[25]}
    attribute Model_Number {char[25]}
    attribute Color unsigned
}

class Part {
    attribute Serial_Number {char[25]}

    classop MRT_InstSet findByManufacturer {manuf {char const *}} {
    <%  Part instset matchedParts                                       %>
    <%  Part foreachInstance partRef                                    %>
            // This statement navigates R1 from Part to Part Description
    <%      instance partRef findOneRelated descRef R1                  %>
            if (strcmp(descRef->Manufacturer, manuf) == 0) {
    <%          instset matchedParts add partRef                        %>
            }
    <%  end                                                             %>
        return matchedParts ;
    }
}

association R1 Part 1..*--1 Part_Description
----

For the moment,
don't be startled by the contents of the `classop`.
We will cover translating actions into ``C'' later.
For now,
we want to emphasize that the search for *Part* instances to match a given
manufacture's name does not use a *Part* attribute.
Rather,
the value of the *Manufacturer* is obtained from the *Part Description*
by navigating the *R1* association.
So, no *Manufacturer* attribute is stored in a *Part* and any
time the *Manufacture* attribute value is needed,
it is obtained by navigating the relationship.

=== Translating relationships

Model relationships represent constraints on the number and conditionality
of how class instances are associated with each other in the real world.
Fundamentally,
the multiplicity and conditionality of a relationship restrict
membership in the underlying set that class instances represent.
In a model,
relationships are realized by referential attributes having values
equal to those of identifying attributes.
Since `micca` supplies a unique identifier for class instances,
those identifiers are used to realize relationships for
platform classes.

`Micca` supports translating the relationships by:

* Generating data structures and providing operations
  to handle the references for instances that participate in a relationship.
* Verifying at run-time that the constraints implied by the relationship
  are not violated by the execution of domain activities.

==== Direction of a relationship traversal

In a model,
relationships do not have an inherent _direction_ associated with them.
It is possible to navigate the relationship in either direction starting
with an appropriate instance of a participating class.
However,
for translation purposes it is convenient to give relationships a direction.
The concept of a direction of a relationship shortens the amount of
specification necessary to describe how navigating from one instance
to other instances across a relationship.
It is not generally necessary to specify which class the navigation arrives
at since that information is known to `micca` by the specifications
in the platform model.
A direction concept also helps disambiguate some situations that arise
in reflexive associations.

The direction of a relationship is determined by:

* For simple associations where referential attributes in one class are
  used to realize the association,
  the forward direction is from the referring class (_i.e._ the class that
  contains the referential attributes) to the referenced class.
* For generalization relationships, the forward direction is from
  subclass to superclass, which is also the direction of referring
  class to referenced class.
* For relationships realized by associative classes,
  there is no inherent direction and a direction is chosen by the
  Translator.

`Micca` uses some additional syntax to specify the direction of
relationship traversal.
The syntax to navigate a relationship in the _forward_ direction,
is simply the name of the relationship, _e.g._ `R42`.
The syntax to navigate in the _backward_ direction prepends a tilde (`~`)
character to the name of the relationship, _e.g._ `~R42`.

The following cases arise:

* For simple non-reflexive associations,
  forward and backward traversal are unambiguous and results in selecting
  instances of the participating classes.
* For generalizations, forward navigation always yields _exactly one_ instance
  of the superclass.
  Backward navigation must include the name of a participating subclass.
  Consider a generalization, called *R19*, which has a superclass named *Lamp*
  and a subclass named *Table_Lamp*.
  Navigation from an instance of *Lamp*  to an instance of *Table_Lamp*
  is specified as +
  `{~R19 Table_Lamp}`.
  The result of such navigation yields _at most one_ instance of *Table_Lamp*.
* For associative classes, four situation arise.
  ** Navigating in the forward direction from one class to its corresponding
     class uses the usual relationship name, _e.g._ `R13`.
  ** Navigating in the backward direction between the two participating
     classes uses the tilde prefixed name, _e.g._ `~R13`.
  ** Navigating forward to the associative class is specified by
     including the associative class name, _e.g._ +
     `{R13 Product_Selection}`.
  ** Navigating backward to the associative class is specified by
     both a tilde prefixed relationship name and the name of the
     associative class, _e.g._ `{~R13 Product_Selection}`.

==== Translating simple associations

Consider the following model fragment:

["plantuml",title="Simple association"]
----
@startuml
hide methods
hide circle
skinparam class {
    BackgroundColor yellow
    BorderColor black
    LineColor black
    ArrowColor black
}

class Warehouse {
    Name : string            {I}
    Location : MailingAddress
}

class "Warehouse Clerk" as WC {
    Clerk ID : arbitrary ID   {I}
    Clerk Name : Name
    Warehouse : string      {R25}
}

Warehouse "1" -- "1..*" WC : "is employed by\nR25\nemploys"

@enduml
----

This fragment shows an _at least one_ to _one_ association between
a *Warehouse Clerk* and a *Warehouse*.
This situation would be translated as:

----
class Warehouse {
    attribute Name {char[50]}
    attribute Location {char[50]}
}

class Warehouse_Clerk {
    attribute Clerk_ID unsigned
    attribute Clerk_Name {char[50]}

    # Referring class for R25
}

association R25 Warehouse_Clerk 1..*--1 Warehouse
----

The `association` command defines the characteristics of the
association between classes.
The syntax of the multiplicity and conditionality, _i.e._ **1..\*--1**,
is intended to be mnemonic of the notation used in the
XUML class diagram.
Note this argument has no embedded whitespace.
The order of the classes in the command is in the forward direction
of traversal.
The class which contains the referential attributes (*Warehouse_Clerk*)
appears first in the command arguments.
In this example, navigating from an instance of *Warehouse_Clerk* across
*R25* yields _exactly one_ instance of *Warehouse* and
navigating from an instance of *Warehouse* across *~R25* yields
_at least one_ instance of *Warehouse*.

==== Translating associative classes

Some associations require an associative class to realize the mapping
between participating instances.
An association class is required for:

* Associations that are _many_ to _many_ in multiplicity.
* Associations that represent partial functions, namely,
  *0..1--0..1*, **0..\*--0..1**, and **1..*--0..1**.
* Associations that have descriptive attributes describing properties
  of the association itself,
  _i.e._ associations with attributes that are not strictly referential.

Instances of the association class correspond directly to instances
of the relationship.
Association class instances directly enumerate the mapping between
the instances sets of the participating classes
To translate an association class,
the `association` command takes an `-associator` option.
Consider the following model fragment:

["plantuml",title="Association class"]
----
@startuml
hide methods
hide circle
skinparam class {
    BackgroundColor yellow
    BorderColor black
    LineColor black
    ArrowColor black
}

class "Product" as P {
    Product ID : UPC
    Product Name : string
}

class "Shopping Cart" as SC {
    Cart ID : arbitrary ID
    Total Value : currency
}

class "Product Selection" as PS {
    Product ID : UPC      {R14}
    Cart ID : arbitrary ID  {R14}
    Quantity : count
}

P "1..*" - "0..*" SC
(P, SC) .. PS : R14
@enduml
----

This association would be translated as:

----
class Product_Selection {
    attribute Quantity unsigned
}

association R14 -associator Product_Selection Product 1..*--0..* Shopping_Cart
----

==== Translating generalizations

Consider the following model fragment:

["plantuml",title="Product generalization"]
----
@startuml
hide methods
hide circle
skinparam class {
    BackgroundColor yellow
    BorderColor black
    LineColor black
    ArrowColor black
}

class "Product" as P {
    Product ID : UPC    {I}
    Name : string
    Unit Price : currency
}

class "Book Product" as BP {
    Product ID : UPC {I,R22}
    Title : string
}

class "Recording Product" as RP {
    Product ID : Universal Product Code {I,R22}
    Run Time : time
}

P <|-- BP : R22
P <|-- RP : R22
@enduml
----

This is a generalization relationship.
In XUML,
a generalization does _not_ represent inheritance.
Rather, it represents a disjoint set partitioning.
Strictly speaking,
the relationship graphic should be annotated with `{disjoint, complete}`, but
since this is the only type of generalization used in XUML, the
annotation is usually dropped as graphical clutter.

This situation would be translated as:

----
class Product {
    attribute Name {char[25]}
    attribute Unit_Price Money_t

    # superclass of R22
}

class Book_Product {
    attribute Title {char[25]}

    # subclass of R22
}

class Recording_Product {
    attribute Run_Time Duration_t

    # subclass of R22
}

generalization R22 Product Book_Product Recording_Product
----

_i.e._ we use the `generalization` command giving the name of the relationship,
the name of the superclass and the names of the subclasses which participate
in the generalization.

`Micca` provides two ways to store instances that participate in a
generalization:

Reference::
  In this technique,
  subclass instances have their own storage pools and a reference
  to the superclass is embedded in the subclass data structure.
  Navigating from subclass to superclass is accomplished by
  de-referencing the superclass reference.
Union::
  In this technique,
  the superclass is defined to contain, as part of its data structure,
  a union of the data structures of the subclass of the generalization.
  There is no separate instance storage pool for the subclasses.
  Navigating from the subclass to the superclass is accomplished by
  pointer arithmetic.

In the previous example,
if we had chosen to implement *R22* in a union,
we would have written:

----
generalization R22 -union Product Book_Product Recording_Product
----

The trade-offs for the two types of storage are:

* Generalizations implemented by reference are applicable to all situations.
  The cost is the memory in the subclass to store the reference to the
  superclass and the memory in the superclass to store a reference
  to the subclass.
  There is a separate memory pool for each subclass and these must be
  allocated.
  If there are no instances of a particular subclass,
  then its memory pool is not used.
* Generalizations implemented by union save the storage of pointer values.
  The memory pool of the superclass serves as memory for subclass instances.
  However, if there is a large discrepancy in the size of subclass instances,
  then memory may not be as well utilized as in the case of references.

The computation to navigate the relationship is negligible in both cases.

For most generalizations,
the `-union` implementation works well.
There is one case where it cannot be used.
If a subclass is subject to a compound generalization,
_i.e._ a class serves a subclass role in multiple independent
generalizations,
then only one of the generalizations may use the `-union` option
and the others must use `-reference` (which is the default if neither
option is specified).
This situation is rare.

==== Static associations

For associations which are _static_,
_i.e._ the population of relation instances does not change over the
course of running the domain,
the `association` command takes a `-static` option.
This option changes the relationship storage mechanism for
associations with multiplicity greater than one to be
an array of pointers of fixed length.
Normally,
association of multiplicity greater than one use linked lists to
store the references of the relationship.
The `-static` option can reduce memory usage and simplify the code
generated to navigate the relationship toward the _many_ side.

=== Populating the data

The final step in translating the data model for a domain is to
specify its population.
Populating the data model consists of specifying _initial instances_
and the amount of storage to allocate for each platform class.
Initial instances are those class instances that exist before the
domain runs.
As discussed previously,
each platform class has its own storage pool for instances.
In addition to initial instances,
you can specify the number of additional slots to allocate to the
storage pool.
The total number of instances is then the sum of the initial instances
and the number of additional slots allocated for run-time usage.
Note, if an initial instance is deleted at run-time, then
its storage slot becomes available for subsequent use by
an instance created at run-time.

It is advisable to keep the population of a domain in a file separate
from its configuration.
As translated domains are tested,
it is convenient to use a variety of different populations
to drive the code execution paths for testing.
`Micca` will read multiple files for a domain, so keeping
test populations separate from production populations is convenient.

The analytical materials supplied to the translation must include
a population of the data model.
The recommended practice is to supply the population in
tabular notation, one set of class instances per page,
similar to a page in a spreadsheet.
Values for all attributes are supplied.
It is possible to specify the model level population purely by
data values.

The `population` command is used to define the storage
requirements and any initial instances for the domain.
One of the few command ordering requirements for `micca` is that
the `population` command must follow the domain definition given
by the `domain` command.
The following shows a brief sketch of a population.

.Domain population example
==============
----
population atc {
    # Population commands define the data values in a domain
    # These are:
    #       class
    #       assigner

    class Controller {
        # Class commands the instances of a single class.
        # These are:
        #       instance
        #       table
        #       allocate
    }

    # ...
    # and so on, giving the population of the domain
}
----
==============

The `population` command takes the name of the domain to be populated
and a script of population commands to specify the characteristics
of the population.
For brevity,
in the following examples we assume the commands are contained in a
`population` script.

=== Initial instance names

Part of the process of defining a population involves not only
specifying values for the attributes but also insuring the
relationship references are specified.
As we have previous discussed,
referential attributes are usually elided from the model class when
formulating the platform class.
We can deduce the relationship references from the model population
by examining the values of the referential attributes and finding
the corresponding values in the other participating class of the
relationship.
But for platform classes,
we are taking a different view of relationship references and
using referential attribute values is not an option open to us.
So,
each initial instance is given a _name_.
Each instance name must be unique within the class of the instance.
The instance name serves as a means of specifying to which instances
relationships refer.
The instance name serves as a surrogate for the referential attribute
values.
So when we specify instances,
the relationship number, _e.g._ *R27*, and the name of an instance
are used to specify which instance are related.

=== Initial instances

`Micca` provides two commands to specify initial instances.
The `instance` command specifies values for a single class instance.
The `table` command specfies multiple instances in a tabular layout.

Referring to a previous example,
assume the analysis model has specified the following initial instance
population.
Here the data is presented in tabullar form and the population is
entirely specified by the data values of the model attributes.

[options="header",cols="3*<",title="Part Description Population",width="75%"]
|===========
|Manufacturer \{I}  |Model Number \{I}  |Color
|"Acme"             |"S27"              |22
|"Sunshine"         |"B42"              |47
|===========

[options="header",cols="3*<",title="Part Population",width="75%"]
|===========
|Manufacturer {I,R1}|Model Number {I,R1}|Serial Number
|"Acme"             |"S27"              |"A001"
|"Acme"             |"S27"              |"A002"
|"Sunshine"         |"B42"              |"B034"
|"Sunshine"         |"B42"              |"B037"
|===========

For the platform classes,
the referential attributes in *Part* were elided.
Remaining are the *Serial_Number* attribute and
the fact that *Part* is the referring class in *R1*.
This situation may be translated as follows.

----
class Part_Description {
    instance screw Manufacturer {"Acme"} Model_Number {"A27"} Color 22
    instance bolt Manufacturer {"Sunshine"} Model_Number {"S42"} Color 47
}

class Part {
    table       {Serial_Number  R1}\
    s1          {"A001"         screw}\
    s2          {"A002"         screw}\
    b1          {"B034"         bolt}\
    b30         {"B037"       bolt}
}
----

Here we have chosen to use the `instance` command for populating
the Part_Description class and the `table` command for the Part class.
Note that the referential attributes in the model class
(_i.e._ *Manufacturer* and *Model Number*)
have been replaced by specifying that *R1* is satisfied by referencing
the *screw* or *bolt* named instances from *Part_Description*.

=== Class storage allocation

The `allocate` command is use to specify an additional number of class
instance storage slots.
The total number of instances for a given class is the number of
initial instances plus the number given in the `allocate` command.

For the previous example,
we can allocate 10 additional instances memory slots for the
*Part_Description* class as follows:

----
class Part_Description {
    instance screw Manufacturer Acme Model_Number A27 Color red
    instance bolt Manufacturer Sunshine Model_Number S42 Color blue

    allocate 10
}
----

The maximum number of *Part_Description* instances that can exist
simultaneously is 12, two defined as initial instances and 10 allocated
for run-time creation.
Note, that at run time, there is no distinction between initial instances
and unallocated instances.
So, deleting an instance that was specified as an initial instance
makes its memory available to be used to create an instance at run-time.

=== Populating associative classes

Specifying the population of an associative class requires a different
format.
Recall that an associative class has references to the two other classes
that participate in the association.
So when we give an initial value for references, we must give a list
of values.
Consider the previous example of the *Product_Selection* class.
It population might appear as:

----
class Product_Selection {
    instance ps1 R14 {Product prod1 Shopping_Cart sc1} Quantity 1
    instance ps2 R14 {Product prod2 Shopping_Cart sc2} Quantity 2

    # ...
}
----

So for an associative class,
specifing the references needed for a relationship involves specifying
a set of pairs giving the class name and the instance name of each
participating class instance.

=== Populating associative classes in reflexive relationships

The previous scheme for populating associative classes does not
work when the association is reflexive.
In a reflexive association,
both instances participating in the association are of the same class.
We cannot use class names alone to distinguish the reference.
In a model, the verb phrases that describe the association are used
to determine the direction of navigation.
In the case of reflexive associative classes,
we use `forward` and `backward` to specify how the references are
stored.
Thus it is necessary to associate the verb phrases of the model to
the words `forward` and `backward`.
It does not matter which direction is deemed forward or backward as long as the
association of which verb phrase of the model is deemed forward and which is
deemed backward is used consistently.

Consider the following simple reflexive association.

["aafigure",format="png"]
----
                              +----------------------+
          +-------------+ R24 |Sequence              |
          |             +-----+----------------------+
"preceeds"|0..1         |     |"Next Component {R24}"|
+---------+------+      |     |"Prev Component {R24}"|
|Component       |      |     +----------------------+
+----------------+ 0..1 |
|Component ID    +------+
|                |"follows"
+----------------+
----

If we adopt the convention that _preceeds_ is associated to `backward`
and "follows" is associated to `forward`,
then we could generate a population for the *Sequence* class as:

----
class Component {
    instance c1 Component_ID 1
    instance c2 Component_ID 2
    instance c3 Component_ID 3
    instance c4 Component_ID 4
}

class Sequence {
    instance s1 R24 {backward c1 forward c2}
    instance s2 R24 {backward c2 forward c3}
    instance s3 R24 {backward c3 forward c4}
}
----

This population creates a chain of *Component* instances.
Navigating from *c2* in the forward direction will select the *c3*
instance.
Navigating from *c1* in the backward direction selects no instances.



// vim:syntax=asciidoc:
