== Lesser used translation features

In this section we describe features of `micca` that are used less
frequently during the translation process.
Most of these features handle situation where you need some measure
of control over the final contents of the generated code or header files.

=== Prologue

`Micca` supports a `prologue` command that can be used when defining
a domain.
The `prologue` is arbitrary text that is included at the beginning of
the generated code file.
Often, this is used to include additional header files or for
forward declarations.

For example,
if a domain were to need a two-dimensional vector as an attribute
type it could be introduced as:

.Prologue command example
===========
[source,c]
----
prologue {
    typedef struct point {
        float x ;
        float y ;
    } Point_t ;

    static void pointSum(Point_t *p1, Point_t *p2, Point_t *result) ;
    static void pointDiff(Point_t *p1, Point_t *p2, Point_t *result) ;
}
----
===========

This statement would place the declarations near the beginning of the
generated file.
You can use several `prologue` command.
The text is simply concatenated in the order they appear and included
as a whole at the tope of the generated code file.

=== Epilogue

Similarly,
the `epilogue` command gathers text which is placed at the end of the
generated code file.
Continuing the previous example,
we could place the implementation of the declared functions
in the `epilogue`.

.Epilogue command example
===========
[source,c]
----
epilogue {
    static void
    pointSum(
        Point_t *p1,
        Point_t *p2,
        Point_t *result)
    {
        result->x = p1->x + p2->x ;
        result->y = p1->y + p2->y ;
    }

    // And similarly for pointDiff.
}
----
===========

=== Interface

Just like the generated code file,
there are times when you need to control some of the content
of the generated header file.
The `interface` command places arbitrary text at the beginning
of the header file generated by `micca`.
It behaves similarly to `prologue` and `epilogue` in that multiple
`interface` commands simply concatenate their contents.
The `interface` command is useful for including other header files
or defining data types used in domain operations.

.Interface command example
==============
----
interface {
    #include "mylibrary.h"
}
----
==============


* constructor
* destructor


// vim:syntax=asciidoc:
