== Syntax considerations (((syntax)))

Before you can start composing the domain specification for `micca`,
you need to understand the syntax of the DSL used.
The `micca` DSL syntax is documented in the manual pages for `micca`.
The easiest way to obtain the man pages is to request `micca`
for the documentation.
Executing the command:

----
micca -doc
----

causes `micca` to place a copy of the man pages in a sub-directory of the
current directory called, `miccadoc` footnote:[The `micca` executable
contains a number of files that can be copied out.
This insures the files are consistent with the version of `micca`
you are running.].
The man pages are in HTML which your favorite browser can render.
In this section,
we discuss some of the syntax of the DSL used to describe an XUML
domain.
This section is _not_ a detailed enumeration of the commands,
the man pages provide the ultimate reference for the DSL.
Rather,
our intention here is to give you a broad overview and a few tips and
hints for the `micca` DSL.

`Micca` is written in the
http://www.tcl-lang.org[Tcl]
programming language. (((Tcl)))
Tcl is a command-oriented language,
similar in some ways to a command shell language that you might use to run
programs from a command line terminal.
The features of Tcl make it useful for creating domain specific
languages,
especially those that are intended to appear as declarative specifications.
In fact,
the DSL for `micca` is actually a Tcl script.
`Micca` arranges for the script to be executed in an environment where,
when the _commands_ in the script are executed,
the platform specific description of an XUML domain is generated.
Little knowledge Tcl syntax is required to work with `micca` and
we cover the points that you need below.

Like many other command-oriented languages,
Tcl syntax is concerned with spliting up a command line into _words_.
Tcl semantics are entirely tied up in the execution of the commands.
Tcl syntax deals with the way a command is split up into words.
Word splitting is done based on whitespace.
The first word is taken as the command and the remaining words
are passed as arguments to the command.
This is similar to languages such as the Unix shell.
Also similar to other command languages,
quoting syntax is used to embed whitespace into an argument.
When whitespace characters are required to be embedded in an command
argument,
the entire argument is quoted.
There are only
http://www.tcl-lang.org/man/tcl8.6/TclCmd/Tcl.htm[twelve rules of syntax]
for Tcl.
For our purposes using `micca`,
you only need a few and you can pick up what you need to know
by reading the examples given here.
There are many commands in the Tcl language,
but you will only need the ones given in the `micca` man pages.
Once you have assimulated a few syntax rules,
you can effectively ignore that you are dealing with a larger
programming language.

=== Quoting (((syntax,quoting)))

Tcl uses braces (`{}`) to quote a string and prevent it from being
parsed into words and otherwise interpreted.
Everything from the open brace to its _matching_ close brace is considered
a single argument and the brace characters themselves are discarded.

To describe a domain using the micca DSL, you use the `domain` command.

(((example,domain)))
.Domain command example
==============
----
domain atc {
    # A set of commands that are used to describe an XUML domain.
}
----
==============

In this example,
`domain` is a command and `atc` is the name of the domain we wish
to specify.
A domain is defined by a script of other commands and in this case
that script is contained within braces.
All the characters between the braces (minus the brace characters themselves)
are considered as one argument to the `domain` command.
So, the `domain` command takes three arguments.

Extending the above example,
we can include the `class` command, which is used to define
an XUML class.

(((example,class)))
.Class command example
==============
----
domain atc {
    # A set of commands that are used to describe an XUML domain.

    # Define a class
    class Controller {
        # A set of commands that describe the characteristics of a class.
    }
}
----
==============

So, the `class` command can be used as part of the `domain` script.
The `class` command takes an argument that is the name of the class and also
takes a script of commands to define the characteristics of the class.
Note, the braces used to define the boundary of the `class` command
script do _not_ affect the determination of the `domain` command
argument.
This is because the `class` script braces are _matched_, _i.e._ occur
as a open brace (`{`) followed, at some point, by a closed brace (`}`).

=== Quoting hell (((syntax,quoting,hell)))

At some point you may find a `micca` script being rejected with
an error that makes it appear as if nothing is working.
Often the reason has to do with quoting.
This is sometimes referred to as _quoting hell_ since it can be
bothersome to find the minor syntax error that sets things right.
Matching braces is a good first place to look for finding such mistakes.
Text editors usually support some notion of finding a matching brace.

=== Comments (((syntax,comments)))

Comments in Tcl have a quirk to them.
The comment character is the hash (`#`) character.
The hash and all the remaining characters on the line are discarded.
The quirk is that the hash character must come at a point where
the beginning of a command word is expected.
In practice,
it boils down to a few rules:

. Comments on a line by themselves, with only whitespace preceding the
    hash character operate as you would expect, _i.e._ the entire line
    is discarded.
. Comments after a command on the same line must be preceded by a
    semicolon (`;`). The semicolon is a command separator (as is a new line).
. Comments that contain unmatched braces must precede the unmatched
    brace character with a backslash escape (`\`).

The following example shows the cases.

(((example,comments)))
.Comment example
==============
[source,tcl]
----
# This is a typical comment on a line by itself.

puts "my name is fred" ; # If there is a command on the same line, use a semicolon.

# This comment contains an umatched open brace, \{
----
==============

=== Commenting out commands (((syntax,commenting out)))

Commenting out code using the usual comment characters is somewhat
problematic because of the quirky nature of Tcl comments.
The best approach, if you feel you must comment out some code,
is to surround the section with an always false `if` command.

(((example,commenting out)))
.Commenting out commands example
==============
[source,tcl]
----
if 0 {
    # Any thing in the enclosing braces is not interpreted.
    # Make sure that all the braces inside the if are matched.

    # For example, here the Motor class definition is not interpreted.
    class Motor {
        # Motor definition commands.
    }
}
----
==============


=== Line continuation (((syntax,line continuation)))

Commands in Tcl are separated by either newline characters or
by semicolons.
Usually, a single logical command is simply placed on a line by itself.
If the command is longer than you want for a physical line
or if you want a particular line layout for emphasis,
then a command line can be continued onto the next physical line by
ending the line with a backslash character (`\`).
The backslash character must be immediately followed by the
newlinefootnote:[We refer the the last character as the _newline_
character. Different environments have different notions of how
the end of an text record is encoded.
Tcl automatically takes these differences into account and we are safe
to think of text records as simply being newline terminated.]
character for the line continuation to have affect.
Be careful if your text editor inserts arbitrary whitespace at the end
of a line.
Those editors usually have a setting to remove extraneous whitespace
at the end of lines.
The result is that the backslash character, newline character and
any leading whitespace on the following line are replaced with a single
space character.

In the following example,
the `attribute` command is split over three lines, using two line
continuations.

(((example,line continuation)))
.Line continuation example
==============
----
class Motor {
    attribute\
        Manufacturer int\
        Model int
}
----
==============


=== Special characters in Tcl and C (((syntax,special characters)))

Part of the specification of a domain includes ``C'' code for the
activities of the domain.
That ``C'' code is specified in the domain configuration and passed
along to the output and eventually to the ``C'' compiler.
Both Tcl and ``C'' treat some characters as special.
The double quotes character (`"`) and brackets (`[]`) have meaning
both for Tcl and for ``C''.
Since `micca` examines any text first,
if you want to pass quotes or brackets on to the ``C'' compiler,
they must be enclosed in braces.
For example,
if a class has an attribute that is a string,
it might be defined as:

(((example,special characters)))
.Special characters example
==============
----
domain pump {
    class Model {
        attribute Model_Name {char[25]}
        # ... other class commands
    }
}
----
==============

The `attribute` command specifies a class attribute.
Here, we define an attribute called, `Model_Name`, and give its ``C''
data type name as `char[25]` (a 25 byte character array).
Notice that the data type specification is in braces to prevent
`micca` from interpreting the bracket characters.
Should you get an error to the effect of, ``unknown command: 25'',
you can look for bracket characters not surrounded by braces
(in Tcl, brackets are used for command nesting).

Similarly,
if you were defining an instance of the `Model` class for the initial
instance population you might specify:

(((example,double quoted characters)))
.Double quoted characters example
==============
----
population pump {
    class Model {
        instance ar-model Model_Name {"ar-27-np"}
        # ... other population commands
    }
}
----
==============

Note in this case,
we want to define a `Model` instance with the name, `"ar-27-np"`.
It is important that the quote characters get to the ``C'' compiler
since they have a specific meaning in declaring a string literal.
However,
double quotes are meaningful to `micca` and so it is necessary to
enclose the value of the `Model_Name` attribute in braces.
A good rule of thumb is to enclose in braces anything you want to insure
is passed through untouched to the ``C'' compiler.

=== Other Tcl commands (((other Tcl commands)))

Since a `micca` description of an XUML domain is actually a Tcl script,
you do have the entire power of the Tcl language available when defining
a domain.
In practice,
that power is seldom, if ever, used.
The `micca` DSL was designed to appear as a declarative specification.
There is really little use for variables or control structures
in describing the semantics of an XUML domain, and
using other Tcl language features is discouraged.
The commands of the DSL are all that are really needed to
describe a domain.


// vim:syntax=asciidoc:
