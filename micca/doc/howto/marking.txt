== Model marking

When a language compiler transforms source code into something that
is executable,
it typically is structured to analyze the code in a series of
phases on the path to producing something executable by a computer.
The techniques used are many and varied.
Some compilers produce machine specific assembly code or even skip
the assembly step and produce machine code directly.
Other compilers are targeted at virtual machines and produce code
that is then interpreted (or further compiled) at run time to
execute the program.
The many different approaches all have trade-offs,
yielding different characteristics,
that make them more or less suitable for a particular problem.

Most compilers use a semantic checking and analysis phase.
During this phase the compiler insures that language statements,
which are syntactically correct,
are actually meaningful within the rules of the way the language works.
In all language systems,
it is possible to have correct statements in the language that have
no meaning.
For example,
if the language requires that variables be declared before they are used,
an expression that refers to an undeclared variable has no meaning
even if that expression was correctly composed of valid language tokens.

Language compilers also typically examine the execution characteristics
of the program being compiled.
Internally, a flow graph of execution is often generated and many of
the optimizations performed by a compiler are operations that transform
a flow graph into a semantically equivalent one that minimizes
some aspect of the resulting code.
For example, it is possible to examine the flow graph of a function
that contains a loop construct and determine that some code piece
may be _lifted_ outside of the loop and still achieve the same result.

It should come as no surprise that
translating an XUML model requires analogous examination.
Fortunately,
the situation is much simpler for a model than a compiled language.
For the case of a model,
a single pass over the processing description of the activities
is sufficient to generate the introspection we need.
We call this analysis of the model processing with the goal of
characterizing the operation of the model as _marking the model_.

=== Semantic considerations

It is important to understand the purpose of the model marking.
The first step of model translation is to cast the platform
independent model into a platform dependent model.
`Micca` operates off of a platform dependent specification of
the domain properties
and supplies a specific set of mechanisms by which model semantics
may be realized as an actual implementation targeted at a
specific type of computing platform.
In the process of transforming the model into a platform specific
description,
logical aspects of the model must be made concrete in terms
supported by the platform specific model.

For example,
models specify the data types of attributes as a set of values.
In platform specific terms,
we must decide how that value set can be represented as a ``C''
data type, since our platform programming language is ``C''.
Usually the decision is easy and obvious, and
we choose a data type that can represent the platform independent
value set.

It is also the case,
that most models do not make full use of all the capablities
implied by the platform independent modeling language.
This creates situations where optimizations are available to meet
the specific use case of the model rather than necessarily providing
a general capability that would support any model.
For example,
if the model activities never access the referential attributes
of a class in a descriptive manner,
then such attributes need not be stored since the underlying
platform specifics supplied by `micca` handle implementing
the referential implications of an XUML model.

The importance of model marking is then to gather the information
about what the activities of the model actually do so as to make
informed decisions about how to map those activities onto the
platform specific mechanisms provide by `micca`.

=== Model metadata

The purpose of closely examining the processing performed by a model
is to characterize the computations the model actually performs
as opposed to the those computations that the modeling language
might support.
In this section,
we specify the model metadata that needs to be collected during the model
marking phase.

==== Class metadata

For classes, we are interested in determining if any activity in the
model does the following:

* Create an instance, either synchronously or asynchronously via a
  creation event.
  Note that migrating a subtype in a generalization relationship is
  conceptually a synchronous delete / create / relate operation (although in
  the implementation is may happen quite differently).
* Delete an instance either synchronously or asynchronously as a result
  of entering a final state.
* Query the set of class instances based solely upon the values of identifying
  attributes.
* Query the set of class instances based upon the values of non-identifying
  attributes.

==== Attribute metadata

For class attributes,
we wish to know:

* Any attribute whose value is read.
* Any attribute whose value is updated.
* Any mathematically dependent attribute that is updated
  (this is an analysis error).

==== Relationship metadata

For relationships,
we are interested in the navigation of relationships by the activities
in the model. Specifically:

* Creating, deleting or updating the instances of a relationship.
    This includes both creating instances of association classes and
    migrating subclass instances of a generalization to a different class.
* The direction of navigation of a relationship between the participating
  classes.
* Navigating generalization relationships from supertype to some subtype.
* Navigating generalization relationships from a subtype instance to
  its corresponding supertype instance.

==== State model metadata

For state models,
we are interested in the signaling of events and the reachability of
states.
Foreach state model record:

* Each event signaled.
* Each polymorphic event signaled.
* Any states, other than final states, that have no outgoing transitions.
* Any states, other than an inital state, that have no incoming transitions.

=== Marking mechanics

The following is the suggested way to obtain and record the model metadata
is:

* Start with a clean printout of the class diagram of the model on the
  largest size sheet of paper that can be conveniently obtained.
  Class diagrams for a cleanly presented model should be partitioned
  into smaller subsystems if the number of classes in the domain
  does not fit on readily available paper sizes.
  In practice, Letter size or A size paper is the most readily available
  and model drawings should take that into account.
* Also obtain clean printouts of the state model diagrams for each
  class which has a lifecycle state model.
* Read the action language or data flow diagrams of every processing
  activity in the model.
  This includes the state activites, domain operations and instance-based
  operations.
* While reading the model activities,
  annotate the class and state model diagrams with the information previously
  presented.
  For example,
  when action language statement reads an attribute, place an *R* next to the
  attribute's name.
  Similarly, attribute updates can be marked with a *U* or *W* character.
  The direction of relationship traversal can be annotated as an
  arrow pointing in the direction of the navigation and parallel to the
  relationship line on the class diagram.
  A tick mark next to an event name in a transition matrix can show
  that the event was signaled by some state activity.

The precise details of the notation used for the marking is not as important
as insuring that the previously mentioned information is gathered
and clearly indicated.
A project may choose to standarize the notation.
Do not hesitate to make notes on the diagrams regarding the
behavior implied by the activity processing.
The results of this model marking analysis directly feeds the next steps in the
translation process.

=== Evaluating the marking

After the marking is completed,
it should be evaluated for the following situations.
The results of the evaluation should be reported back to the
analyst for the domain.

==== Evaluating attributes

Class attributes play one or more roles in the abstraction of a class.
The roles of an attribute may be broadly classified as:

Descriptive attributes::
    Descriptive attributes characterize class instances by defining
    some aspect of the instance that pertains to the subject matter
    of the domain.
    For example,
    a *Motor* class might have an attribute of *Torque* which describes
    the amount of torque the motor produces.

Identifying attributes::
    Identifying attributes are those attributes which are a part of
    a class identifier.
    Each class has one or more identifiers.
    Each identifier consists of one or more attributes.
    The set of attributes forming an identifier may _not_ be a subset
    (proper or improper) of the attributes of another identifier
    of the class (_.i.e._ identifiers must be minimal identifiers).
    The values of the attributes of an identifier must be distinct
    among all the instances of a class.
    For example,
    a *Product Description* class might have two attributes,
    *Manufacturer Name* and *Model Name* that, together, are treated
    as an identifier.
    This implies that among all instances of *Product Description*,
    no two instances have the same values for both *Manufacturer Name*
    and *Model Name*.
+
Sometimes identifying attributes carry semantically meaningful
information, such as the previous example.
Some identifying attributes are system generated and have no
intrinsic semantic meaning.
The distinction is important in that the translation mechanism
must create system generated identifying attribute values.
Identifying attribute values that are semantically meaningful
usually are supplied from outside of the domain.
An important distinction between the two types of identifiers
relates to where the responsibility for insuring uniqueness lies.

Referential attributes::
    Referential attributes are those attributes which characterize the
    relationships between class instances.
    The real-world associations between classes are formalized by
    a relationship, either an association or a generalization.
    Referential attributes have values that are the same as the
    values of identifying attributes the other participating class.
    In this way,
    we know which particular instances are related to each other.

Attributes often serve multiple roles.
It is common for identifying attributes to also serve as referential
attributes.
Also,
if the identifier to which a referential attribute refers is
descriptive in nature,
then the referential attribute is also descriptive, transitively.

Attributes are also classified as being _independent_ or _dependent_.
An independent attribute may take on any value defined for the
data type of the attribute.
It's value is not constrained by the value of any other attribute.

A value of a dependent attribute is mathematically related to other
attributes.
Dependent attributes have a _formula_ which is calculated each time
they are read
and this formula must be supplied by the analyst.
It is an analysis error to attempt to write to a dependent attribute.
It is also an error to use a dependent attribute as an identifying
or referential attribute.

===== Evaluating descriptive attributes

For attributes which have a descriptive role,
the following situations should be noted.

Descriptive attributes neither read nor written::
    This is probably an analysis error. Attributes that are never
    accessed don't have much use.
Descriptive attributes read but not written::
    This situation could be analysis error or it might be that the domain
    expects the value to be bridged in and depends upon a service
    domain to keep the value up to date.
    This should be clear when the bridge specification for the domain
    is available.
Descriptive attributes written but not read::
    This situation, like the last, might be an analysis error or there
    might be a dependency on another domain which is expected to bridge
    the attribute value out.
    Again, this situation must be checked against the bridge
    specification for the domain.

===== Evaluating identifying attributes

For attributes which have an identifying role,
the following situations should be noted.

Identifying attributes that are written::
    In XUML,
    updating the value of an identifying attribute is _not_ allowed
    and this is an analysis error.
    Such an update would change the instance identification.
    This is an analysis error.
    The only way in XUML to change an instance is to delete it
    and then create a new one with different identifying attribute
    values.
Identifying attributes that are read::
    We make note of identifying attributes that are read and treated
    as descriptive attributes because it will have an impact on
    how the attribute is treated for translation.

===== Evaluating referential attributes

For attributes which have a referential role,
the following situations should be noted.

Referential attributes that are written::
    In XUML,
    updating the values of referential attributes is _not_ allowed
    and this is an analysis error.
    Such an update modifies the instances of the relationship which
    the referential attributes formalize.
    XUML action languages provide primitives to modify relationship
    instances and those must be used to change how instances are related.
Referential attributes that are read::
    If an attibute serves both referential and descriptive roles,
    domain activities may read the referential attribute.
    We make specific note this circumstance as it must be accounted for
    in the translation.

==== Evaluating instance creation

Attributes for instance creation::
    `Micca` insists that the value of all attributes and all related
    class instances be available at instance creation time.
    Each site of instance creation, either synchronous or asynchronous,
    must be evaluated to insure that a value is available for the
    attribute, the attribute has a default value or the attribute
    is a dependent attribute.

==== Evaluating relationships

Relationships that are never navigated::
    Relationships that are never navigated need not be translated and
    should be noted to the domain analyst as a potential error.
    It might be the case that the analyst has included a relationship
    in the model which will be used in a subsequent iteration.
    The relationship can be added easily when it is later used
    by some activity.
Relationships with a constant number of instances::
    Relationships that do not change either in number or in the
    participants are deemed _static_.
    This property allows for some optimizations in the translation.
    Note that for associations with an associative class, the number of
    instances of the relationship equals the number of instances of the
    associative class.
    For associations realized by referential attibutes in one of the
    participants,
    the number of instances of the relationship equals the number of instances
    of the class that contains the referential attributes.
    The number of instances of a generalization equals the number of instances
    of the class which serves as the superclass of the generalization.
Associations that are partial functions::
    Associations with multiplicity and conditionality of:
    .. 0..1 to 0..1
    .. 0..* to 0..1
    .. 1..* to 0..1

+
are partial functions and `micca` will insists that these relationships
have an association class.
If the analyst did not provide an association class for the association
then one must be constructed.
For relationships with many-to-many multiplicity,
the analyst is expected to provide an association class and it is
an analysis error if one has not been provided.
+
This particular discrepance arises from older formulations of XUML modeling
that allowed using *NULL* value or a _special_ value as a means of specifying
partial functions.
`Micca` does not use any construct that implies the existance of a *NULL*
value.

==== Evaluating state models

Events that are never signaled::
    Events that are never signaled are an analysis error.
States with no outgoing transitions::
    States with no outgoing transitions are terminal states,
    _i.e._ there is no way to escape the state.
    This may or may not be an analysis error, but its existance should
    be noted.
States with no incoming transitions::
    States with no incoming transitions cannot be reached unless
    the class instances is created in that state.
    Any activity specified for a state with on incoming transitions
    is never executed.
    This may or may not be an analysis error, and it should be noted to the
    analyst.

=== Marking summary

Marking the model as has been describe here is the first preparatory
step to translation.
The goal of model marking is to enumerate those aspects of the model
that are actually used by the domain activities when they execute.
Marking also provides a valuable check on the correctness of the
analytical models.
With the model marking in hand,
translation decisions about how to cast the model
semantics into platform specifics are easier to make.

// vim:syntax=asciidoc:
