== Translating dynamics

The second facet of the model to translate is that of the dynamics.
Translating the dynamics of the model requires the least amount of
transformation of the three model facets.
The semantics of the Moore state models used in XUML are directly
mapped to `micca` commands.

Note at this stage we are _not_ translating the action language of the
activities associated with any state model.
State model activities should be left empty at this time so we can
focus on getting the correct structure of states and transitions.
We discuss the translation of the processing in a subsequent section.

For classes with a state model,
add a `statemodel` command to its class definition:

----
class LightBulb {
    # light bulb attributes, etc.

    statemodel {
        # Statements that define the states and transitions
        # of the class state model.
    }
}
----

For brevity in the following examples,
we assume the `statemodel` command is contained within the appropriate
`class` definition script.

Two things must be defined for a state model.

. The states must be defined.
    The code to execute when the state is entered is part of that definition,
    however we defer that until the skeleton of the state model is
    constructed.
. The transitions between states must be associated to the events which
    cause those transitions.
    When an event is recieved, it causes:
    .. A transition to a state (possibly the same state receiving the event).
    .. Is ignored. This is given the symbol, *IG*.
    .. Is an error conditions because it is logically impossible for
        the event to be received in the state, _i.e._ it can't happen.
        This is given the symbol *CH*.

In this section,
we do not discuss translating the code for state activities.
We consider that in the next section.

=== Defining states

To specify a state,
`micca` uses the `state` command.

Consider a simple light bulb.

["plantuml"]
----
@startuml
hide empty description
skinparam state {
    BackgroundColor yellow
    BorderColor black
    ArrowColor black
}

[*] --> Off
Off --> On : Turn on
On --> Off : Turn off

Off : ~# code for Off state
On : ~# code for On state
@enduml
----

The `micca` commands for the states in this diagram are as follows.

----
statemodel {
    state Off {} {
        # code to execute when the Off state is entered.
    }

    state On {} {
        # code to execute when the On state is entered.
    }
}
----

Here we have defined two states, `Off` and `On`.
The `state` command takes three arguments:

. The name of the state.
. The parameters of the state.
. The body of ``C'' code to execute when the state is entered.

State activity parameters are carried along in the event that
causes the transition _into_ the state.
We discuss states with parameters more below.
Here there are no parameters to the state activity,
so we specify them as empty ({}).

=== Defining transitions

The other aspect of a state model translation is to specify all the state
transitions.
The starting point for translating the state transitions is,
naturally enough, the transition matrix of each state model.
Consider the transition matrix for our simple light bulb model.
Each state has a row in the matrix.
Each event has a column in the matrix.

[options="header",cols="3*^",title="Light Bulb State Transitions",width="50%"]
|=====
|State / Event  |Turn off       |Turn on
|Off            |IG             |On
|On             |Off            |IG
|=====

The `micca` command to specify transitions is `transition`.
The `transition` command specifies one cell of the transition matrix.
We can complete the translation of this state model as follows.

----
statemodel {
    state Off {} {
        # code to execute when the Off state is entered.
    }

    state On {} {
        # code to execute when the On state is entered.
    }

    transition Off - Turn_off -> IG
    transition Off - Turn_on -> On
    transition On - Turn_off -> Off
    transition On - Turn_on -> IG
}
----

[NOTE]
Note that `micca` does not have any ordering requirements on the
`state` or `transition` commands.
You can put all the `transition` command first or mix them around
in any way you wish.
One common organization is to list the _outgoing_ transitions
for a state immediately after the `state` command defining the state.

=== Default transitions

A state model diagram typically only shows transitions from one state
to another.
It does not show ignored (IG) or can't happen (CH) pseudo-transitions.
In our translation of the example,
we explicitly stated all the IG transitions.
This can be tedious if there are a lot of these types of transitions
to encode.
So, `micca` allows you to set a default transition.
Any transition _not_ mentioned in a `transition` command is assigned
the default transition.

Normally, the default transition is *CH* (for some very good reasons
a default of *CH* catches many errors).
However,
some state models, assigners in particular, 
ignore most events that do not cause an explicit transition to a state.
Our light bulb example also ignores events.
To change the default transition,
use the `defaulttrans` command.
Our light bulb example might have been written as:

----
statemodel {
    defaulttrans IG

    state Off {} {
        # code to execute when the Off state is entered.
    }
    transition Off - Turn_on -> On ; # <1>

    state On {} {
        # code to execute when the On state is entered.
    }
    transition On - Turn_off -> Off
}
----
<1> Note the spaces around the `-` and `->` characters.
This is _syntactic sugar_ intended to be mnemonic of the transition
and is required.

Some find this manner of specifying the state model clearer.
Note also the `defaulttrans` command may appear anywhere and need not
be the first command in the state model definition.

=== Initial state

All state models must specify an initial state in which to start.
For our light bulb example,
the initial state is *Off*.
This is indicated by the state model graphic having a black circle
(the pseudo-initial state) connected to the *Off* state by an unlabeled
arrow.

The `initialstate` command is used to specify the initial starting state
for a state model.
If no `initialstate` command is specified in the state model definition,
then `micca` chooses the first state defined as the initial state.
It is usually wise to specify the initial state, if only for documentation
purposes and to make sure things don't go wrong if the order of
state definitions is changed.
Our light bulb example might have been written as:

----
statemodel {
    initialstate Off
    defaulttrans IG

    state Off {} {
        # code to execute when the Off state is entered.
    }
    transition Off - Turn_on -> On

    state On {} {
        # code to execute when the On state is entered.
    }
    transition On - Turn_off -> Off
}
----

==== Initial state semantics

How initial states get handled is fundamentally an analysis concern.
However,
it is worth repeating here how activities associated with initial states
are handled.
Sometimes, problems with initial state activity execution are
assumed to be translation problems.

In XUML, there are two ways to create class instances:

. Synchronously, where a state activity requests a class instance be
    created and that instance exists when the invocation of the create
    request completes.
    If the class has a state model,
    the newly created instance is placed in an initial state according to:
    .. the default initial state defined in the `statemodel` script, or
    .. the _initial state requested by the state activity_ performing
        the synchronous creation.
        It is an option when the instance creation operation is invoked,
        to request a specific state into which the newly created instance
        is to be placed.
        This feature is _not_ often used, but it does exist and it
        has useful cases.

+
Regardless of how the initial state of a synchronously created
instance is determined,
the state activity associated with the initial state *is not executed*.

. Asynchronously, where a state activity sends a creation event.
    After signaling a creation event,
    the state activity that performed the signaling continues
    executing and the new class instance is created at some later time.
    When the creation event is eventually dispatched,
    the class instance is created in the _pseudo-initial state_, and the
    creation event causes a transition out of that state.
    This would be indicated on a state model diagram by outgoing
    arrows from the pseudo-initial state that are labeled with an
    event name.
    There is only one pseudo-initial state, but there may be many
    events that cause a transition out of it (and any event which
    does not cause a transition out of the pseudo-initial state
    will cause a *CH* transition if it is used as a creation event).
    When the transition out of the pseudo-initial state happens
    a new state is entered,
    and the *state activity of the new state is executed*.

The fundamental rule is that a state activity is only executed when a
transition causes the state to be entered.
Creation events cause a transition from the pseudo-initial state into
a new state and therefore the activity of the new state is executed.
Synchronous instance creation does not cause any transition,
but only sets the value of the initial state and thereby determines the manner
in which _subsequent_ events are handled.

We discuss how to specify creation events <<creation-events,below>>.

=== Final states

The lifecycle of some classes is over when they enter a certain state.
Consider the state model below.

["plantuml"]
----
@startuml
hide empty description
skinparam state {
    BackgroundColor yellow
    BorderColor black
    ArrowColor black
}

[*] --> Starting
Starting --> Requesting : Request
Requesting --> Requesting : Request
Requesting --> Finished : Done
Finished --> [*]

Starting : ~# code for Starting state
Requesting : ~# code for Requesting state
Finished : ~# code for the Finishing state
@enduml
----

When the *Finished* state is entered and after its state activity has
been executed,
it transitions (with no event label on the arrow) to a final state
which is shown by a black circle with a white halo.
Any instance of a class entering a final state is automatically deleted
by the run-time code.
To indicate a final state,
`micca` uses the `final` command.

----
statemodel {
    # state and transition definitions

    final Finished
}
----

It is possible to have multiple final states.
It is also possible to use the `final` command several times or
to list several states in the invocation of the `final` command.

=== States with parameters

So far,
none of the states we have show has had any parameters.
Events may carry argument values that are available to state activity.
It is a corollary to the way Moore state machines operate that
the parameter signature of any event which causes a transition
_into_ a state must match the parameter signature of the state activity.
Normally, this is an analysis concern and up to the analyst to get
the two signatures to match correctly.
However, `micca` does detect such errors.

Consider our previous state model with the addition that
a *Request* event carries with it a count of the number of items to
request and a size of items to request.

["plantuml"]
----
@startuml
hide empty description
skinparam state {
    BackgroundColor yellow
    BorderColor black
    ArrowColor black
}

[*] --> Starting
Starting --> Requesting : Request(count, size)
Requesting --> Requesting : Request(count, size)
Requesting --> Finished : Done
Finished --> [*]

Starting : ~# code for Starting state
Requesting : ~# code for Requesting state
Finished : ~# code for the Finishing state
@enduml
----

We must specify the signature of the *Requesting* state to
show the arguments it receives when entered.

----
statemodel {
    initialstate Starting
    defaulttrans CH
    final Finished

    state Starting {} {
        # code for the Starting state
    }
    transition Starting - Request -> Requesting

    state Requesting {count int size int} {
        # code for the Requesting state
        # two variables, count and size are defined as int's
        # and are available to the code in the state activity
    }
    transition Requesting - Done -> Finished

    state Finished {} {
        # code for the Finished state
    }
}
----

So parameters to a state are given in the second argument of the
`state` command.
That argument is a list of alternating argument name / argument type
pairs.
The argument name will show up as a variable in the generated ``C''
code.
The argument type is a ``C'' type name, in this case, both arguments
were `int` types.
The signature of the *Requesting* state is (in ``C'' terms) `(int, int)`.

=== Event definitions

You might have noticed that there have not been any definitions of
the events.
Usually,
there is no need to define the events of the state model.
`Micca` will find all the event names mentioned in the `transition`
statements and just use them.

However, sometimes it is useful to be able to specify an event.
This is usually the case when an event carries arguments.
So, in the previous example,
we could have specified:

----
statemodel {
    # commands to specify the state model
    # ...

    event Request count int size int

    # other commands to specify the state model
    # ...
}
----

Event specifications are usually not necessary because `micca`
can recognize that a state signature with two integer arguments
is the same signature regardless of what the argument names are.
It is the data types of the arguments that determine the
signature of an event,
_not_ the names given to the arguments.

One reason for defining an event signature has to do with bridging,
which we discuss later.
When you are constructing an event to signal via a bridge and that
event has arguments,
explicitly defining the event in the state model makes the naming
of the arguments explicit in the bridge code.
It's an advanced topic and we discuss it later when we talk about
bridging.

=== Polymorphic events

In XUML,
polymorphism arises when classes participate in a generalization
relationship and the subclasses in the relationship have lifecycles
modeled by state models.
We do not discuss all the aspects of polymorphic events here since
our concern is translation.

The usual convention in model diagrams marks polymorphic events by
pre-pending an asterisk, _i.e._ **Run*.
This is done as an aid in keeping track of things in the model.
`Micca` does not use such conventions.

`Micca` requires that a polymorphic event be defined as part of the
class specification for the superclass.
The event can be given any name
(as long as it can be turned into a ``C'' identifier).
When an event by the same name is consumed
(_i.e._ appears in a transition statement)
in a leaf state model,
`micca` knows, because the name is the same, that the event was polymorphic.

So if a model contains a class, *Torpedo*, which defines a polymorphic event,
*Fire* which takes a parameter of _speed_, it would be specified as:

----
class Torpedo {
    # commands to specify the attributes, etc. of a Torpedo
    # ...

    polymorphic Fire speed float

    # ...
    # other commands to specify a Torpedo
}
----

Defining a polymorphic event is similar in syntax to defining an ordinary
event.
The main difference is that the polymorphic event is defined as part of
the `class` command script and _not_ as part of the `statemodel`.
A child class consumes the polymorphic event,
when an event of the same name as the polymorphic event is used in a
`transition` command within a `statemodel` script.

`Micca` understands that in multi-level generalizations,
polymorphic events not consumed by intermediate level classes are
deferred to child classes.
It also understands all the other rules about polymorphic events and insists
the specification be correct.

=== Creation events [[creation-events]]

Previously,
we briefly discussed creation events in the context of the semantics
of initial states.
A creation event is one which causes an outgoing transition from the
pseudo-initial state.
A creation event appears in a `transition` command just as any other event.
The difference is that the pseudo-initial state has the special name of, `@`.
For example:

----
statemodel {
    # commands to define the state model of the class
    # ...

    transition @ - Go -> Starting

    # ...
    # other commands to define the state model of the class
}
----

In this example,
*Go* is a creation event that causes a transition from the pseudo-initial
state (`@`) to the *Starting* state.
There is nothing particularly special about the *Go* event in this example.
It is signaled to a newly created instance when an asynchronous
instance creation is requested in an activity.
The name of the creation event must be supplied as part of
the process of asynchronously creating an instance.
The event may have parameters or not depending upon what the analytical
model has specified.

==== Assigner state models [[assigner-state-models]]

The nature of some associations between classes is competitive.
The concurrency rules of XUML imply that instances of the relationship
must be created by serializing the actions involved.
This is accomplished by associating a state model to the relationship
itself and those state models are called _assigner_ state models.
The archetypal example for assigner state models is the assignment
of store clerks to service customers:


["plantuml"]
----
@startuml
skinparam class {
    BackgroundColor yellow
    BorderColor black
    ArrowColor black
}
hide methods
hide circle

class Clerk {
    Name : string {I}
}
class Customer {
    Name : string {I}
}
class Service {
    Customer Name : string {I}
    Clerk Name : string {I}
}

Clerk "0..1" - "0..1" Customer
(Clerk, Customer) .. Service : R16
@enduml
----

Since the state model is bound to the association,
it is specified as part of the association definition.
For the previous example:

----
domain operations {
    # commands to specify domain characteristics
    # ...

    association R16 -associator Service Clerk 0..1-0..1 Customer {
        statemodel {
            # state model definition for the R16 assigner
        }
    }

    # ...
    # other commands to specify domain characteristics
}
----

The commands used to specify an assigner state model are the same as
for a class state model, so we do not repeat them here.
The difference is that the `statemodel` command and its definition
script are part of the definition of
the association itself and _not_ to any particular class (indeed in this case,
the *Service* class may have its own state model).

`Micca` will arrange for the assigner to exist before the domain starts
to run and will place the assigner in the inital state as specified by
the `statemodel` script.

==== Multi-assigner models

Usually,
there is only a single instance of an assigner.
This was the case in the previous example.
However,
some competitive relationships are more complicated and are partitioned
by the instances of another class.
Extending our previous example,
it may be the case that a *Clerk* may only service *Customers* when the
*Customer* is in the same department where the *Clerk* works,
_i.e._ a *Clerk* is not allowed to service *Customers* outside of his/her
department.
In that case,
we would need an instance of the assigner for each instance of *Department*.
This is a multi-assigner situation.
The `identifyby` command, used in the script of an association, specifies
that the assigner is a multi-assigner and gives the class which
partitions the instances.

Extending our previous example, we would have:

----
domain operations {
    # commands to specify domain characteristics
    # ...

    association R16 -associator Service Clerk 0..1-0..1 Customer {
        identifyby Department ; # >>> Here, we indicate a multi-assigner
        statemodel {
            # state model definition for the R16 assigner
        }
    }

    # ...
    # other commands to specify domain characteristics
}
----

==== Multi-assigner population

Since there are multiple instances of a multi-assigner,
we must define a population for those instances.
This is accomplished with the `assigner` command within a population.
Again expanding upon our previous example:

----
population operations {
    # commands to specify populations of classes
    # ...

    assigner R16 {
        instance sports_service sports_department
        instance apparel_service apparel_department
        instance garden_service garden_department
    }

    # ...
    # other population commands
}
----

The `assigner` command and the script containing the `instance` commands
define three assigners for service associated with three departments
where *Clerks* work.
Here, `sport_department` _et.al_ are names of instances of the
*Department* class which is the partitioning class for the
multiple assigners.

Note that for single assigners,
no population specification is required since `micca` already knows
how many assigner instances to create (_i.e._ one).


// vim:syntax=asciidoc:
