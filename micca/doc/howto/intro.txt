== Introduction

This paper presents a set of techniques to demonstrate
translating an
https://en.wikipedia.org/wiki/Executable_UML[Executable UML (XUML)]
domain model into a "C" based implementation using `micca`.

* overall workflow scheme
* Human driven translation
* available targets
* model first -- don't hack
* analysis vs translation

=== Complete model

Before translation can be begin,
it is necessary to have a complete model.
That seems like an obvious statement,
but in our usual rush to finish systems there is a natural tendency
to start translation before the model is complete.
In the end,
starting with a half-baked model wastes time,
especially if the person performing the translation
(as is our recommendation)
is not the same person who created the model.

The need for a complete model does *not* imply that the
model has to satisfy every possible requirement that could be envisioned
for the domain.
The necessity for the domain model be complete and self-consistent
does *not* necessarily imply that it is complete in terms
of the services it provides to the system.
Experience shows that models,
like conventional code bases,
benefit from incremental, iterative development.
Call it agile or waterfall or whatever you like,
skilled practitioners of software development do not build systems
in one sequential undertaking.
Development is iterative and the results of one iteration help direct
subsequent efforts.
The usual recommendation is to model core concepts that are central
to the subject matter of the domain and work out from there to more
peripheral concepts.
Of course such recommendations have little to offer in terms of how
to determine what the core concepts of a domain are.
Experience shows that domain models, like a conventional code base,
tend to have areas where it is less clear what the _right_ thing is
to do.
Usually, some doubts enter into the process near the domain boundary
and its interactions with other domains.
This seems to be a property of any collection of logic when exceeding a certain
size (which size is almost never exceeded by the simple examples usually
presented).

However,
domain models are precise and therefore don't have _fuzzy_ parts that
left open for interpretation or dangling for future elaboration.
So we consider the following a _minimal_ set of deliverables that
are required before translation can begin.

* A class model of the domain data. The class model must contain:
  - A UML class diagram (in accordance with XUML usage).
  - Written descriptions of each class, relationship and attribute.
    Writing descriptions of the class model elements is an essential
    aspect of creating the class model and the presence of the
    descriptions indicates that the analyst has thoroughly checked
    the implications of the model.
  - A description of each model-level data type employed in the
    class model.
    The description must define the set of values (either by formula
    or enumeration) that constitute the data type.
* A state model for each class that has non-trivial lifecycle behavior.
  The state models contain:
  - A UML state diagram (in accordance with XUML usage).
    The diagram must show the initial state and any final states.
  - A state transition matrix in which every possible transition
    is defined.
    Every transition not shown on the state model diagram must be
    marked as *CH* (can't happen) or *IG* (ignored).
    It is suggested that ignored events be justified as to the reasoning
    behind them.
  - A description of each state and the role it plays in the lifecycle
    of the class.
  - A state activity description of the processing for each state.
    The processing should be described in an unambiguous action language
    or in action data flow diagrams.
* A set of instance operation descriptions for each class
    that defines them, to include:
  - A description of the function and interface of the operation.
  - The processing performed by the operation in terms of action language
    or a data flow diagram.
* A set of domain operation descriptions that include:
  - A written description of the operation function and interface.
  - The processing of the domain operation presented as action language
    or a data flow diagram.
* A set of external entity descriptions that include:
  - A description of the logical dependencies allocated to the external
    entity by the domain.
  - A description of the function and interface for each operation
    performed by the external entity.
    This must include whether the operation is considered as synchronous
    or asynchronous in its behavior.
* An initial instance population of the domain including:
  - Values for every attribute of every instance that is to exist when
    the domain starts.
    The preferred manner of specification is via tabluar layout in a
    purely data oriented fashion.
    Values of referential attributes indicate the relationship instances
    that are part of the initial instance population.
    Using action language to define initial data populations is not
    acceptible.

=== Translation workflow summary

The basic workflow described here for translating an XUML model is:

. Perform an introspection of the model marking it to show the execution
    characteristics.
. Translate the class model.
. Translate the state models.
. Translate the data flow diagrams or action language to "C" code.
. Construct an initial instance population.
. Construct the bridges between domains.

Each of these areas is discussed below.


// vim:syntax=asciidoc:
