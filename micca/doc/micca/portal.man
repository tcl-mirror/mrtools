[manpage_begin portal 3 1.1.4]
[comment {
# This software is copyrighted 2015 - 2018 by G. Andrew Mangogna.
# The following terms apply to all files associated with the software unless
# explicitly disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors and
# need not follow the licensing terms described here, provided that the
# new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
# OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
# THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
# OR MODIFICATIONS.
# 
# GOVERNMENT USE: If you are acquiring this software on behalf of the
# U.S. government, the Government shall have only "Restricted Rights"
# in the software and related documentation as defined in the Federal
# Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
# are acquiring the software on behalf of the Department of Defense,
# the software shall be classified as "Commercial Computer Software"
# and the Government shall have only "Restricted Rights" as defined in
# Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
# the authors grant the U.S. Government and others acting in its behalf
# permission to use and distribute the software in accordance with the
# terms specified in this license.
}]
[moddesc "XUML Model Translation"]
[titledesc "Domain Entity Access via the Domain Portal"]
[copyright "2015 - 2018 by G. Andrew Mangogna"]

[description]
This manual page describes the micca [fun portal] functions.
These functions allow operations on entities with a domain from
outside of the domain code itself.
The primary use case for the portal functions is for bridging between
domains.
Portal functions are also useful for testing or for building
a test framework around a [cmd micca] generated domain.

[list_begin definitions]

[usage {#include "micca_rt.h"}]

[list_end]

[section "Micca Generated Data and Symbols"]

When [cmd micca] generates the code for a domain,
it also generates an initialized, externally scoped variable containing data
that can be used in conjunction with the portal functions given here to query
and operate on the domain.
The portal data is placed in a variable whose name is given as,
<domain name>__PORTAL, where <domain name> is the name given to
the generated domain.

[para]
In addition to the portal data,
[cmd micca] generates a set of pre-processor macros that are included
in the generated header file.
These macros define a set of integer encodings for the various
domain elements.
For example,
each class in the domain has a non-negative integer value symbolically
defined by a pre-processor macro.
This symbol may be used as a class identifier in the portal functions
to specify on which class an operation is applied.
[cmd Micca] supplies symbolic encodings as follows for the domain entities.
In parentheses, the naming convention for the generated macro names
is given.

[list_begin itemized]
[item] classes (<domain name>_<class name>_CLASSID)
[item] pre-defined instances (<domain name>_<class name>_<instance name>_INSTID)
[item] attributes (<domain name>_<class name>_<attribute name>_ATTRID)
[item] events (<domain name>_<class name>_<event name>_EVENT
[item] states (<domain name>_<class name>_<state name>_STATE
[item] the number of classes in the domain
(<domain name>_CLASSCOUNT)
[item] the number of instances of each class
(<domain name>_<class name>_INSTCOUNT)
[item] the number of attributes of each class
(<domain name>_<class name>_ATTRCOUNT)
[item] the number of events (classes with a state model)
(<domain name>_<class name>_EVENTCOUNT)
[item] the number of states (classes with a state model)
(<domain name>_<class name>_STATECOUNT)
[list_end]

[para]

Additionally, for each event that carries supplimental event parameters,
[cmd micca] also places in the generated header file a structure
definition for the parameters.
The structure definition follows the naming convention:
struct <domain name>_<class name>_<event name>__EPARAMS.
Initialized values of these structures may be passed to portal functions
to supply supplemental event data to signaled events.

[section "Error Codes"]
Every portal function returns an integer value that indicates
the success or failure of the operations.
A non-negative return value indicates success.
A negative return value indicates failure.
The following pre-processor defined macros define the set of negative
return values and their meaning.

[list_begin definitions]
[def [const MICCA_PORTAL_NO_CLASS]]
There is no class in the domain with the given class identifier.
[def [const MICCA_PORTAL_NO_INST]]
There is no instance of the class with the given instance identifier.
[def [const MICCA_PORTAL_NO_ATTR]]
There is no attribute of the class with the given attribute idenifier.
[def [const MICCA_PORTAL_UNALLOC]]
The instance identifier refers to an unused instance memory slot.
[def [const MICCA_PORTAL_NO_STATE_MODEL]]
The given class has no state model.
[def [const MICCA_PORTAL_NO_EVENT]]
There is no event for the class with the given event number.
[def [const MICCA_PORTAL_NO_STATE]]
There is no state for the class with the given state number.
[def [const MICCA_PORTAL_NO_DYNAMIC]]
Dynamic instance creation is not allowed for the given class.
[def [const MICCA_PORTAL_DEPENDENT_ATTR]]
The operation is not allowed for dependent attributes.
[def [const MICCA_PORTAL_SIZE_ERROR]]
The supplied value cannot be stored in the allocated storage space.
[list_end]

[para]
A function is supplied that returns a canonical string representation
of an error code.

[list_begin definitions]

[usage "Error Strings"]

[call "char const * [fun mrt_PortalErrorString]([arg portalErrorCode])"]

[list_begin arguments]
[arg_def int portalErrorCode in]
An error value as returned from a portal function.
[list_end]

The [fun mrt_PortalErrorString] function translates a portal error code
to a human readable string.
By special dispensation,
a value of zero for [arg portalErrorCode] is accepted and a string reference
is returned for it.
The value of [const NULL] is returned for unknown error code values or
if the run time was compiled with the pre-processor macro, [const MRT_NO_NAMES],
defined.

[list_end]

[section "Portal Functions"]

This section describes the set of function available through the
portal to perform operations on a domain.
These functions are intended primarily for use in creating bridge operations
when multiple domains are used in an application.
They are also useful for testing purposes.

[list_begin definitions]

[usage "Portal Functions"]

[call "int [fun mrt_PortalAssignerCurrentState]([arg portal], [arg assignerId],\
        [arg instId])"]

[list_begin arguments]
[arg_def "MRT_DomainPortal const *const" portal in]
A pointer to the portal data that describes a domain.
[arg_def MRT_ClassId assignerId in]
A non-negative integer value that identifies an assigner in the domain.
[arg_def MRT_InstId instId in]
A non-negative integer value that identifies an instance of an assigner.
[list_end]

The [fun mrt_PortalAssignerCurrentState] obtains the current state number
for the [arg instId] instance of the [arg assignerId] assigner in the
domain described by [arg portal].
If successful,
the return value of the function is the a small non-negative
number that is the encoded value of the current state.
This value will match one of the pre-processor macro values defined
in the generated header file of the domain.
Upon failure,
the return value is one of the [sectref "Error Codes" "portal error codes"].

[call "int [fun mrt_PortalCancelDelayedEvent]([arg portal], [arg classId],\
        [arg instId], [arg eventNumber])"]

[list_begin arguments]
[arg_def "MRT_DomainPortal const *const" portal in]
A pointer to the portal data that describes a domain.
[arg_def MRT_ClassId classId in]
A non-negative integer value that identifies a class in the domain.
[arg_def MRT_InstId instId in]
A non-negative integer value that identifies an instance of a class.
[arg_def MRT_EventCode eventNumber in]
A non-negative integer value that identifies the event to cancel.
[list_end]

The [fun mrt_PortalCancelDelayedEvent] function cancels
the [arg eventNumber]
event to the [arg instId] instance of class, [arg classId], in the domain
described by [arg portal].
[emph N.B.] it is not an error to cancel an event that was never signaled
or to cancel an event that was signaled but has already been dispatched.
If successful,
the return value of the function is zero.
Upon failure,
the return value is one of the [sectref "Error Codes" "portal error codes"].

[call "int [fun mrt_PortalCreateInstance]([arg portal], [arg classId],\
        [arg initialState])"]

[list_begin arguments]
[arg_def "MRT_DomainPortal const *const" portal in]
A pointer to the portal data that describes a domain.
[arg_def MRT_ClassId classId in]
A non-negative integer value that identifies a class in the domain.
[arg_def MRT_StateCode initialState in]
A small non-negative interger that gives the initial state into which
the new created instance is placed.
[list_end]

The [fun mrt_PortalCreateInstance] function creates an instance of
[arg classId] in the domain described by [arg portal].
The instance is placed in the [arg initialState] state.
If the class given by [arg classId] does not have a state model,
then [arg initialState] must be given by [const MRT_StateCode_IG].
If the class given by [arg classId] does have a state model and if
[arg initialState] is given as [const MRT_StateCode_IG], then
the new created instance is placed in the default initial state.
The [arg initialState] may [emph not] be given as the pseudo-initial
state for those classes that have creation events.
In all cases,
no state activity is executed by the new created instance.
If successful,
the return value of the function is the a small non-negative
number that is the instance identifier for the newly created instance.
Upon failure,
the return value is one of the [sectref "Error Codes" "portal error codes"].

[para]
[emph N.B.] the instance created by this function is not properly initialized
since no attribute values have been set.
It is encumbent upon the caller of this function to use the
[fun mrt_PortalUpdateAttr] function to set a value for [emph all] the
attributes of the newly created instance.
Also note that it is not possible to create an association between
class instances via the portal functions.
For this reason,
instance creation where the class instances participate in unconditional
relationships must usually be done by constructing a domain operation in the
domain containing the class.
Also for this reason,
instance creation via portal functions is often best accomplished asynchronously
using creation events so that a state action is run to place the newly
created instance into a consistent state and create any relationship
linkages.

[call "int [fun mrt_PortalCreateInstanceAsync]([arg portal], [arg classId],\
        [arg eventNumber], [arg eventParameters], [arg paramSize])"]

[list_begin arguments]
[arg_def "MRT_DomainPortal const *const" portal in]
A pointer to the portal data that describes a domain.
[arg_def MRT_ClassId classId in]
A non-negative integer value that identifies a class in the domain.
[arg_def size_t paramSize in]
The number of bytes pointed to by [arg eventParameters].
[arg_def MRT_EventCode eventNumber in]
A non-negative integer value that identifies the event to signal.
[arg_def "void const *" eventParameters in]
A pointer to an object that contains the parameters for the event.
[arg_def size_t paramSize in]
The number of bytes pointed to by [arg eventParameters].
[list_end]

The [fun mrt_PortalCreateInstanceAsync] function creates an instance of
[arg classId] in the domain described by [arg portal] by
signaling the creation event given by [arg eventNumber].
If the event requires any supplemental event parameters,
they are given in the memory pointed to by [arg eventParameters] which
is [arg paramSize] number of bytes.
The new created instance is placed in its pseudo-initial state and
[arg eventNumber] is signaled to it.
When the event is dispatched,
the state action associated with transition is executed.
If successful,
the return value of the function is the a small non-negative
number that is the instance identifier for the newly created instance.
Upon failure,
the return value is one of the [sectref "Error Codes" "portal error codes"].

[para]
[emph N.B.] the instance created by this function is not properly initialized
since no attribute values have been set.
It is encumbent upon the caller of this function to use the
[fun mrt_PortalUpdateAttr] function to set a value for [emph all] the
attributes of the newly created instance.

[call "int [fun mrt_PortalDeleteInstance]([arg portal], [arg classId],\
        [arg instId])"]

[list_begin arguments]
[arg_def "MRT_DomainPortal const *const" portal in]
A pointer to the portal data that describes a domain.
[arg_def MRT_ClassId classId in]
A non-negative integer value that identifies a class in the domain.
[arg_def MRT_InstId instId in]
A non-negative integer value that identifies an instance of a class.
[list_end]

The [fun mrt_PortalDeleteInstance] deletes the [arg instId] instance
of the [arg classId] class in the domain described by [arg portal].

[call "int [fun mrt_PortalGetAttrRef]([arg portal], [arg classId],\
    [arg instId],\ [arg attrId],\ [arg pref],\ [arg size])"]

[list_begin arguments]
[arg_def "MRT_DomainPortal const *const" portal in]
A pointer to the portal data that describes a domain.
[arg_def MRT_ClassId classId in]
A non-negative integer value that identifies a class in the domain.
[arg_def MRT_InstId instId in]
A non-negative integer value that identifies an instance of a class.
[arg_def MRT_AttrId attrId in]
A non-negative integer value that identifies an attribute of a class.
[arg_def "void **" pref out]
A pointer to a memory pointer where the reference to the attribute
is placed.
[arg_def "MRT_AttrSize *" size out]
A pointer to an object where the number of bytes occupied by the
attribute is placed.
[list_end]

The [fun mrt_PortalGetAttrRef] function obtains a pointer reference
to an attribute value.
The preferred way to access attributes is to use the
[fun mrt_PortalReadAttr] or [fun mrt_PortalUpdateAttr] functions.
However,
for attributes values that are arrays,
it is most convenient to deal with them by references rather than by
value.
If successful,
the return value of the function is zero.
Upon failure,
the return value is one of the [sectref "Error Codes" "portal error codes"].

[example {
char const *cycletype ;
MRT_AttrSize typelen ;
int pcode = mrt_PortalGetAttrRef(&wmctrl__PORTAL,
        WMCTRL_WASHINGCYCLE_CLASSID,
        WMCTRL_WASHINGCYCLE_NORMAL_INSTID,
        WMCTRL_WASHINGCYCLE_WASHINGCYCLE_ATTRID,
        (void **)&cycletype, &typelen) ;

assert(pcode == 0) ;

if (strcmp(cycletype, "Normal") == 0) {
    printf("found the normal washing cycle\n") ;
}
}]

[call "int [fun mrt_PortalInstanceCurrentState]([arg portal], [arg classId],\
        [arg instId])"]

[list_begin arguments]
[arg_def "MRT_DomainPortal const *const" portal in]
A pointer to the portal data that describes a domain.
[arg_def MRT_ClassId classId in]
A non-negative integer value that identifies a class in the domain.
[arg_def MRT_InstId instId in]
A non-negative integer value that identifies an instance of a class.
[list_end]

The [fun mrt_PortalInstanceCurrentState] obtains the current state number
for the [arg instId] instance of the [arg classId] class in the
domain described by [arg portal].
If successful,
the return value of the function is the a small non-negative
number that is the encoded value of the current state.
This value will match one of the pre-processor macro values defined
in the generated header file of the domain.
Upon failure,
the return value is one of the [sectref "Error Codes" "portal error codes"].

[call "int [fun mrt_PortalReadAttr]([arg portal], [arg classId], [arg instId],\
        [arg attrId], [arg dst], [arg dstSize])"]

[list_begin arguments]
[arg_def "MRT_DomainPortal const *const" portal in]
A pointer to the portal data that describes a domain.
[arg_def MRT_ClassId classId in]
A non-negative integer value that identifies a class in the domain.
[arg_def MRT_InstId instId in]
A non-negative integer value that identifies an instance of a class.
[arg_def MRT_AttrId attrId in]
A non-negative integer value that identifies an attribute of a class.
[arg_def "void *" dst out]
A pointer to memory where the attribute value is placed.
[arg_def MRT_AttrSize dstSize in]
The number of bytes pointed to by [arg dst].
[list_end]

The [fun mrt_PortalReadAtt] function reads the value of an attribute
of a class instance.
The value is read from the domain described by [arg portal], the
class given by [arg classId], the instance given by [arg instId]
and the attribute given by [arg attrId].
The attribute value is copied to the memory pointed to by [arg dst].
The number of bytes pointed to by [arg dst] is given by [arg dstSize]
and no more than [arg dstSize] bytes are copied to [arg dst].
If successful,
the return value of the function is the number of bytes actually
copied to [arg dst].
Upon failure,
the return value is one of the [sectref "Error Codes" "portal error codes"].

[example {
unsigned washduration ;
int pcode = mrt_PortalReadAttr(&wmctrl__PORTAL,
        WMCTRL_WASHINGCYCLE_CLASSID,
        WMCTRL_WASHINGCYCLE_NORMAL_INSTID,
        WMCTRL_WASHINGCYCLE_WASHDURATION_ATTRID,
        &washduration, sizeof(washduration)) ;

if (pcode == sizeof(washduration)) {
    printf("normal washing duration is %u\n", washduration) ;
}
}]

[call "int [fun mrt_PortalRemainingDelayTime]([arg portal], [arg classId],\
        [arg instId], [arg eventNumber], [arg delayRef])"]

[list_begin arguments]
[arg_def "MRT_DomainPortal const *const" portal in]
A pointer to the portal data that describes a domain.
[arg_def MRT_ClassId classId in]
A non-negative integer value that identifies a class in the domain.
[arg_def MRT_InstId instId in]
A non-negative integer value that identifies an instance of a class.
[arg_def MRT_EventCode eventNumber in]
A non-negative integer value that identifies the event to signal.
[arg_def "MRT_DelayTime *" delayRef out]
A pointer to an object of type [type MRT_DelayTime] where the
remaining delay is placed.
[list_end]

The [fun mrt_PortalRemainingDelayTime] function returns by reference via
[arg delayRef] the minimum number of milliseconds before the
[arg eventNumber] is dispatched to the [arg classId] instance in the
domain described by [arg portal].
If there is no event given by [arg eventNumber] for the [arg classId] instance
or if the event has already been dispatched,
then the returned remaining time is set to zero.
If successful,
the return value of the function is zero.
Upon failure,
the return value is one of the [sectref "Error Codes" "portal error codes"].

[call "int [fun mrt_PortalSignalDelayedEvent]([arg portal], [arg classId],\
        [arg instId], [arg eventNumber], [arg eventParameters],\
        [arg paramSize], [arg delay])"]

[list_begin arguments]
[arg_def "MRT_DomainPortal const *const" portal in]
A pointer to the portal data that describes a domain.
[arg_def MRT_ClassId classId in]
A non-negative integer value that identifies a class in the domain.
[arg_def MRT_InstId instId in]
A non-negative integer value that identifies an instance of a class.
[arg_def MRT_EventCode eventNumber in]
A non-negative integer value that identifies the event to signal.
[arg_def "void const *" eventParameters in]
A pointer to an object that contains the parameters for the event.
[arg_def size_t paramSize in]
The number of bytes pointed to by [arg eventParameters].
[arg_def MRT_DelayTime delay in]
The minimum number of milliseconds that is to elapse before
the event is dispatched.
[list_end]

The [fun mrt_PortalSignalDelayedEvent] function signals the [arg eventNumber]
event to the [arg instId] instance of class, [arg classId], in the domain
described by [arg portal] delayed in time by at least [arg delay]
milliseconds.
It the event carries supplimental parameters,
they are supplied by reference via [arg eventParameters] which points to
[arg paramSize] number of bytes.
If the event requires no parameters,
then [arg eventParameters] and [arg paramSize] are given as [var NULL] and
0, respectively.
If successful,
the return value of the function is zero.
Upon failure,
the return value is one of the [sectref "Error Codes" "portal error codes"].

[call "int [fun mrt_PortalSignalEvent]([arg portal], [arg classId],\
        [arg instId], [arg eventNumber], [arg eventParameters],\
        [arg paramSize])"]

[list_begin arguments]
[arg_def "MRT_DomainPortal const *const" portal in]
A pointer to the portal data that describes a domain.
[arg_def MRT_ClassId classId in]
A non-negative integer value that identifies a class in the domain.
[arg_def MRT_InstId instId in]
A non-negative integer value that identifies an instance of a class.
[arg_def MRT_EventCode eventNumber in]
A non-negative integer value that identifies the event to signal.
[arg_def "void const *" eventParameters in]
A pointer to memory from with the new attribute is retrieved.
[arg_def size_t paramSize in]
The number of bytes pointed to by [arg eventParameters].
[list_end]

The [fun mrt_PortalSignalEvent] function signals the [arg eventNumber]
event to the [arg instId] instance of class, [arg classId], in the domain
described by [arg portal].
It the event carries supplimental parameters,
they are supplied by reference via [arg eventParameters] which points to
[arg paramSize] number of bytes.
If the event requires no parameters,
then [arg eventParameters] and [arg paramSize] are given as [var NULL] and
0, respectively.
If successful,
the return value of the function is zero.
Upon failure,
the return value is one of the [sectref "Error Codes" "portal error codes"].

[example {
struct wmctrl_ClothesTub_Fill__EPARAMS = {
    .temp = WT_Hot
} ;
int pcode = mrt_PortalSignalEvent(&wmctrl__PORTAL,
        WMCTRL_CLOTHESTUB_CLASSID,
        WMCTRL_CLOTHESTUB_CT1_INSTID,
        WMCTRL_CLOTHESTUB_FILL_EVENT,
        &wmctrl_ClothesTub_Fill__EPARAMS,
        sizeof(wmctrl_ClothesTub_Fill__EPARAMS)) ;

assert(pcode == 0) ;
}]

[call "int [fun mrt_PortalUpdateAttr]([arg portal], [arg classId],\
        [arg instId], [arg attrId], [arg src], [arg srcSize])"]

[list_begin arguments]
[arg_def "MRT_DomainPortal const *const" portal in]
A pointer to the portal data that describes a domain.
[arg_def MRT_ClassId classId in]
A non-negative integer value that identifies a class in the domain.
[arg_def MRT_InstId instId in]
A non-negative integer value that identifies an instance of a class.
[arg_def MRT_AttrId attrId in]
A non-negative integer value that identifies an attribute of a class.
[arg_def "void const *" src in]
A pointer to memory from with the new attribute is retrieved.
[arg_def MRT_AttrSize srcSize in]
The number of bytes pointed to by [arg src].
[list_end]

The [fun mrt_PortalUpdateAttr] modifies the value of the [arg attrId]
attribute of the [arg instId] instance in the [arg classId] class
of the domain described by [arg portal].
The new attribute value is obtain by reference from [arg src] which
points to [arg srcSize] bytes of memory.
If successful,
the return value of the function is the number of bytes actually
copied from [arg src].
Upon failure,
the return value is one of the [sectref "Error Codes" "portal error codes"].

[example {
unsigned washduration = 100 ;
int pcode = mrt_PortalUpdateAttr(&wmctrl__PORTAL,
        WMCTRL_WASHINGCYCLE_CLASSID,
        WMCTRL_WASHINGCYCLE_NORMAL_INSTID,
        WMCTRL_WASHINGCYCLE_WASHDURATION_ATTRID,
        &washduration, sizeof(washduration)) ;

if (pcode == sizeof(washduration)) {
    printf("normal washing duration is now %u\n", washduration) ;
}
}]

[list_end]

[section "Introspection Functions"]

The functions in this section return information about the domain and
the elements in the domain.
These functions allow programs to inquire about the domain meta-data
during run time.

[list_begin definitions]

[usage "Introspection Functions"]

[call "int [fun mrt_PortalClassAttributeCount]([arg portal], [arg classId])"]

[list_begin arguments]
[arg_def "MRT_DomainPortal const *const" portal in]
A pointer to the portal data that describes a domain.
[arg_def MRT_ClassId classId in]
A non-negative integer value that identifies a class in the domain.
[list_end]

The [fun mrt_PortalClassAttributeCount] function returns the number of
attributes contained in the [arg classId] class in the domain described
by [arg portal].
If successful,
the return value of the function is a non-negative count of the
number of attributes of [arg classId].
Upon failure,
the return value is one of the [sectref "Error Codes" "portal error codes"].

[call "int [fun mrt_PortalClassAttributeName]([arg portal], [arg classId],\
        [arg attrId], [arg nameRef])"]

[list_begin arguments]
[arg_def "MRT_DomainPortal const *const" portal in]
A pointer to the portal data that describes a domain.
[arg_def MRT_ClassId classId in]
A non-negative integer value that identifies a class in the domain.
[arg_def MRT_AttrId attrId in]
A non-negative integer value that identifies an attribute of a class.
[arg_def "char const ** const" nameRef out]
A pointer to a character pointer by which the attribute name is returned.
[list_end]

The [fun mrt_PortalClassAttributeName] function obtains the name of the
[arg attrId] attribute of the [arg classId] class in the domain described
by [arg portal].
The name is returned via [arg nameRef] as a pointer to a [const NUL]
terminated string.
If the domain was compiled with the preprocessor symbol
[const MRT_NO_NAMES] defined, then the value placed in the
location pointed to by [arg nameRef] is [const NULL].
If successful,
the return value of the function is zero.
Upon failure,
the return value is one of the [sectref "Error Codes" "portal error codes"].

[example {
int attrCount = mrt_PortalClassAttributeCount(&wmctrl__PORTAL,
        WMCTRL_WASHINGCYCLE_CLASSID) ;
assert(attrCount >= 0) ;

for (int attrId = 0 ; attrId < attrCount ; attrId++) {
    char const *attrName ;
    int pcode = mrt_PortalClassAttributeName(&wmctrl__PORTAL,
            WMCTRL_WASHINGCYCLE_CLASSID, attrId, &attrName) ;

    if (pcode == 0) {
        if (attrName != NULL) {
            printf("attribute %d is named %s\n", attrId, attrName) ;
        } else {
            printf("no name available for attribute %d\n", attrId) ;
        }
    } else {
        fprintf(stderr, "failed to get attribute name, %s\n",
                mrt_PortalErrorString(pcode)) ;
        break ;
    }
}
}]

[call "int [fun mrt_PortalClassAttributeSize]([arg portal], [arg classId],\
        [arg attrId])"]

[list_begin arguments]
[arg_def "MRT_DomainPortal const *const" portal in]
A pointer to the portal data that describes a domain.
[arg_def MRT_ClassId classId in]
A non-negative integer value that identifies a class in the domain.
[arg_def MRT_AttrId attrId in]
A non-negative integer value that identifies an attribute of a class.
[list_end]

The [fun mrt_PortalClassAttributeSize] function returns the number of
bytes occupied by a value of the [arg attrId] of the [arg classId]
class in the domain described by [arg portal].
If successful,
the return value of the function is a positive
number of bytes occupied by the attribute value.
Upon failure,
the return value is one of the [sectref "Error Codes" "portal error codes"].


[call "int [fun mrt_PortalClassEventCount]([arg portal], [arg classId])"]

[list_begin arguments]
[arg_def "MRT_DomainPortal const *const" portal in]
A pointer to the portal data that describes a domain.
[arg_def MRT_ClassId classId in]
A non-negative integer value that identifies a class in the domain.
[list_end]

The [fun mrt_PortalClassEventCount] function returns the number of
events associated with the state model of the [arg classId] class in the
domain described by [arg portal].
If successful,
the return value of the function is a positive
number giving the number of events in the state model.
Events are numbered from 0 to the return value of the function minus one.
Upon failure,
the return value is one of the [sectref "Error Codes" "portal error codes"].

[call "int [fun mrt_PortalClassEventName]([arg portal], [arg classId],\
        [arg eventNumber] [arg nameRef])"]

[list_begin arguments]
[arg_def "MRT_DomainPortal const *const" portal in]
A pointer to the portal data that describes a domain.
[arg_def MRT_ClassId classId in]
A non-negative integer value that identifies a class in the domain.
[arg_def MRT_EventCode eventNumber in]
A non-negative integer value that identifies an event in the class.
[arg_def "char const ** const" nameRef out]
A pointer to a character pointer by which the event name is returned.
[list_end]

The [fun mrt_PortalClassEventName] function obtains the name of the
[arg eventNumber] event of the [arg classId] class in the domain described
by [arg portal].
The name is returned via [arg nameRef] as a pointer to a [const NUL]
terminated string.
If the domain was compiled with the preprocessor symbol
[const MRT_NO_NAMES] defined, then the value placed in the
location pointed to by [arg nameRef] is [const NULL].
If successful,
the return value of the function is zero.
Upon failure,
the return value is one of the [sectref "Error Codes" "portal error codes"].

[example {
int eventCount = mrt_PortalClassEventCount(&wmctrl__PORTAL,
        WMCTRL_WASHINGMACHINE_CLASSID) ;
assert(eventCount > 0) ;

for (int eventId = 0 ; eventId < eventCount ; eventId++) {
    char const *eventName ;
    int pcode = mrt_PortalClassEventName(&wmctrl__PORTAL,
            WMCTRL_WASHINGMACHINE_CLASSID, eventId, &eventName) ;

    if (pcode == 0) {
        if (eventName != NULL) {
            printf("event %d is named %s\n", eventId, eventName) ;
        } else {
            printf("no name available for event %d\n", eventId) ;
        }
    } else {
        fprintf(stderr, "failed to get event name, %s\n",
                mrt_PortalErrorString(pcode)) ;
        break ;
    }
}
}]

[call "int [fun mrt_PortalClassInstanceCount]([arg portal], [arg classId])"]

[list_begin arguments]
[arg_def "MRT_DomainPortal const *const" portal in]
A pointer to the portal data that describes a domain.
[arg_def MRT_ClassId classId in]
A non-negative integer value that identifies a class in the domain.
[list_end]

The [fun mrt_PortalClassInstanceCount] function returns the maximum number of
instances that may exist for the [arg classId] class in the domain described
by [arg portal].
If successful,
the return value of the function is a positive number giving the count of the
instance storage slots of [arg classId].
Instances are identified via sequential integers from zero to the
return value of the function minus one.
Upon failure,
the return value is one of the [sectref "Error Codes" "portal error codes"].

[call "int [fun mrt_PortalClassName]([arg portal], [arg classId],\
    [arg nameRef])"]

[list_begin arguments]
[arg_def "MRT_DomainPortal const *const" portal in]
A pointer to the portal data that describes a domain.
[arg_def MRT_ClassId classId in]
A non-negative integer value that identifies a class in the domain.
[arg_def "char const ** const" nameRef out]
A pointer to a character pointer by which the class name is returned.
[list_end]

The [fun mrt_PortalClassName] function obtains the name of the [arg classId]
class in the domain described by [arg portal].
The class name is returned via [arg nameRef] as a pointer to a [const NUL]
terminated string.
If the domain was compiled with the preprocessor symbol
[const MRT_NO_NAMES] defined, then the value placed in the
location pointed to by [arg nameRef] is [const NULL].
If successful,
the return value of the function is zero.
Upon failure,
the return value is one of the [sectref "Error Codes" "portal error codes"].

[call "int [fun mrt_PortalClassStateCount]([arg portal], [arg classId])"]

[list_begin arguments]
[arg_def "MRT_DomainPortal const *const" portal in]
A pointer to the portal data that describes a domain.
[arg_def MRT_ClassId classId in]
A non-negative integer value that identifies a class in the domain.
[list_end]

The [fun mrt_PortalClassStateCount] function returns the number of
states associated with the state model of the [arg classId] class in the
domain described by [arg portal].
If successful,
the return value of the function is a positive
number giving the number of events in the state model.
Events are numbered from 0 to the return value of the function minus one.
Upon failure,
the return value is one of the [sectref "Error Codes" "portal error codes"].

[call "int [fun mrt_PortalClassStateName]([arg portal], [arg classId],\
        [arg stateCode] [arg nameRef])"]

[list_begin arguments]
[arg_def "MRT_DomainPortal const *const" portal in]
A pointer to the portal data that describes a domain.
[arg_def MRT_ClassId classId in]
A non-negative integer value that identifies a class in the domain.
[arg_def MRT_StateCode stateCode in]
A non-negative integer value that identifies a state in the class.
[arg_def "char const ** const" nameRef out]
A pointer to a character pointer by which the state name is returned.
[list_end]

The [fun mrt_PortalClassStateName] function obtains the name of the
[arg stateCode] state of the [arg classId] class in the domain described
by [arg portal].
The name is returned via [arg nameRef] as a pointer to a [const NUL]
terminated string.
If the domain was compiled with the preprocessor symbol
[const MRT_NO_NAMES] defined, then the value placed in the
location pointed to by [arg nameRef] is [const NULL].
If successful,
the return value of the function is zero.
Upon failure,
the return value is one of the [sectref "Error Codes" "portal error codes"].

[call "int [fun mrt_PortalDomainClassCount]([arg portal])"]

[list_begin arguments]
[arg_def "MRT_DomainPortal const *const" portal in]
A pointer to the portal data that describes a domain.
[list_end]

The [fun mrt_PortalDomainClassCount] function returns the number of classes
defined in the domain described by [arg portal].
Classes are identified by numbers from 0 to the return value of the
function minus one.

[call "char const *[fun mrt_PortalDomainName]([arg portal])"]

[list_begin arguments]
[arg_def "MRT_DomainPortal const *const" portal in]
A pointer to the portal data that describes a domain.
[list_end]

The [fun mrt_PortalDomainName] function returns a pointer to a
[const NUL] terminated string giving the name of the
domain described by [arg portal].
If the domain was compiled with the preprocessor symbol
[const MRT_NO_NAMES] defined, then the return value is [const NULL].

[list_end]

[see_also micca]
[see_also embedded]

[keywords translation]

[manpage_end]
