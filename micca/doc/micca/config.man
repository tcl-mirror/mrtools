[manpage_begin micca-DSL n 0.1]
[comment {
# This software is copyrighted 2015 - 2016 by G. Andrew Mangogna.
# The following terms apply to all files associated with the software unless
# explicitly disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors and
# need not follow the licensing terms described here, provided that the
# new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
# OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
# THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
# OR MODIFICATIONS.
# 
# GOVERNMENT USE: If you are acquiring this software on behalf of the
# U.S. government, the Government shall have only "Restricted Rights"
# in the software and related documentation as defined in the Federal
# Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
# are acquiring the software on behalf of the Department of Defense,
# the software shall be classified as "Commercial Computer Software"
# and the Government shall have only "Restricted Rights" as defined in
# Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
# the authors grant the U.S. Government and others acting in its behalf
# permission to use and distribute the software in accordance with the
# terms specified in this license.
}]
[moddesc "Micca Configuration DSL"]
[titledesc "Commands for Defining a Domain"]
[copyright "2015 - 2016 by G. Andrew Mangogna"]
[description]
This manpage describes the [cmd micca] DSL.

[section Commands]
[list_begin definitions]
[call [cmd domain] [arg name] [arg body]]

The [cmd domain] command defines a domain named, [arg name], and evaluates
[arg body] in a context where commands in [arg body] may be used to define
the characteristics of a domain.
The [arg body] argument should be a script containing commands
that define the characteristics of the domain.
It is evaluated in a context where the
[sectref "Domain Commands" "domain commands"]
described below are available.

[example {
domain wmctrl {
# A script containing domain commands to define the domain.
}
}]

[call [cmd population] [arg name] [arg body]]

[list_end]

[section "Domain Commands"]

The commands in this section are used to define the characteristics
of a domain using the [cmd micca] DSL.
These are the commands that are available when the [arg body]
argument of the [cmd domain] is evaluated.

[list_begin definitions]
[call [cmd interface] [arg text]]
The [cmd micca] code generator produces a header file for the domain.
The [cmd interface] command will insert [arg text] near the beginning
of the generated header file.
The [cmd interface] command may be invoked multiple times,
and the text is concatenated in the order the commands are encountered.
This command is typically used to for declaration and include
files needed by other code in the domain.

[example {
class A {
    interface {#include "myheader.h"}
}
}]

[call [cmd prologue] [arg text]]
[call [cmd epilogue] [arg text]]
[call [cmd class] [arg name] [arg script]]
[call [cmd association] [arg name] [arg [opt "-associator class"]] [arg source]\
        [arg spec] [arg target] [arg [opt script]]]
[call [cmd generalization] [arg name] [arg [opt "-union | -reference"]]\
        [arg super] [arg sub1] [arg sub2] [arg [opt ...]]]
[call [cmd typealias] [arg name] [arg definition]]
[call [cmd domainop] [arg rettype] [arg name] [arg parameters] [arg body]\
        [arg [opt comment]]]
[call [cmd externalop] [arg rettype] [arg name] [arg parameters] [arg body]\
        [arg [opt comment]]]

[list_end]

[section "Class Commands"]

[list_begin definitions]
[call [cmd attribute] [arg name] [arg type] [arg [opt "-default value"]]\
        [arg [opt "-dimension size"]]]
The [cmd attribute] defines [arg name] to be an attribute of the
enclosing class.
The attribute has a data type of [arg type].
[arg Name] must be a valid "C" identifier and [arg type] must be
a valid "C" type name or a type name given by the [cmd typealias] command.
A default value for the attribute may optionally be specified using
the [option -default] option.
Default values are used in any context where the an instance of the
class is created and no value for the attribute is given in the
creation invocation.
The [arg value] of a default value must be a valid "C" initializer and
is passed directly to the generated code.
The attribute can be specified as an array by including the
[option -dimension] option.
The [arg size] specifies the number of elements in the attribute array value.
By special dispensation,
attributes of type [option char] and dimension greater than 0 are treated
as NUL terminated strings in the usual "C" conventions.

[example {
class Washer {
    attribute ModelName char -dimension 20 ; # This is a NUL terminated string
    attribute Capacity unsigned -default 4
}
}]

[call [cmd polymorphic] [arg event] [arg [opt "argname argtype ..."]]]
[call [cmd classop] [arg rettype] [arg name] [arg parameters] [arg body]]
[call [cmd instop] [arg rettype] [arg name] [arg parameters] [arg body]]
[call [cmd statemodel] [arg body]]
[call [cmd constructor] [arg body]]
[call [cmd destructor] [arg body]]
[list_end]

[section "State Model Commands"]

[list_begin definitions]
[call [cmd state] [arg name] [arg parameters] [arg body]]
[call [cmd event] [arg name] [arg [opt "argname argtype ..."]]]
[call [cmd transition] [arg currstate] [arg event] [arg newstate]]
[call [cmd initialstate] [arg state]]
[call [cmd defaulttrans] [arg transition]]
[call [cmd terminal] [arg [opt "state ..."]]]
[list_end]

[section "Assigner State Model Commands"]
[list_begin definitions]
[call [cmd identifyby] [arg class]]
[list_end]

[section "Population Commands"]

[list_begin definitions]
[call [cmd class] [arg name] [arg script]]
[call [cmd assigner] [arg association] [arg script]]
[list_end]

[section "Class Population Commands"]
[list_begin definitions]
[call [cmd instance] [arg name] [arg comp1] [arg values1] [arg [opt ...]]]
[call [cmd table] [arg heading] [arg name1] [arg values1] [arg [opt ...]]]
[call [cmd allocate] [arg size]]
[list_end]

[section "Assigner Population Commands"]
[list_begin definitions]
[call [cmd instance] [arg name] [arg idinstance]]
[list_end]

[see_also micca]

[keywords executable model]

[manpage_end]
