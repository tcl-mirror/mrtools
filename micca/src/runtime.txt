// vim:set syntax=asciidoc:

= Runtime Support

[partintro]
.Runtime Support
--
Runtime Support
--

== Introduction
Introduction

== Main Loop

[source,c]
----
int
main(void)
{
    mrt_Init() ;

    // other initializations, such as hardware, domains, etc.

    mrt_EnterEventLoop() ;
}
----

[source,c]
----
<<mrt external interface>>=
extern void mrt_EventLoop(void) ;

<<mrt external functions>>=
void
mrt_EventLoop(void)
{
    for (exitEventLoop = false ; !exitEventLoop ;
            exitEventLoop = false) {

        <<EventLoop: background sync>>

        if (!dispatchOneEvent()) {
            mrt_Wait() ;
        }
    }
}
----

[source,c]
----
<<mrt external interfaces>>=
extern bool mrt_ProcessOneEvent(void) ;

<<mrt external functions>>=
bool
mrt_ProcessOneEvent(void)
{
    <<EventLoop: background sync>>
    return dispatchOneEvent() ;
}
----

[source,c]
----
<<mrt static data>>=
static bool exitEventLoop ;
----

[source,c]
----
<<mrt external interface>>=
extern bool mrt_SyncEventLoop() ;

<<mrt external functions>>=
bool
mrt_SyncEventLoop(void)
{
    bool exitControl = exitEventLoop ;
    exitEventLoop = true ;
    return exitControl ;
}
----

== Managing Data

=== Class Instances

[source,c]
----
<<mrt interface data types>>=
typedef struct mrtinstance {
    struct mrtclass const *instClass ;
    AllocStatus alloc ;
    StateCode currentState ;
} MRT_Instance ;
----

[source,c]
----
<<mrt interface simple types>>=
typedef int8_t AllocStatus ;
----

[source,c]
----
<<mrt interface simple types>>=
typedef int8_t StateCode ;
----

[source,c]
----
<<mrt constants>>=
static const StateCode StateCode_IG = -1 ;
static const StateCode StateCode_CH = -2 ;
----

== Foreground / Background Synchronization

[source,c]
----
<<mrt static functions>>=
#   ifndef __ARM_ARCH_7M__
while (invokeOneSyncFunc()) {
    ; /* empty */
}
#   endif
----

=== Dispatching Synchronization Functions


[source,c]
----
<<mrt sync components interface>>=
static inline bool invokeOneSyncFunction(void) ;

<<mrt sync components>>=
static inline bool
invokeOneSyncFunction(void)
{
    bool didOne ;

    FgSyncBlock blk = syncQueueGet() ;
    if (blk != NULL && blk->function != NULL) {
        blk->function(&blk->params) ;
        didOne = true ;
    } else {
        didOne = false ;
    }

    return didOne ;
}
----

[source,c]
----
<<ARM 7M components>>=
void
PendSV_Handler(void)
{
    for (FgSyncBlock *blk = syncQueueGet() ; blk != NULL ; blk = syncQueueGet()) {
        if (blk->function) {
            blk->function(&blk->params) ;
        }
    }
}
----
