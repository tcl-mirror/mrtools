// vim:set syntax=asciidoc:

[preface]
= Preface
This book is about a program named, `micca`.
`Micca` is program that translates a platform dependent specification
of an Executable UML domain into ``C'' code.
It is part of an strategy to translate xUML models into code.

This book is also a
http://www.literateprogramming.com[literate program].
As such it contains all the source code for `micca` interspersed with
design information.
The <<literate-programming,literate program>> syntax used is similar
to the ``noweb'' approach.
This document provides several roots for extraction of code.
This includes not only the code for `micca` itself, but also for the
run-time code and test cases.

There are four major components to `micca`.

. A platform model that describes how the translation will operate on
the target platform.
. A domain specific language (DSL) that is used to populate the platform model.
. Run-time code that provides data and execution sequencing according
to the xUML execution rules.
. An embedded command language that is used by domain actions to bridge
between model level operations and the implementation provided by
run-time code.

This book is divided into eight parts:

Part I -- Translation::
    An overview of xUML translation and how `micca` fits into the workflow.
Part II -- An Example::
    An example domain, translated by `micca`.
Part III -- The Micca Platform::
    The platform model for `micca`.
Part IV -- Configuring a Domain::
    The configuration DSL used to define a domain to `micca`.
Part V -- Runtime Support::
    The ``C'' code for the run-time component.
Part VI -- Generating ``C'' Code::
    `Micca` generates data structures to use with the runtime and expands
    embedded commands used to interface domain actions to the run-time code.
Part VII -- Code Organization::
    The organization of `micca` code files.
Part VIII -- Reference Materials
    Additional background and reading materials.

This book contains a lot of material.
You are not expected to read it front to back.
Skipping around when reading this much material is encouraged.
For readers new to xUML, the example in Part II is a good place to start.
Those readers with more exposure to similar translation schemes
(_e.g._ `pycca` or `rosea`) may find Part IV a good starting point in
order to compare the configuration DSL between the various schemes.
For hard core ``C'' programmers,
Part V on the run-time code has some interesting aspects as to
how referential integrity is enforced.
For those more interested in how platform model data may be queried and
used to generate ``C'' code,
Part VI gives the details of how the embedded macro commands for
domain actions are translated into code.

This book is also a literate program.
See <<literal-programming>> for a description of the literate programming
syntax.
The syntax is not complicated, but you will need to know it
to make much sense of any code sequences in the book.
Being a literate program document means that all the source code for
`micca` is included here.
The `micca` program (and many other components) is built by extracting
the source from the document source.
Including the source code and all the design discussion makes the
text rather long
and skipping around when reading is encouraged.

The next part of the book presents a simple example.
This will give you a general sense of how model translation with
`micca` works.

After the example,
we consider the four major components of `micca`:

. The platform model. This is a complete model of the platform
specifics that the translation targets.
This model is populated by the micca configuration process
and is the information source for the code generation.
. The configuration language is a command language where the elements
of a domain are defined.
. The run-time code implements in ``C'' the model execution rules and
any other things that are not directly supported by the implementation
language.
. Finally, the code generation portion creates the data needed by the
run-time code and expands the embedded commands in domain activities to
``C'' code.
