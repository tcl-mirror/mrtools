// vim:set syntax=asciidoc:

= Code Organization

[partintro]
--
In this section we show the organization of the files that can be
tangled from the literate source.
--

== Copyright Information

First, this software is copyrighted.
It is licensed in the same manner as Tcl itself.

[source,tcl]
----
<<copyright info>>=
# DO NOT EDIT THIS FILE!
# THIS FILE IS AUTOMATICALLY GENERATED FROM A LITERATE PROGRAM SOURCE FILE.
#
# This software is copyrighted 2015 by G. Andrew Mangogna.
# The following terms apply to all files associated with the software unless
# explicitly disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors and
# need not follow the licensing terms described here, provided that the
# new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
# OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
# THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
# OR MODIFICATIONS.
# 
# GOVERNMENT USE: If you are acquiring this software on behalf of the
# U.S. government, the Government shall have only "Restricted Rights"
# in the software and related documentation as defined in the Federal
# Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
# are acquiring the software on behalf of the Department of Defense,
# the software shall be classified as "Commercial Computer Software"
# and the Government shall have only "Restricted Rights" as defined in
# Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
# the authors grant the U.S. Government and others acting in its behalf
# permission to use and distribute the software in accordance with the
# terms specified in this license.
----

Each _root chunk_ is described in a section below.

== Source Code

[source,tcl]
----
<<micca.tcl>>=
<<copyright info>>

package require Tcl 8.6
package require logger
<<required packages>>

rosea configure {
    domain micca {
        <<micca configuration>>
    }
}
rosea generate micca

rosea populate {
    domain micca {
        class TransitionRule    {
            Name                } {
            IG
            CH
        }
    }
}

namespace eval ::micca {
    <<configuration commands namespace>>
}

package provide micca 0.1
----

== Micca Namespace Structure

We start with some preliminaries.
Since we are using TclRAL extensively,
we need to pull in the package and its utility package.

[source,tcl]
----
<<required packages>>=
package require rosea
----

We will find it convenient to import some of the commands from
TclRAL since we will be using them repeatedly.

[source,tcl]
----
<<tclral imports>>=
namespace import\
    ::ral::relation\
    ::ral::tuple\
    ::ral::relformat\
    ::ralutil::pipe
----

The +::ralutil::pipe+ command is used extensively in the code for +micca+.
This command has nothing to do with relational algebra but rather
is a control structure.
It allows a sequence of operations to be written as a linear ``pipe''
where the result of one command is used as an argument to the next.
It turns out that such sequencing is common in relational algebraic
processing.
What the command does is rewrite the sequence into a set of nested procedure
invocations.
It is a classic Tcl control structure type of procedure and makes it
much easier to understand a sequence of operations without having to
tease apart the procedure nesting or introduce superfluous variables.

[source,tcl]
----
<<micca namespace layout>>=
<<helper commands namespace>>
<<configuration commands namespace>>
----

== Unit Tests

[source,tcl]
----
<<micca.test>>=
<<copyright info>>

package require Tcl 8.6
package require cmdline
package require logger
package require uuid

<<required packages>>

# Add custom arguments here.
set optlist {
    {level.arg warn {Log debug level}}
}
array set options [::cmdline::getKnownOptions argv $optlist]

logger::setlevel $options(level)

source ../src/micca.tcl
chan puts "testing micca version: [package require micca]"

package require tcltest
eval tcltest::configure $argv

namespace eval ::micca::test {
    namespace import ::tcltest::*
    ::logger::initNamespace [namespace current]

    <<tclral imports>>
    namespace import ::ral::relvar
    namespace path {::micca ::micca::@Config@::Helpers ::rosea::InstCmds}
    <<test utility commands>>

    <<config command tests>>

    cleanupTests
}
----

////
----
test X-1.0 {
} -setup {
} -cleanup {
} -body {
} -result {}
----
////

