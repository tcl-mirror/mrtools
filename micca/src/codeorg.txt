// vim:set syntax=asciidoc:

= Code Organization

[partintro]
--
In this section we show the organization of the files that can be
tangled from the literate source.
--

== Version Information

----
<<version info>>=
Micca version: 0.1
----

== Edit Warning

----
<<edit warning>>=
# DO NOT EDIT THIS FILE!
# THIS FILE IS AUTOMATICALLY GENERATED FROM A LITERATE PROGRAM SOURCE FILE.
#
----

== Copyright Information

First, this software is copyrighted.
It is licensed in the same manner as Tcl itself.

[source,tcl]
----
<<copyright info>>=
# This software is copyrighted 2015 - 2017 by G. Andrew Mangogna.
# The following terms apply to all files associated with the software unless
# explicitly disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors and
# need not follow the licensing terms described here, provided that the
# new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
# OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
# THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
# OR MODIFICATIONS.
# 
# GOVERNMENT USE: If you are acquiring this software on behalf of the
# U.S. government, the Government shall have only "Restricted Rights"
# in the software and related documentation as defined in the Federal
# Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
# are acquiring the software on behalf of the Department of Defense,
# the software shall be classified as "Commercial Computer Software"
# and the Government shall have only "Restricted Rights" as defined in
# Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
# the authors grant the U.S. Government and others acting in its behalf
# permission to use and distribute the software in accordance with the
# terms specified in this license.
----

Each _root chunk_ is described in a section below.

== Source Code

We start with some preliminaries.
Since `micca` is a `rosea` based appplication
we will need the `rosea` package.

[source,tcl]
----
<<required packages>>=
package require rosea
----

We will find it convenient to import some of the commands from
TclRAL since we will be using them repeatedly.

[source,tcl]
----
<<tclral imports>>=
namespace import\
    ::ral::relation\
    ::ral::tuple\
    ::ral::relformat\
    ::ralutil::pipe
----

The +::ralutil::pipe+ command is used extensively in the code for +micca+.
This command has nothing to do with relational algebra but rather
is a control structure.
It allows a sequence of operations to be written as a linear ``pipe''
where the result of one command is used as an argument to the next.
It turns out that such sequencing is common in relational algebraic
processing.
The command rewrites a linear sequence of commands into a set of nested
procedure invocations.
It is a classic Tcl control structure type of procedure and makes it
much easier to understand a sequence of operations without having to
tease apart the procedure nesting or introduce superfluous variables.

[source,tcl]
----
<<micca.tcl>>=
<<edit warning>>
<<copyright info>>

package require Tcl 8.6
package require logger
<<required packages>>

rosea configure {
    domain micca {
        <<micca configuration>>
    }
}
rosea generate micca

namespace eval ::micca {
    variable version 0.1

    logger::initNamespace [namespace current]

    proc logproc {level txt} {
        if {[string match {-_logger*} $txt]} {
            set txt [lindex $txt end]
        }
        puts "micca: $level: $txt"
    }
    proc errorlogproc {txt} {
        logproc error $txt
    }
    proc warnlogproc {txt} {
        logproc warn $txt
    }
    log::logproc error [namespace current]::errorlogproc
    log::logproc warn [namespace current]::warnlogproc

    <<tclral imports>>
    namespace import ::ral::relvar

    <<micca constraints>>
    <<configuration commands namespace>>
    <<generation commands namespace>>
}

rosea populate {
    domain micca {
        <<micca population>>
    }
}

package provide micca $::micca::version
----

== Micca Starpack Application

[source,c]
----
<<micca_main.tcl>>=
<<edit warning>>
<<copyright info>>

set iswrapped [expr {[lindex [file system [info script]] 0] ne "native"}]
if {$iswrapped} {
    set top [file join $::starkit::topdir lib application]
    if {$::tcl_platform(os) eq "Linux"} {
        set libs [glob -nocomplain\
            -directory [file join $::starkit::topdir lib]\
            P-linux-*]
        foreach lib $libs {
            lappend ::auto_path $lib
        }
    }
} else {
    set top [file dirname [info script]]
}

source [file join $top micca.tcl]
package require micca
package require cmdline

set cmdOpts {
    {version {Print out version information and exit}}
    {stubexternalops {Include external operation code in output}}
    {nogenerate {Don't generate any output files}}
    {save.arg {} {Save the domain configuration to a file}}
    {savesqlite.arg {} {Save the domain configuration to a SQLite database}}
    {posix {Output the POSIX run time code and exit}}
    {msp432 {Output the arm7m run time code and exit}}
    {efm32gg {Output the arm7m run time code and exit}}
    {msp430 {Output the msp430 run time code and exit}}
    {expanderror.arg fail {How macro expansion errors are handled}}
    {debug.secret {Turn on debugging output}}
}

set usage "\[options] file1 file2 ...\noptions:\n"
try {
    set options [cmdline::getoptions argv $cmdOpts $usage]
} on error {result} {
    puts stderr $result
    exit 1
}

if {[dict get $options version]} {
    chan puts "micca: version $::micca::version"
    chan puts {
<<copyright info>>
}
    exit 0
} elseif {[dict get $options posix]} {
    file copy -force [file join $top posix micca_rt.h] ./micca_rt.h
    file copy -force [file join $top posix micca_rt_internal.h]\
            ./micca_rt_internal.h
    file copy -force [file join $top posix micca_rt.c] ./micca_rt.c
    exit 0
} elseif {[dict get $options msp432]} {
    file copy -force [file join $top arm-7m msp432 micca_rt.h] ./micca_rt.h
    file copy -force [file join $top arm-7m msp432 micca_rt_internal.h]\
            ./micca_rt_internal.h
    file copy -force [file join $top arm-7m msp432 micca_rt.c] ./micca_rt.c
    exit 0
} elseif {[dict get $options efm32gg]} {
    file copy -force [file join $top arm-7m efm32gg micca_rt.h] ./micca_rt.h
    file copy -force [file join $top arm-7m efm32gg micca_rt_internal.h]\
            ./micca_rt_internal.h
    file copy -force [file join $top arm-7m efm32gg micca_rt.c] ./micca_rt.c
    exit 0
} elseif {[dict get $options msp430]} {
    file copy -force [file join $top msp430 micca_rt.h] ./micca_rt.h
    file copy -force [file join $top msp430 micca_rt_internal.h]\
            ./micca_rt_internal.h
    file copy -force [file join $top msp430 micca_rt.c] ./micca_rt.c
    exit 0
}

foreach file $argv {
    micca configureFromFile $file
}

if {[dict get $options save] ne {}} {
    ral serializeToFile [dict get $options save] ::micca::*
}

if {[dict get $options savesqlite] ne {}} {
    ral storeToSQLite [dict get $options savesqlite] ::micca::*
}

if {![dict get $options nogenerate]} {
    try {
        set genfiles [micca generate {*}$options]
    } on error {result} {
        puts stderr $result
        exit 1
    }
}

exit 0
----

ifdef::showtests[]
== Unit Tests

[source,tcl]
----
<<micca.test>>=
<<edit warning>>
<<copyright info>>

package require Tcl 8.6
package require cmdline
package require logger

<<required packages>>
package require fileutil
source ./validateutils.tcl
set validateutils::keepTemps false

# Add custom arguments here.
set optlist {
    {level.arg warn {Logging level}}
    {noconfig {Don't run config tests}}
    {nogenerate {Don't run generate tests}}
}
array set options [::cmdline::getKnownOptions argv $optlist]

logger::setlevel $options(level)

source ../code/tcl/micca.tcl
chan puts "testing micca version: [package require micca]"

package require tcltest
eval tcltest::configure $argv

namespace eval ::micca::test {
    namespace import ::tcltest::*
    ::logger::initNamespace [namespace current] $::options(level)

    <<tclral imports>>
    namespace import ::ral::relvar
    namespace path {::micca ::micca::@Config@::Helpers ::rosea::InstCmds}
    <<test utility commands>>

    if {!$::options(noconfig)} {
        <<config command tests>>
    }
    if {!$::options(nogenerate)} {
        <<generate command tests>>
    }

    cleanupTests
}
----

////
----
test X-1.0 {
} -setup {
} -cleanup {
} -body {
} -result {}
----
////
endif::showtests[]
