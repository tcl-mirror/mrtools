#!/usr/bin/env tclsh
# This software is copyrighted 2015 - 2017 by G. Andrew Mangogna.
# The following terms apply to all files associated with the software unless
# explicitly disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors and
# need not follow the licensing terms described here, provided that the
# new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
# OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
# THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
# OR MODIFICATIONS.
# 
# GOVERNMENT USE: If you are acquiring this software on behalf of the
# U.S. government, the Government shall have only "Restricted Rights"
# in the software and related documentation as defined in the Federal
# Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
# are acquiring the software on behalf of the Department of Defense,
# the software shall be classified as "Commercial Computer Software"
# and the Government shall have only "Restricted Rights" as defined in
# Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
# the authors grant the U.S. Government and others acting in its behalf
# permission to use and distribute the software in accordance with the
# terms specified in this license.

package require Tcl 8.6
package require cmdline
package require logger

package require rosea

# Add custom arguments here.
set optlist {
    {level.arg warn {Logging level}}
}
array set options [::cmdline::getKnownOptions argv $optlist]

logger::setlevel $options(level)

source ../code/tcl/micca.tcl
chan puts "testing micca version: [package require micca]"

package require tcltest
eval tcltest::configure $argv

namespace eval ::micca::test {
    namespace import ::tcltest::*
    ::logger::initNamespace [namespace current] $::options(level)

    namespace import\
        ::ral::relation\
        ::ral::tuple\
        ::ral::relformat\
        ::ralutil::pipe
    namespace import ::ral::relvar
    namespace path {::micca ::micca::@Config@::Helpers ::rosea::InstCmds}
    proc testConditions {args} {
        set result 1
        foreach exp $args {
            set passed [uplevel 1 [list expr $exp]]
            if {!$passed} {
                log::error "\"$exp\" failed"
                set result 0
            }
        }
        return $result
    }

    test domain-1.0 {
        unknown domain command
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                foobar ; # A command that isn't known
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test interface-1.0 {
        wrong number of arguments to interface command
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                interface foo bar
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test class-1.0 {
        bad class command
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                class bar {
                    domain fred
                    attribute a int
                }
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test association-1.0 {
        bad association option
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                association R27 -foobar X 1--1 Y
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test association-2.0 {
        empty association name
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                association {} X 1--1 Y
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test association-3.0 {
        tilde in association name
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                association ~R27 X 1--1 Y
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test association-4.0 {
        wrong number of association arguments
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                association R27 X 1--1
                association R28 X 1--1 Y {} Z
            }
        }
    } -result {2 configuration script error(s)} -returnCodes error

    test association-5.0 {
        using -- to stop argument parsing, undefined classes
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                association R27 -- X 1--1 Y
            }
        }
    } -result {2 configuration script error(s)} -returnCodes error

    test association-6.0 {
        bad association spec
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                association R27 X 1--0..1 Y
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test association-6.0 {
        association must be class based
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                association R27 X 0..1--0..1 Y
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test generalization-1.0 {
        bad option
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                generalization R30 -foo S A B
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test generalization-2.0 {
        too few subclasses
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                generalization R30 S A 
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test generalization-3.0 {
        super class as a subclass
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                generalization R30 S A B S
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test generalization-4.0 {
        duplicate subclass
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                generalization R30 S A B A
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test generalization-5.0 {
        creation events sent to union subclass
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                generalization R30 -union S A B
                class S {}
                class A {}
                class B {
                    attribute b int
                    statemodel {
                        state s1 {} {
                            printf("in s1\n") ;
                        }
                        transition @ - Start -> s1
                    }
                }
            }
        }
    } -result {0}

    test generalization-6.0 {
        duplicate generalization name
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                generalization R30 S A B
                generalization R30 S A B
                class S {}
                class A {}
                class B {}
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test attribute-1.0 {
        empty name
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                class A {
                    attribute a int
                    attribute {} int
                }
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test attribute-2.0 {
        bad options format
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                class A {
                    attribute b char
                    attribute a int -default
                }
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test attribute-3.0 {
        bad option
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                class A {
                    attribute b char
                    attribute a int -foo 22
                }
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test attribute-4.0 {
        duplicate attribute name
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                class A {
                    attribute a char
                    attribute b char
                    attribute b char
                }
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test polymorphic-1.0 {
        duplicate polymorphic event name; polymorphic event in ordinary class
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                class A {
                    attribute a char
                    polymorphic e1
                    polymorphic e1
                }
            }
        }
    } -result {2 configuration script error(s)} -returnCodes error

    test statemodel-1.0 {
        define outgoing transitions on a final state
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                class A {
                    attribute a int
                    statemodel {
                        state s1 {} {
                        }
                        transition s1 - e1 -> s2

                        state s2 {} {
                        }
                        final s2
                        transition s2 -> e1 -> s1
                    }
                }
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test statemodel-2.0 {
        isolated states
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                class A {
                    attribute a int
                    statemodel {
                        state s1 {} {
                        }
                        transition s1 - e1 -> s2

                        state s2 {} {
                        }
                        transition s2 -> e1 -> s1

                        state s3 {} {}
                    }
                }
            }
        }
    } -result 0 -output {micca: [warn] 'In domain, "foo", class, "A", state(s), "s3", have no inbound or outbound transitions and is(are) not the default initial state; the state(s) are unreachable unless an instance is explicitly created in the state'
}

    test statemodel-3.0 {
        bad default transition
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                class A {
                    attribute a int
                    statemodel {
                        defaulttrans FOO
                        state s1 {} {
                        }
                        transition s1 - e1 -> s2

                        state s2 {} {
                        }
                        transition s2 -> e1 -> s1
                    }
                }
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test statemodel-4.0 {
        bad initial state definition
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                class A {
                    attribute a int
                    statemodel {
                        initialstate @
                        state s1 {} {
                        }
                        transition s1 - e1 -> s2

                        state s2 {} {
                        }
                        transition s2 -> e1 -> s1
                    }
                }
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test statemodel-5.0 {
        unknown initial state definition
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                class A {
                    attribute a int
                    statemodel {
                        initialstate s3
                        state s1 {} {
                        }
                        transition s1 - e1 -> s2

                        state s2 {} {
                        }
                        transition s2 -> e1 -> s1
                    }
                }
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test statemodel-6.0 {
        unknown final state
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                class A {
                    attribute a int
                    statemodel {
                        state s1 {} {
                        }
                        transition s1 - e1 -> s1

                        final s2
                    }
                }
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test state-1.0 {
	duplicate state name
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
		class A {
                    attribute a int
                    statemodel {
                        state s1 {} {}
                        state s1 {} {}
                        transition s1 - e1 -> s1
                    }
                }
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test state-2.0 {
	duplicate outgoing event name
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
		class A {
                    attribute a int
                    statemodel {
                        state s1 {} {}
                        state s2 {} {}
                        transition s1 - e1 -> s1
                        transition s1 - e1 -> s2
                    }
                }
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test state-3.0 {
	mismatched state / event parameter signatures
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
		class A {
                    attribute a int
                    statemodel {
                        state s1 {a int} {
                        }
                        state s2 {b unsigned} {
                        }

                        event e1 foo int
                        transition s1 - e1 -> s2
                    }
                }
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test assigner-1.0 {
	multiple assigner with bad id class
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
		class A {}
                class B {}
                association R23 A 1--1 B {
                    identifyby C
                    statemodel {
                        state s1 {a int} {
                        }
                        state s2 {b unsigned} {
                        }
                        transition s1 - e1 -> s2
                    }
                }
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test population-class-1.0 {
        populating unknown class
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                class A {
                    attribute a int
                }
            }
            population foo {
                class C {
                    instance c1 Temp 20
                }
            }
        }
    } -result {2 configuration script error(s)} -returnCodes error

    test population-class-2.0 {
        populating missing attributes in population
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                class A {
                    attribute a int
                    attribute b int
                }
            }
            population foo {
                class A {
                    instance a1 b 5
                }
            }
        }
    } -result {2 configuration script error(s)} -returnCodes error

    test population-class-2.1 {
        populating extra attributes in population
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                class A {
                    attribute a int
                    attribute b int
                }
            }
            population foo {
                class A {
                    instance a1 a 1 b 2 c 5
                }
            }
        }
    } -result {2 configuration script error(s)} -returnCodes error

    test population-class-2.2 {
        populating non-defaulted attributes in population
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                class A {
                    attribute a int
                    attribute b int
                }
            }
            population foo {
                class A {
                    instance a1 a 1 b -
                }
            }
        }
    } -result {1 configuration script error(s)} -returnCodes error

    test script-1.0 {
        improperly formatted script
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configureFromFile badscript.micca
    } -result {1 configuration script error(s)} -returnCodes error

if 0 {

    test xx-1.0 {
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
            }
        }
    } -result {x configuration script error(s)} -returnCodes error
}

    cleanupTests
}
