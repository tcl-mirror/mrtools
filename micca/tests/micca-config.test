#!/usr/bin/env tclsh
# This software is copyrighted 2015 - 2016 by G. Andrew Mangogna.
# The following terms apply to all files associated with the software unless
# explicitly disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors and
# need not follow the licensing terms described here, provided that the
# new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
# OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
# THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
# OR MODIFICATIONS.
# 
# GOVERNMENT USE: If you are acquiring this software on behalf of the
# U.S. government, the Government shall have only "Restricted Rights"
# in the software and related documentation as defined in the Federal
# Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
# are acquiring the software on behalf of the Department of Defense,
# the software shall be classified as "Commercial Computer Software"
# and the Government shall have only "Restricted Rights" as defined in
# Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
# the authors grant the U.S. Government and others acting in its behalf
# permission to use and distribute the software in accordance with the
# terms specified in this license.

package require Tcl 8.6
package require cmdline
package require logger

package require rosea

# Add custom arguments here.
set optlist {
    {level.arg warn {Logging level}}
}
array set options [::cmdline::getKnownOptions argv $optlist]

logger::setlevel $options(level)

source ../code/tcl/micca.tcl
chan puts "testing micca version: [package require micca]"

package require tcltest
eval tcltest::configure $argv

namespace eval ::micca::test {
    namespace import ::tcltest::*
    ::logger::initNamespace [namespace current] $::options(level)

    namespace import\
        ::ral::relation\
        ::ral::tuple\
        ::ral::relformat\
        ::ralutil::pipe
    namespace import ::ral::relvar
    namespace path {::micca ::micca::@Config@::Helpers ::rosea::InstCmds}
    proc testConditions {args} {
        set result 1
        foreach exp $args {
            set passed [uplevel 1 [list expr $exp]]
            if {!$passed} {
                log::error "\"$exp\" failed"
                set result 0
            }
        }
        return $result
    }

    test domain-1.0 {
        unknown domain command
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                foobar ; # A command that isn't known
            }
        }
    } -result {encountered 1 configuration script errors} -returnCodes error

    test interface-1.0 {
        wrong number of arguments to interface command
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                interface foo bar
            }
        }
    } -result {encountered 1 configuration script errors} -returnCodes error

    test class-1.0 {
        bad class command
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                class bar {
                    domain fred
                    attribute a int
                }
            }
        }
    } -result {encountered 1 configuration script errors} -returnCodes error

    test association-1.0 {
        bad association option
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                association R27 -foobar X 1--1 Y
            }
        }
    } -result {encountered 1 configuration script errors} -returnCodes error

    test association-2.0 {
        empty association name
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                association {} X 1--1 Y
            }
        }
    } -result {encountered 1 configuration script errors} -returnCodes error

    test association-3.0 {
        tilde in association name
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                association ~R27 X 1--1 Y
            }
        }
    } -result {encountered 1 configuration script errors} -returnCodes error

    test association-4.0 {
        wrong number of association arguments
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                association R27 X 1--1
                association R28 X 1--1 Y {} Z
            }
        }
    } -result {encountered 2 configuration script errors} -returnCodes error

    test association-5.0 {
        using -- to stop argument parsing, undefined classes
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                association R27 -- X 1--1 Y
            }
        }
    } -result {encountered 2 configuration script errors} -returnCodes error

    test association-6.0 {
        bad relationship spec
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
                association R27 X 1--0..1 Y
            }
        }
    } -result {encountered 1 configuration script errors} -returnCodes error

if 0 {

    test xx-1.0 {
    } -setup {
    } -cleanup {
        micca clear
    } -body {
        micca configure {
            domain foo {
            }
        }
    } -result {encountered x configuration script errors} -returnCodes error
}

    cleanupTests
}
