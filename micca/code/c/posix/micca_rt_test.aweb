
= Testing

[source,c]
----
<<micca_rt_test.c>>=
#include <CUnit/CUnit.h>
#include <CUnit/Basic.h>
#include "micca_rt.h"
#include "micca_rt.c"

<<test functions>>

<<instance allocation suite tests>>
<<execution suite tests>>

static CU_SuiteInfo suites[] = {
    <<test suites>>
    CU_SUITE_INFO_NULL,
} ;

int
main(
    int argc,
    char **argv)
{
    CU_initialize_registry() ;

    CU_register_suites(suites) ;

    CU_basic_run_tests() ;

    CU_cleanup_registry() ;
}
----

== Instance Allocation

[source,c]
----
<<test suites>>=
{"instance allocation", NULL, NULL, NULL, NULL, allocationSuiteTests},
----

[source,c]
----
<<instance allocation suite tests>>=
static CU_TestInfo allocationSuiteTests[] = {
    <<instance allocation test cases>>
    CU_TEST_INFO_NULL,
} ;
----

[source,c]
----
<<instance allocation test cases>>=
{"create instance", mrtTest_CreateInstance},

<<test functions>>=
static void
mrtTest_CreateInstance(void)
{
    struct myClass {
        MRT_Instance common ;
        int id ;
    } ;
    static struct myClass myClass_storage[10] ;
    static MRT_iab myClass_iab = {
        .storageStart = myClass_storage,
        .storageFinish = myClass_storage + COUNTOF(myClass_storage),
        .storageLast = myClass_storage + COUNTOF(myClass_storage) - 1,
        .alloc = 0,
        .instanceSize = sizeof(struct myClass),
        .construct = NULL,
        .destruct = NULL
    } ;

    static MRT_Class myClass_desc = {
        .iab = &myClass_iab,
        .edb = NULL,
        .pdb = NULL,
        .relCount = 0,
        .classRels = NULL,
        .name = "myClass"
    } ;

    struct myClass *inst = (struct myClass *)
            mrt_CreateInstance(&myClass_desc, MRT_StateCode_IG) ;
    CU_ASSERT_PTR_NOT_NULL(inst) ;
    CU_ASSERT(myClass_iab.storageLast == myClass_iab.storageStart) ;
    CU_ASSERT(myClass_iab.alloc == 1) ;
    CU_ASSERT(inst->common.classDesc == &myClass_desc) ;
    CU_ASSERT(inst->common.alloc == 1) ;
    CU_ASSERT(inst->common.currentState == MRT_StateCode_IG) ;
    CU_ASSERT(inst->common.refCount == 0) ;
}
----

[source,c]
----
<<instance allocation test cases>>=
{"delete instance", mrtTest_DeleteInstance},

<<test functions>>=
static void
mrtTest_DeleteInstance(void)
{
    struct myClass {
        MRT_Instance common ;
        int id ;
    } ;
    static struct myClass myClass_storage[10] ;
    static MRT_iab myClass_iab = {
        .storageStart = myClass_storage,
        .storageFinish = myClass_storage + COUNTOF(myClass_storage),
        .storageLast = myClass_storage + COUNTOF(myClass_storage) - 1,
        .alloc = 0,
        .instanceSize = sizeof(struct myClass),
        .construct = NULL,
        .destruct = NULL
    } ;

    static MRT_Class myClass_desc = {
        .iab = &myClass_iab,
        .edb = NULL,
        .pdb = NULL,
        .relCount = 0,
        .classRels = NULL,
        .name = "myClass"
    } ;

    struct myClass *inst = (struct myClass *)
            mrt_CreateInstance(&myClass_desc, MRT_StateCode_IG) ;
    CU_ASSERT_PTR_NOT_NULL(inst) ;

    mrt_DeleteInstance((MRT_Instance *)inst) ;
    CU_ASSERT(inst->common.alloc == 0) ;
}
----

[source,c]
----
<<instance allocation test cases>>=
{"create/delete with constructor/destructor", mrtTest_CtorInstance},

<<test functions>>=

static bool mrtTest_ctorCalled ;
static bool mrtTest_dtorCalled ;

static void myClass_ctor(
    MRT_Instance *inst)
{
    mrtTest_ctorCalled = true ;
}

static void myClass_dtor(
    MRT_Instance *inst)
{
    mrtTest_dtorCalled = true ;
}

static void
mrtTest_CtorInstance(void)
{
    struct myClass {
        MRT_Instance common ;
        int id ;
    } ;
    static struct myClass myClass_storage[10] ;
    static MRT_iab myClass_iab = {
        .storageStart = myClass_storage,
        .storageFinish = myClass_storage + COUNTOF(myClass_storage),
        .storageLast = myClass_storage + COUNTOF(myClass_storage) - 1,
        .alloc = 0,
        .instanceSize = sizeof(struct myClass),
        .construct = myClass_ctor,
        .destruct = myClass_dtor
    } ;

    static MRT_Class myClass_desc = {
        .iab = &myClass_iab,
        .edb = NULL,
        .pdb = NULL,
        .relCount = 0,
        .classRels = NULL,
        .name = "myClass"
    } ;

    mrtTest_ctorCalled = false ;
    mrtTest_dtorCalled = false ;
    struct myClass *inst = (struct myClass *)
            mrt_CreateInstance(&myClass_desc, MRT_StateCode_IG) ;
    CU_ASSERT_PTR_NOT_NULL(inst) ;
    CU_ASSERT_TRUE(mrtTest_ctorCalled) ;

    mrt_DeleteInstance((MRT_Instance *)inst) ;
    CU_ASSERT(inst->common.alloc == 0) ;
    CU_ASSERT_TRUE(mrtTest_dtorCalled) ;
}
----

=== Event Pool

[source,c]
----
<<execution test cases>>=
{"init event pool", mrtTest_initEventPool},

<<execution suite tests>>=
static CU_TestInfo executionSuiteTests[] = {
    <<execution test cases>>
    CU_TEST_INFO_NULL,
} ;

<<test functions>>=
static void
mrtTest_initEventPool(void)
{
    mrtInitEventPool() ;
    CU_ASSERT_PTR_NOT_NULL(eventQueue.next) ;
    CU_ASSERT_PTR_NOT_NULL(tocEventQueue.next) ;
    CU_ASSERT_PTR_NOT_NULL(delayedEventQueue.next) ;
    CU_ASSERT_PTR_NOT_NULL(freeEventQueue.next) ;
    CU_ASSERT_FALSE(mrtEventQueueEmpty(&freeEventQueue)) ;
}
----

[source,c]
----
<<execution test cases>>=
{"allocate event", mrtTest_allocEvent},

<<test functions>>=
static void
mrtTest_allocEvent(void)
{
    MRT_Ecb *event = mrtAllocEvent() ;
    CU_ASSERT_PTR_NOT_NULL(event) ;
}
----

=== Execution Testing

[source,c]
----
<<test suites>>=
{"execution", NULL, NULL, NULL, NULL, executionSuiteTests},
----
