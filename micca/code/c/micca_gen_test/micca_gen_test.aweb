// vim:set syntax=asciidoc:

= Micca Run Time Testing

== Singular Associations

[source,c]
----
<<test suites>>=
{"one to one associations", NULL, NULL, NULL, NULL, oneToOneAssocSuiteTests},
----

[source,c]
----
<<suite tests>>=
<<one to one associations suite tests>>

<<one to one associations suite tests>>=
static CU_TestInfo oneToOneAssocSuiteTests[] = {
    <<one to one associations test cases>>
    CU_TEST_INFO_NULL,
} ;
----

=== One to One

["aafigure"]
----
+---+            +---+
|   |1    R1    1|   |
| A +------------+ B |
|   |            |   |
+---+            +---+
----

----
<<test domain configuration>>=
class A {
    attribute count int
}

class B {
    attribute count int
}

association R1 A 1--1 B

<<test domain population>>=
class A {
    allocate 2
}

class B {
    allocate 2
}
----

----
<<test domain configuration>>=
domainop void oneToOneRelate {} {
    <%B create bref1 count 1%>
    <%A create aref1 count 1 R1 bref1%>             // <1>

    <%instance aref1 findOneRelated bfound R1%>     // <2>
    CU_ASSERT(bfound->count == 1) ;
    <%instance bref1 findOneRelated afound ~R1%>
    CU_ASSERT(afound->count == 1) ;

    <%B create bref2 count 2%>                      // <3>
    <%R1 swap aref1 bref2%>

    <%instance aref1 findOneRelated bfound R1%>     // <4>
    CU_ASSERT(bfound->count == 2) ;
    <%instance bref2 findOneRelated afound ~R1%>
    CU_ASSERT(afound->count == 1) ;

    <%instance bref1 findOneRelated afound ~R1%>    // <5>
    CU_ASSERT_PTR_NULL(afound) ;

    <%R1 swap aref1 bref2%>                         // <6>
    <%instance aref1 findOneRelated bfound R1%>
    CU_ASSERT(bfound->count == 2) ;
    <%instance bref2 findOneRelated afound ~R1%>
    CU_ASSERT(afound->count == 1) ;

    <%instance bref1 delete%>                       // <7>

    <%instance aref1 delete%>                       // <8>
    <%instance bref2 findOneRelated afound ~R1%>
    CU_ASSERT_PTR_NULL(afound) ;

    <%instance bref2 delete%>                       // <9>
}
----
<1> Create a related pair.
<2> Check the navigation of R1 to make sure we get the right instance.
<3> Create a new related pair by swaping in a new instance.
<4> Check we are navigating to the correct instances.
<5> The previously related instance is now "dangling" and should
havigate to nowhere.
<6> Check that swapping in the same instance does nothing.
<7> Delete the dangling instance.
<8> Delete the refering instance and check that the referenced
instance now navigates nowhere.
<9> Clean up the dangling instance to prevent referential integrity violation.

[source,c]
----
<<one to one associations test cases>>=
{"one to one", genTest_OneToOne},

<<test functions>>=
static void
genTest_OneToOne(void)
{
    gendomain_oneToOneRelate() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

=== One C to One

["aafigure"]
----
+---+            +---+
|   |?    R1    1|   |
| C +------------+ D |
|   |            |   |
+---+            +---+
----

[source,tcl]
----
<<test domain configuration>>=
class C {
    attribute count int
}

class D {
    attribute count int
}

association R2 C ?--1 D

<<test domain population>>=
class C {
    allocate 2
}

class D {
    allocate 4
}
----

----
<<test domain configuration>>=
domainop void oneCToOneRelate {} {
    <%D create dref1 count 1%>
    <%C create cref1 count 1 R2 dref1%>

    <%instance cref1 findOneRelated dfound R2%>
    CU_ASSERT(dfound->count == 1) ;

    <%instance dref1 findOneRelated cfound ~R2%>
    CU_ASSERT(cfound->count == 1) ;

    <%D create dref2 count 2%>
    <%instance dref2 findOneRelated cfound ~R2%>
    CU_ASSERT_PTR_NULL(cfound) ;

    <%D create dref3 count 3%>
    <%R2 swap cref1 dref3%>

    <%instance cref1 findOneRelated dfound R2%>
    CU_ASSERT(dfound->count == 3) ;

    <%instance dref3 findOneRelated cfound ~R2%>
    CU_ASSERT(cfound->count == 1) ;
}
----

[source,c]
----
<<one to one associations test cases>>=
{"one C to one", genTest_OneCToOne},

<<test functions>>=
static void
genTest_OneCToOne(void)
{
    gendomain_oneCToOneRelate() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

== CUnit Setup

[source,c]
----
<<micca_gen_test.c>>=
#include "micca_rt.h"
#include <stdlib.h>
#include <setjmp.h>
#include <CUnit/CUnit.h>
#include <CUnit/Basic.h>

#include "gendomain.h"

<<test functions>>

<<suite tests>>

static CU_SuiteInfo suites[] = {
    <<test suites>>
    CU_SUITE_INFO_NULL,
} ;

int
main(
    int argc,
    char **argv)
{
    mrt_Initialize() ;

    CU_initialize_registry() ;

    CU_register_suites(suites) ;

    CU_basic_set_mode(CU_BRM_VERBOSE) ;
    CU_basic_run_tests() ;

    const CU_pFailureRecord failures = CU_get_failure_list() ;
    CU_basic_show_failures(failures) ;

    puts("") ;

    CU_cleanup_registry() ;
}
----

== Test Domain

[source,tcl]
----
<<gendomain.micca>>=
domain gendomain {
    prologue {
        #include <CUnit/CUnit.h>
    }

    <<test domain configuration>>
}
population gendomain {
    <<test domain population>>
}
----
