// vim:set syntax=asciidoc:

= Micca Run Time Testing

== Singular Associations

[source,c]
----
<<test suites>>=
{"singular associations", NULL, NULL, NULL, NULL, singularAssocSuiteTests},
----

[source,c]
----
<<suite tests>>=
<<singular associations suite tests>>

<<singular associations suite tests>>=
static CU_TestInfo singularAssocSuiteTests[] = {
    <<singular associations test cases>>
    CU_TEST_INFO_NULL,
} ;
----

=== 1 => 1

["aafigure"]
----
+---------+              +---------+
|A        |              |B        |
+---------+1     R1     1+---------+
|count    +--------------+count    |
|         |              |         |
+---------+              +---------+
----

----
<<test domain configuration>>=
class A {
    attribute count int
}

class B {
    attribute count int
}

association R1 A 1--1 B

<<test domain population>>=
class A {
    allocate 2
}

class B {
    allocate 2
}
----

----
<<test domain configuration>>=
domainop void oneToOne {} {
    <%B create bref1 count 1%>
    <%A create aref1 count 1 R1 bref1%>             // <1>

    <%instance aref1 findOneRelated bfound R1%>     // <2>
    CU_ASSERT(bfound->count == 1) ;
    <%instance bref1 findOneRelated afound ~R1%>
    CU_ASSERT(afound->count == 1) ;

    <%B create bref2 count 2%>                      // <3>
    <%R1 swap aref1 bref2%>

    <%instance aref1 findOneRelated bfound R1%>     // <4>
    CU_ASSERT(bfound->count == 2) ;
    <%instance bref2 findOneRelated afound ~R1%>
    CU_ASSERT(afound->count == 1) ;

    <%instance bref1 findOneRelated afound ~R1%>    // <5>
    CU_ASSERT_PTR_NULL(afound) ;

    <%R1 swap aref1 bref2%>                         // <6>
    <%instance aref1 findOneRelated bfound R1%>
    CU_ASSERT(bfound->count == 2) ;
    <%instance bref2 findOneRelated afound ~R1%>
    CU_ASSERT(afound->count == 1) ;

    <%instance bref1 delete%>                       // <7>

    <%instance aref1 delete%>                       // <8>
    <%instance bref2 findOneRelated afound ~R1%>
    CU_ASSERT_PTR_NULL(afound) ;

    <%instance bref2 delete%>                       // <9>
}
----
<1> Create a related pair.
<2> Check the navigation of R1 to make sure we get the right instance.
<3> Create a new related pair by swaping in a new instance.
<4> Check we are navigating to the correct instances.
<5> The previously related instance is now "dangling" and should
havigate to nowhere.
<6> Check that swapping in the same instance does nothing.
<7> Delete the dangling instance.
<8> Delete the refering instance and check that the referenced
instance now navigates nowhere.
<9> Clean up the dangling instance to prevent referential integrity violation.

[source,c]
----
<<singular associations test cases>>=
{"1--1", genTest_OneToOne},

<<test functions>>=
static void
genTest_OneToOne(void)
{
    gendomain_oneToOne() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

=== 1 => 1 Static

["aafigure"]
----
+---------+              +---------+
|As       |              |Bs       |
+---------+1     R1s    1+---------+
|count    +--------------+count    |
|         |     (static) |         |
+---------+              +---------+
----

----
<<test domain configuration>>=
class As {
    attribute count int
}

class Bs {
    attribute count int
}

association R1s -static As 1--1 Bs

<<test domain population>>=
class As {
    table {
        count
        R1s
    } a1 {1 b1
    } a2 {2 b2
    }
}

class Bs {
    table {
        count
    } b1 {1
    } b2 {2
    }
}
----

----
<<test domain configuration>>=
domainop void oneToOneStatic {} {
    <%As findByName a1 a1ref%>                      // <1>
    <%instance a1ref findOneRelated bref R1s%>
    CU_ASSERT(bref->count == 1) ;
    <%Bs findByName b1 b1ref%>
    <%instance b1ref findOneRelated aref ~R1s%>
    CU_ASSERT(aref->count == 1) ;

    <%As findByName a2 a2ref%>                      // <2>
    <%instance a2ref findOneRelated bref R1s%>
    CU_ASSERT(bref->count == 2) ;
    <%Bs findByName b2 b2ref%>
    <%instance b2ref findOneRelated aref ~R1s%>
    CU_ASSERT(aref->count == 2) ;

    // <3>
}
----
<1> Check traversal from 1 -> 1.
<2> Check traversal from 2 -> 2.
<3> 'N.B.' there is no *swap* command associated with R1s since
the association was declared static.

[source,c]
----
<<singular associations test cases>>=
{"1--1 static", genTest_OneToOneStatic},

<<test functions>>=
static void
genTest_OneToOneStatic(void)
{
    gendomain_oneToOneStatic() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

=== 1 => 1 Reflexive

["aafigure"]
----
     +--------+ R3
     |        |
     |1       |
+----+----+   |
|E        |   |
+---------+ 1 |
|count    +---+
|         |
+---------+
----

[source,tcl]
----
<<test domain configuration>>=
class E {
    attribute count int
}

association R3 E 1--1 E

<<test domain population>>=
class E {
    allocate 6
}
----

----
<<test domain configuration>>=
domainop void oneToOneReflexive {} {
    <%E create eref1 count 1 R3 eref1%>
    <%E create eref2 count 2 R3 eref2%>
    <%E create eref3 count 3 R3 eref3%>

    <%R3 swap eref1 eref2%>
    <%R3 swap eref2 eref3%>
    <%R3 swap eref3 eref1%>

    <%instance eref1 findOneRelated efound R3%>
    CU_ASSERT(efound->count == 2) ;
    <%instance eref2 findOneRelated efound R3%>
    CU_ASSERT(efound->count == 3) ;
    <%instance eref3 findOneRelated efound R3%>
    CU_ASSERT(efound->count == 1) ;

    <%instance eref1 findOneRelated efound ~R3%>
    CU_ASSERT(efound->count == 3) ;
    <%instance eref2 findOneRelated efound ~R3%>
    CU_ASSERT(efound->count == 1) ;
    <%instance eref3 findOneRelated efound ~R3%>
    CU_ASSERT(efound->count == 2) ;

    <%instance eref2 delete%>
    <%R3 swap eref1 eref3%>
    <%instance eref1 findOneRelated efound R3%>
    CU_ASSERT(efound->count == 3) ;
    <%instance eref3 findOneRelated efound R3%>
    CU_ASSERT(efound->count == 1) ;
    <%instance eref1 findOneRelated efound ~R3%>
    CU_ASSERT(efound->count == 3) ;
    <%instance eref3 findOneRelated efound ~R3%>
    CU_ASSERT(efound->count == 1) ;
}
----

[source,c]
----
<<singular associations test cases>>=
{"1--1 reflexive", genTest_OneToOneReflexive},

<<test functions>>=
static void
genTest_OneToOneReflexive(void)
{
    gendomain_oneToOneReflexive() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

=== 1 => 1 Associative

["aafigure"]
----
+---------+              +---------+
|F        |              |G        |
+---------+1     R4     1+---------+
|count    +-------+------+count    |
|         |       |      |         |
+---------+       |      +---------+
             +----+----+
             |"R4assoc"|
             +---------+
             |         |
             +---------+
----

----
<<test domain configuration>>=
class F {
    attribute count int
}

class G {
    attribute count int
}

class R4assoc

association R4 -associator R4assoc F 1--1 G

<<test domain population>>=
class F {
    allocate 4
}

class G {
    allocate 4
}

class R4assoc {
    allocate 4
}
----

----
<<test domain configuration>>=
domainop void oneToOneAssoc {} {
    <%F create fref1 count 1%>
    <%G create gref1 count 1%>
    <%R4assoc create r4ref1 R4 {F fref1 G gref1}%>      // <1>

    <%instance fref1 findOneRelated gfound R4%>         // <2>
    CU_ASSERT(gfound->count == 1) ;
    <%instance gref1 findOneRelated ffound ~R4%>
    CU_ASSERT(ffound->count == 1) ;

    <%instance r4ref1 delete%>                          // <3>

    <%R4assoc create r4ref2 R4 {F fref1 G gref1}%>      // <4>

    <%instance fref1 findOneRelated gfound R4%>         // <5>
    CU_ASSERT(gfound->count == 1) ;
    <%instance gref1 findOneRelated ffound ~R4%>
    CU_ASSERT(ffound->count == 1) ;

    <%G create gref2 count 2%>                          // <6>
    <%R4 swap r4ref2 gref2%>

    <%instance fref1 findOneRelated gfound R4%>         // <7>
    CU_ASSERT(gfound->count == 2) ;
    <%instance gref2 findOneRelated ffound ~R4%>
    CU_ASSERT(ffound->count == 1) ;

    <%R4 swap r4ref2 gref1%>                            // <8>
    <%instance fref1 findOneRelated gfound R4%>         // <9>
    CU_ASSERT(gfound->count == 1) ;
    <%instance gref1 findOneRelated ffound ~R4%>
    CU_ASSERT(ffound->count == 1) ;

    <%instance gref2 delete%>                           // <10>
}
----
<1> Create an instance of R4.
<2> Check we find the right instances.
<3> Delete the instance of R4.
<4> Create a new instance of R4.
<5> Check we find the right instances.
<6> Swap in a new instance of G. The first G instance is dangling.
<7> Check we find the right instances.
<8> Swap back in the original G instance. The second G instance is dangling.
<9> Check we find the right instances.
<10> Deleting the dangling G instance to preserve referential integrity.

[source,c]
----
<<singular associations test cases>>=
{"1--1 associative", genTest_OneToOneAssoc},

<<test functions>>=
static void
genTest_OneToOneAssoc(void)
{
    gendomain_oneToOneAssoc() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

=== 1 => 1 Associative and Static

["aafigure"]
----
+---------+              +---------+
|Fs       |              |Gs       |
+---------+1     R4s    1+---------+
|count    +-------+------+count    |
|         |       |      |         |
+---------+       |      +---------+
            +-----+----+
            |"R4sassoc"|
            +----------+
            |count     |
            |          |
            +----------+
----

----
<<test domain configuration>>=
class Fs {
    attribute count int
}

class Gs {
    attribute count int
}

class R4sassoc {
    attribute count int
}

association R4s -associator R4sassoc Fs 1--1 Gs

<<test domain population>>=
class Fs {
    table   {count
    } f1    {1
    } f2    {2
    } f3    {3
    } f4    {4
    }
}

class Gs {
    table   {count
    } g1    {1
    } g2    {2
    } g3    {3
    } g4    {4
    }
}

class R4sassoc {
    table   {count  R4s
    } f1g1  {1      {Fs f1 Gs g1}
    } f2g2  {2      {Fs f2 Gs g2}
    } f3g3  {3      {Fs f3 Gs g3}
    } f4g4  {4      {Fs f4 Gs g4}
    }
}
----

----
<<test domain configuration>>=
domainop void oneToOneAssocStatic {} {
    <%Fs findByName f1 f1ref%>
    <%Gs findByName g1 g1ref%>

    <%instance f1ref findOneRelated gref R4s%>
    CU_ASSERT(gref->count == 1) ;
    <%instance g1ref findOneRelated fref ~R4s%>
    CU_ASSERT(fref->count == 1) ;
    <%instance f1ref findOneRelated r4sref {R4s R4sassoc}%>
    CU_ASSERT(r4sref->count == 1) ;
    <%instance g1ref findOneRelated r4sref {~R4s R4sassoc}%>
    CU_ASSERT(r4sref->count == 1) ;
}
----

[source,c]
----
<<singular associations test cases>>=
{"1--1 associative static", genTest_OneToOneAssocStatic},

<<test functions>>=
static void
genTest_OneToOneAssocStatic(void)
{
    gendomain_oneToOneAssocStatic() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

=== 1 => 1 Reflexive and Associative

["aafigure"]
----
                     +---------+
     +--------+ R5   |"R5assoc"|
     |        +------+---------+
     |1       |      |         |
+----+----+   |      +---------+
|H        |   |
+---------+ 1 |
|count    +---+
|         |
+---------+
----

[source,tcl]
----
<<test domain configuration>>=
class H {
    attribute count int
}

class R5assoc

association R5 -associator R5assoc H 1--1 H

<<test domain population>>=
class H {
    allocate 6
}

class R5assoc {
    allocate 3
}
----

----
<<test domain configuration>>=
domainop void oneToOneReflAssoc {} {
    <%H create h1ref count 1%>                      // <1>
    <%H create h2ref count 2%>
    <%H create h3ref count 3%>
    <%R5assoc create r5ref1 R5 {backward h1ref forward h2ref}%>
    <%R5assoc create r5ref2 R5 {backward h2ref forward h3ref}%>
    <%R5assoc create r5ref3 R5 {backward h3ref forward h1ref}%>

    <%instance h1ref findOneRelated hfound R5%>     // <2>
    CU_ASSERT(hfound->count == 2) ;
    <%instance h2ref findOneRelated hfound ~R5%>    // <3>
    CU_ASSERT(hfound->count == 1) ;

    <%instance h2ref findOneRelated hfound R5%>
    CU_ASSERT(hfound->count == 3) ;
    <%instance h3ref findOneRelated hfound ~R5%>
    CU_ASSERT(hfound->count == 2) ;

    <%instance h3ref findOneRelated hfound R5%>
    CU_ASSERT(hfound->count == 1) ;
    <%instance h1ref findOneRelated hfound ~R5%>
    CU_ASSERT(hfound->count == 3) ;

    <%H create h4ref count 4%>                      // <4>
    <%R5 swap r5ref1 h4ref backward%>
    <%R5 swap r5ref3 h4ref forward%>

    <%instance h4ref findOneRelated hfound R5%>
    CU_ASSERT(hfound->count == 2) ;
    <%instance h2ref findOneRelated hfound ~R5%>
    CU_ASSERT(hfound->count == 4) ;

    <%instance h1ref delete%>                       // <5>
}
----
<1> Create a circle of three instances of H.
<2> Forward from 1 is 2.
<3> Backward from 2 is 1.
<4> Replace H, count = 1 with H, count = 4. Note it takes two swaps
to do that.
<5> Clean up to restore referential integrity.

[source,c]
----
<<singular associations test cases>>=
{"1--1 reflexive associative", genTest_OneToOneReflAssoc},

<<test functions>>=
static void
genTest_OneToOneReflAssoc(void)
{
    gendomain_oneToOneReflAssoc() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

=== 0..1 => 1

["aafigure"]
----
+---------+              +---------+
|C        |              |D        |
+---------+?     R2     1+---------+
|count    +-------+------+count    |
|         |              |         |
+---------+              +---------+
----

[source,tcl]
----
<<test domain configuration>>=
class C {
    attribute count int
}

class D {
    attribute count int
}

association R2 C ?--1 D

<<test domain population>>=
class C {
    allocate 2
}

class D {
    allocate 4
}
----

----
<<test domain configuration>>=
domainop void oneCToOne {} {
    <%D create dref1 count 1%>
    <%C create cref1 count 1 R2 dref1%>

    <%instance cref1 findOneRelated dfound R2%>
    CU_ASSERT(dfound->count == 1) ;

    <%instance dref1 findOneRelated cfound ~R2%>
    CU_ASSERT(cfound->count == 1) ;

    <%D create dref2 count 2%>
    <%instance dref2 findOneRelated cfound ~R2%>
    CU_ASSERT_PTR_NULL(cfound) ;

    <%D create dref3 count 3%>
    <%R2 swap cref1 dref3%>

    <%instance cref1 findOneRelated dfound R2%>
    CU_ASSERT(dfound->count == 3) ;

    <%instance dref3 findOneRelated cfound ~R2%>
    CU_ASSERT(cfound->count == 1) ;
}
----

[source,c]
----
<<singular associations test cases>>=
{"0..1--1", genTest_OneCToOne},

<<test functions>>=
static void
genTest_OneCToOne(void)
{
    gendomain_oneCToOne() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

=== 0..1 => 1 Associative

["aafigure"]
----
+---------+              +---------+
|R        |              |S        |
+---------+?     R11    1+---------+
|count    +-------+------+count    |
|         |       |      |         |
+---------+       |      +---------+
             +----+-----+
             |"R11assoc"|
             +----------+
             |          |
             +----------+
----

[source,tcl]
----
<<test domain configuration>>=
class R {
    attribute count int
}

class S {
    attribute count int
}

class R11assoc

association R11 -associator R11assoc R 0..1--1 S

<<test domain population>>=
class R {
    allocate 5
}

class S {
    allocate 6
}

class R11assoc {
    allocate 4
}
----

----
<<test domain configuration>>=
domainop void oneCToOneAssoc {} {
    <%R create rref1 count 1%>
    <%S create sref1 count 1%>
    <%R11assoc create r11ref1 R11 {R rref1 S sref1}%>

    <%instance rref1 findOneRelated sfound R11%>
    CU_ASSERT(sfound->count == 1) ;

    <%instance sref1 findOneRelated rfound ~R11%>
    CU_ASSERT(rfound->count == 1) ;

    <%S create sref2 count 2%>
    <%instance sref2 findOneRelated rfound ~R11%>
    CU_ASSERT_PTR_NULL(rfound) ;

    <%S create sref3 count 3%>
    <%R11 swap r11ref1 sref3%>

    <%instance rref1 findOneRelated sfound R11%>
    CU_ASSERT(sfound->count == 3) ;

    <%instance sref3 findOneRelated rfound ~R11%>
    CU_ASSERT(rfound->count == 1) ;

    // sref1 and sref2 are unrelated

    <%instance r11ref1 delete%>
    // sref3 is unrelated, but rref1 must be deleted
    <%instance rref1 delete%>
    <%instance sref3 findOneRelated rfound ~R11%>
    CU_ASSERT_PTR_NULL(rfound) ;
}
----

[source,c]
----
<<singular associations test cases>>=
{"0..1--1 associative", genTest_OneCToOneAssoc},

<<test functions>>=
static void
genTest_OneCToOneAssoc(void)
{
    gendomain_oneCToOneAssoc() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

=== 0..1 => 0..1 Associative

["aafigure"]
----
+---------+              +---------+
|I        |              |J        |
+---------+?     R6     ?+---------+
|count    +-------+------+count    |
|         |       |      |         |
+---------+       |      +---------+
             +----+----+
             |"R6assoc"|
             +---------+
             |         |
             +---------+
----

----
<<test domain configuration>>=
class I {
    attribute count int
}

class J {
    attribute count int
}

class R6assoc

association R6 -associator R6assoc I ?--? J

<<test domain population>>=
class I {
    allocate 4
}

class J {
    allocate 4
}

class R6assoc {
    allocate 4
}
----

----
<<test domain configuration>>=
domainop void oneCToOneCAssoc {} {
    <%I create i1ref count 1%>
    <%I create i2ref count 2%>
    <%I create i3ref count 3%>
    <%J create j1ref count 1%>
    <%J create j2ref count 2%>
    <%J create j3ref count 3%>

    <%R6assoc create r6ref1 R6 {I i1ref J j1ref}%>
    <%R6assoc create r6ref2 R6 {I i2ref J j2ref}%>

    <%instance i1ref findOneRelated jfound R6%>
    CU_ASSERT(jfound->count == 1) ;
    <%instance j1ref findOneRelated ifound ~R6%>
    CU_ASSERT(ifound->count == 1) ;

    <%instance i3ref findOneRelated jfound R6%>
    CU_ASSERT_PTR_NULL(jfound) ;
    <%instance j3ref findOneRelated ifound ~R6%>
    CU_ASSERT_PTR_NULL(ifound) ;
}
----

[source,c]
----
<<singular associations test cases>>=
{"0..1--0..1 associative", genTest_OneCToOneCAssoc},

<<test functions>>=
static void
genTest_OneCToOneCAssoc(void)
{
    gendomain_oneCToOneCAssoc() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

=== 0..1 => 0..1 Reflexive and Associative

["aafigure"]
----
                    +---------+
     +--------+ R7  |"R7assoc"|
     |        +-----+---------+
     |?       |     |         |
+----+----+   |     +---------+
|K        |   |
+---------+ ? |
|count    +---+
|         |
+---------+
----

[source,tcl]
----
<<test domain configuration>>=
class K {
    attribute count int
}

class R7assoc

association R7 -associator R7assoc K ?--? K

<<test domain population>>=
class K {
    allocate 6
}

class R7assoc {
    allocate 5
}
----

----
<<test domain configuration>>=
domainop void oneCToOneCReflAssoc {} {
    <%K create k1ref count 1%>                          // <1>
    <%K create k2ref count 2%>
    <%K create k3ref count 3%>
    <%K create k4ref count 4%>
    <%K create k5ref count 5%>
    <%K create k6ref count 6%>

    <%R7assoc create r7ref1 R7 {backward k1ref forward k2ref}%> // <2>
    <%R7assoc create r7ref2 R7 {backward k2ref forward k3ref}%>

    <%R7assoc create r7ref3 R7 {backward k4ref forward k5ref}%>
    <%R7assoc create r7ref5 R7 {backward k5ref forward k6ref}%>

    <%instance k1ref findOneRelated kfound R7%>         // <3>
    CU_ASSERT(kfound->count == 2) ;
    <%instance k1ref findOneRelated kfound ~R7%>        // <4>
    CU_ASSERT_PTR_NULL(kfound) ;
    <%instance k2ref findOneRelated kfound R7%>
    CU_ASSERT(kfound->count == 3) ;
    <%instance k2ref findOneRelated kfound ~R7%>
    CU_ASSERT(kfound->count == 1) ;
    <%instance k3ref findOneRelated kfound R7%>
    CU_ASSERT_PTR_NULL(kfound) ;
    <%instance k3ref findOneRelated kfound ~R7%>
    CU_ASSERT(kfound->count == 2) ;

    <%K instset nobacks%>                               // <5>
    <%K foreachInstance kref_noback%>
        <%instance kref_noback findOneRelated kfound ~R7%>
        if (kfound == NULL) {
            <%instset nobacks add kref_noback%>
        }
    <%end%>
    CU_ASSERT(<%instset nobacks cardinality%> == 2) ;   // <6>

    <%R7 swap r7ref2 k4ref forward%>                    // <7>
    <%R7 swap r7ref3 k3ref backward%>                   // <8>

    <%instance k2ref findOneRelated kfound R7%>         // <9>
    CU_ASSERT(kfound->count == 4) ;
    <%instance k4ref findOneRelated kfound R7%>
    CU_ASSERT_PTR_NULL(kfound) ;

    <%instance k5ref findOneRelated kfound ~R7%>        // <10>
    CU_ASSERT(kfound->count == 3) ;
    <%instance k3ref findOneRelated kfound ~R7%>
    CU_ASSERT_PTR_NULL(kfound) ;
}
----
<1> Create some instances.
<2> Create two groupings, each a sequential set of 3.
<3> Forward from 1 -> 2.
<4> Backward from 1 -> None.
<5> Select all the instances that have no backward reference,
i.e. they are at the front of the sequence.
<6> Verify we actually built two sequences.
<7> Put 4 at the end of the first sequence.
<8> Put 3 at the beginning of the second sequence.
<9> After the swap, forward from 2 -> 4 and forward from 4 -> None.
<10> After the swap, backward from 5 -> 3 and backward from 3 -> None.

[source,c]
----
<<singular associations test cases>>=
{"0..1--0..1 reflexive associative", genTest_OneCToOneCReflAssoc},

<<test functions>>=
static void
genTest_OneCToOneCReflAssoc(void)
{
    gendomain_oneCToOneCReflAssoc() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

== Many to One Associations

[source,c]
----
<<test suites>>=
{"many to one associations", NULL, NULL, NULL, NULL, manyToOneAssocSuiteTests},
----

[source,c]
----
<<suite tests>>=
<<many to one associations suite tests>>

<<many to one associations suite tests>>=
static CU_TestInfo manyToOneAssocSuiteTests[] = {
    <<many to one associations test cases>>
    CU_TEST_INFO_NULL,
} ;
----

=== 1..* => 1

["aafigure"]
----
+---------+                +---------+
|L        |                |M        |
+---------+"1..*"  R8     1+---------+
|count    +----------------+count    |
|         |                |         |
+---------+                +---------+
----

[source,tcl]
----
<<test domain configuration>>=
class L {
    attribute count int
}

class M {
    attribute count int
}

association R8 L 1..*--1 M

<<test domain population>>=
class L {
    allocate 4
}

class M {
    allocate 2
}
----

----
<<test domain configuration>>=
domainop void manyToOne {} {
    <%M create m1ref count 1%>
    <%M create m2ref count 2%>

    <%L create l1ref count 1 R8 m1ref%>                 // <1>
    <%L create l2ref count 2 R8 m1ref%>
    <%L create l3ref count 3 R8 m1ref%>
    <%L create l4ref count 4 R8 m2ref%>

    <%instance l1ref findOneRelated mref R8%>           // <2>
    CU_ASSERT(mref->count == 1) ;
    <%instance l2ref findOneRelated mref R8%>
    CU_ASSERT(mref->count == 1) ;
    <%instance l3ref findOneRelated mref R8%>
    CU_ASSERT(mref->count == 1) ;
    <%instance l4ref findOneRelated mref R8%>
    CU_ASSERT(mref->count == 2) ;

    <%instance m1ref selectRelated lrefs ~R8%>          // <3>
    CU_ASSERT(<%instset lrefs cardinality%> == 3) ;
    <%instance m2ref selectRelated lrefs ~R8%>
    CU_ASSERT(<%instset lrefs cardinality%> == 1) ;

    <%R8 swap l3ref m2ref%>                             // <4>
    <%instance l3ref findOneRelated mref R8%>
    CU_ASSERT(mref->count == 2) ;

    <%instance m1ref selectRelated lrefs ~R8%>          // <5>
    CU_ASSERT(<%instset lrefs cardinality%> == 2) ;
    <%instance m2ref selectRelated lrefs ~R8%>
    CU_ASSERT(<%instset lrefs cardinality%> == 2) ;

    <%instance m1ref foreachRelated lref ~R8%>
        <%instance lref delete%>
    <%end%>

    <%instance m1ref selectRelated lrefs ~R8%>          // <6>
    CU_ASSERT(<%instset lrefs cardinality%> == 0) ;
    <%instance m1ref delete%>                           // <7>
}
----
<1> Two groups, three in one, one in the other.
<2> Navigate the association to make sure we linked up where
where intended.
<3> Count the many side references.
<4> Swap one between the two groups.
<5> Check the references again; now we see 2 in each group.
<6> After deleting the related instance of L, we should not be
related to anything.
<7> Clean up the M instance to insure referential integrity.

[source,c]
----
<<many to one associations test cases>>=
{"1..*--1", genTest_ManyToOne},

<<test functions>>=
static void
genTest_ManyToOne(void)
{
    gendomain_manyToOne() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

=== 1..* => 1 Static

["aafigure"]
----
+---------+                +---------+
|Ls       |                |Ms       |
+---------+"1..*"  R8s    1+---------+
|count    +----------------+count    |
|         |                |         |
+---------+                +---------+
----

[source,tcl]
----
<<test domain configuration>>=
class Ls {
    attribute count int
}

class Ms {
    attribute count int
}

association R8s -static Ls 1..*--1 Ms

<<test domain population>>=
class Ls {
    table {     count       R8s
    } l1 {      1           m1
    } l2 {      2           m1
    } l3 {      3           m2
    } l4 {      4           m2
    } l5 {      5           m2
    } l6 {      6           m3
    }
}

class Ms {
    table {     count
    } m1 {      1
    } m2 {      2
    } m3 {      3
    }
}
----

----
<<test domain configuration>>=
domainop void manyToOneStatic {} {
    <%Ls findByName l1 l1ref%>
    <%Ls findByName l2 l2ref%>
    <%Ls findByName l3 l3ref%>
    <%Ls findByName l4 l4ref%>
    <%Ls findByName l5 l5ref%>
    <%Ls findByName l6 l6ref%>

    <%instance l1ref findOneRelated mref R8s%>
    CU_ASSERT(mref->count == 1) ;
    <%instance l2ref findOneRelated mref R8s%>
    CU_ASSERT(mref->count == 1) ;
    <%instance l3ref findOneRelated mref R8s%>
    CU_ASSERT(mref->count == 2) ;
    <%instance l4ref findOneRelated mref R8s%>
    CU_ASSERT(mref->count == 2) ;
    <%instance l5ref findOneRelated mref R8s%>
    CU_ASSERT(mref->count == 2) ;
    <%instance l6ref findOneRelated mref R8s%>
    CU_ASSERT(mref->count == 3) ;

    <%Ms findByName m1 m1ref%>
    <%Ms findByName m2 m2ref%>
    <%Ms findByName m3 m3ref%>

    <%instance m1ref selectRelated mrefs ~R8s%>
    CU_ASSERT(<%instset mrefs cardinality%> == 2) ;
    <%instance m2ref selectRelated mrefs ~R8s%>
    CU_ASSERT(<%instset mrefs cardinality%> == 3) ;
    <%instance m3ref selectRelated mrefs ~R8s%>
    CU_ASSERT(<%instset mrefs cardinality%> == 1) ;
}
----

[source,c]
----
<<many to one associations test cases>>=
{"1..*--1 static", genTest_ManyToOneStatic},

<<test functions>>=
static void
genTest_ManyToOneStatic(void)
{
    gendomain_manyToOneStatic() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

=== 1..* => 1 Associative

["aafigure"]
----
+---------+                   +---------+
|U        |                   |V        |
+---------+"1..*"  R13       1+---------+
|count    +---------+---------+count    |
|         |         |         |         |
+---------+         |         +---------+
               +----+-----+
               |"R13assoc"|
               +----------+
               |          |
               +----------+
----

[source,tcl]
----
<<test domain configuration>>=
class U {
    attribute count int
}

class V {
    attribute count int
}

class R13assoc

association R13 -associator R13assoc U 1..*--1 V

<<test domain population>>=
class U {
    allocate 4
}

class V {
    allocate 4
}

class R13assoc {
    allocate 4
}
----

----
<<test domain configuration>>=
domainop void manyToOneAssoc {} {
    <%V create v1ref count 1%>
    <%V create v2ref count 2%>

    <%U create u1ref count 1%>
    <%U create u2ref count 2%>
    <%U create u3ref count 3%>
    <%U create u4ref count 4%>

    <%R13assoc create r13ref1 R13 {U u1ref V v1ref}%>
    <%R13assoc create r13ref2 R13 {U u2ref V v1ref}%>
    <%R13assoc create r13ref3 R13 {U u3ref V v1ref}%>
    <%instance u1ref findOneRelated vref R13%>
    CU_ASSERT(vref->count == 1) ;
    <%instance u2ref findOneRelated vref R13%>
    CU_ASSERT(vref->count == 1) ;
    <%instance u3ref findOneRelated vref R13%>
    CU_ASSERT(vref->count == 1) ;

    <%R13assoc create r13ref4 R13 {U u4ref V v2ref}%>
    <%instance u4ref findOneRelated vref R13%>
    CU_ASSERT(vref->count == 2) ;

    <%instance v1ref selectRelated urefs ~R13%>
    CU_ASSERT(<%instset urefs cardinality%> == 3) ;
    <%instance r13ref2 delete%>
    <%instance v1ref selectRelated urefs ~R13%>
    CU_ASSERT(<%instset urefs cardinality%> == 2) ;

    <%instance u2ref delete%>
}
----

[source,c]
----
<<many to one associations test cases>>=
{"1..*--1 associative", genTest_ManyToOneAssoc},

<<test functions>>=
static void
genTest_ManyToOneAssoc(void)
{
    gendomain_manyToOneAssoc() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

=== 0..* => 1

["aafigure"]
----
+---------+              +---------+
|X        |              |Y        |
+---------+"0..*" R15   1+---------+
|count    +--------------+count    |
|         |              |         |
+---------+              +---------+
----

[source,tcl]
----
<<test domain configuration>>=
class X {
    attribute count int
}

class Y {
    attribute count int
}

association R15 X 0..*--1 Y

<<test domain population>>=
class X {
    allocate 4
}

class Y {
    allocate 2
}
----

----
<<test domain configuration>>=
domainop void manyCToOne {} {
    <%Y create y1ref count 1%>
    <%Y create y2ref count 2%>

    <%X create x1ref count 1 R15 y1ref%>
    <%X create x2ref count 2 R15 y1ref%>
    <%X create x3ref count 3 R15 y1ref%>
    <%X create x4ref count 4 R15 y2ref%>

    <%instance x1ref findOneRelated yfound R15%>
    CU_ASSERT(yfound->count == 1) ;
    <%instance x2ref findOneRelated yfound R15%>
    CU_ASSERT(yfound->count == 1) ;
    <%instance x3ref findOneRelated yfound R15%>
    CU_ASSERT(yfound->count == 1) ;
    <%instance x4ref findOneRelated yfound R15%>
    CU_ASSERT(yfound->count == 2) ;

    <%instance y1ref selectRelated xset ~R15%>
    CU_ASSERT(<%instset xset cardinality%> == 3) ;
    <%instance y2ref selectRelated xset ~R15%>
    CU_ASSERT(<%instset xset cardinality%> == 1) ;

    <%instance x3ref delete%>
    <%instance y1ref selectRelated xset ~R15%>
    CU_ASSERT(<%instset xset cardinality%> == 2) ;

    <%instance x4ref delete%>
    // y2ref is now unrelated
}
----

[source,c]
----
<<many to one associations test cases>>=
{"0..*--1", genTest_ManyCToOne},

<<test functions>>=
static void
genTest_ManyCToOne(void)
{
    gendomain_manyCToOne() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

=== 0..* => 0..1 Associative

["aafigure"]
----
+---------+                   +---------+
|"AA"     |                   |"BB"     |
+---------+"0..*" R16   "0..1"+---------+
|count    +-------+-----------+count    |
|         |       |           |         |
+---------+       |           +---------+
             +----+-----+
             |"R16assoc"|
             +----------+
             |          |
             +----------+
----

=== 0..* => 0..1 Reflexive and Associative

["aafigure"]
----
                           +----------+
      +-------------+ R17  |"R17assoc"|
      |             +------+----------+
      |"0..*"       |      |          |
 +----+----+        |      +----------+
 |"CC"     |        |
 +---------+ "0..1" |
 |count    +--------+
 |         |
 +---------+
----

[source,tcl]
----
<<test domain configuration>>=
class CC {
    attribute count int
}

class R17assoc

association R17 -associator R17assoc CC 0..*--0..1 CC

<<test domain population>>=
class CC {
    allocate 6
}

class R17assoc {
    allocate 4
}
----

----
<<test domain configuration>>=
domainop void manyCToOneCReflAssoc {} {
    <%CC create c1ref count 1%>
    <%CC create c2ref count 2%>
    <%CC create c3ref count 3%>
    <%CC create c4ref count 4%>
    <%CC create c5ref count 5%>
    <%CC create c6ref count 6%>

    <%R17assoc create r17ref1 R17 {backward c2ref forward c1ref}%>  // <1>
    <%R17assoc create r17ref2 R17 {backward c3ref forward c1ref}%>
    <%R17assoc create r17ref3 R17 {backward c4ref forward c1ref}%>

    <%R17assoc create r17ref4 R17 {backward c6ref forward c5ref}%>

    <%instance c2ref findOneRelated cref R17%>                      // <2>
    CU_ASSERT(cref->count == 1) ;
    <%instance c3ref findOneRelated cref R17%>
    CU_ASSERT(cref->count == 1) ;
    <%instance c4ref findOneRelated cref R17%>
    CU_ASSERT(cref->count == 1) ;

    <%instance c1ref selectRelated crefs ~R17%>                     // <3>
    CU_ASSERT(<%instset crefs cardinality%> == 3) ;

    <%instance c6ref findOneRelated cref R17%>                      // <4>
    CU_ASSERT(cref->count == 5) ;
    <%instance c5ref selectRelated crefs ~R17%>
    CU_ASSERT(<%instset crefs cardinality%> == 1) ;

    <%R17 swap r17ref3 c5ref forward%>                              // <5>
    <%instance c5ref selectRelated crefs ~R17%>
    CU_ASSERT(<%instset crefs cardinality%> == 2) ;
    <%instance c1ref selectRelated crefs ~R17%>
    CU_ASSERT(<%instset crefs cardinality%> == 2) ;

    <%instance r17ref1 delete%>                                     // <6>
    <%instance c1ref selectRelated crefs ~R17%>
    CU_ASSERT(<%instset crefs cardinality%> == 1) ;

    <%instance c2ref findOneRelated cref R17%>                      // <7>
    CU_ASSERT_PTR_NULL(cref) ;
}
----
<1> Partition instances into two groups, three instance refering to
1 and one instance referring to 5.
<2> Check the wiring is correct for the first group.
<3> Count the many side instances.
<4> Check the wiring and many side instances for the second group.
<5> Make 3 -> 5, i.e. move 3 to the second group. It should now contain 2
on the many side as does the first group.
<6> Delete an instance of the association from the first group.
That leaves one left in that group.
<7> Verify that 2 is left dangling, but that's OK because of the
conditionality of the association.

[source,c]
----
<<many to one associations test cases>>=
{"0..*--0..1 reflexive associative", genTest_ManyCToOneCReflAssoc},

<<test functions>>=
static void
genTest_ManyCToOneCReflAssoc(void)
{
    gendomain_manyCToOneCReflAssoc() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

== Many to Many Associations

[source,c]
----
<<test suites>>=
{"many to many associations", NULL, NULL, NULL, NULL, manyToManyAssocSuiteTests},
----

[source,c]
----
<<suite tests>>=
<<many to many associations suite tests>>

<<many to many associations suite tests>>=
static CU_TestInfo manyToManyAssocSuiteTests[] = {
    <<many to many associations test cases>>
    CU_TEST_INFO_NULL,
} ;
----

=== 1..* => 1..* Associative

["aafigure"]
----
+---------+                   +---------+
|"DD"     |                   |"EE"     |
+---------+"1..*" R18   "1..*"+---------+
|count    +-------+-----------+count    |
|         |       |           |         |
+---------+       |           +---------+
             +----+-----+
             |"R18assoc"|
             +----------+
             |          |
             +----------+
----

[source,tcl]
----
<<test domain configuration>>=
class DD {
    attribute count int
}

class EE {
    attribute count int
}

class R18assoc

association R18 -associator R18assoc DD 1..*--1..* EE

<<test domain population>>=
class DD {
    allocate 6
}

class EE {
    allocate 6
}

class R18assoc {
    allocate 6
}
----

----
<<test domain configuration>>=
domainop void manyToManyAssoc {} {
    <%DD create dd1ref count 1%>

    <%EE create ee1ref count 1%>
    <%EE create ee2ref count 2%>

    <%R18assoc create r18ref1 R18 {DD dd1ref EE ee1ref}%>
    <%R18assoc create r18ref2 R18 {DD dd1ref EE ee2ref}%>

    <%instance r18ref1 findOneRelated eref R18%>
    CU_ASSERT(eref->count == 1) ;
    <%instance r18ref1 findOneRelated dref ~R18%>
    CU_ASSERT(dref->count == 1) ;

    <%DD create dd2ref count 2%>
    <%EE create ee3ref count 3%>
    <%R18 swap r18ref2 dd2ref%>
    <%R18 swap r18ref2 ee3ref%>
    <%instance ee2ref delete%>

    <%instance r18ref2 findOneRelated eref R18%>
    CU_ASSERT(eref->count == 3) ;
    <%instance r18ref2 findOneRelated dref ~R18%>
    CU_ASSERT(dref->count == 2) ;
}
----

[source,c]
----
<<many to many associations test cases>>=
{"1..*--1..* associative", genTest_ManyToManyAssoc},

<<test functions>>=
static void
genTest_ManyToManyAssoc(void)
{
    gendomain_manyToManyAssoc() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

=== Many 1..* => 1..* Associative

["aafigure"]
----
+---------+                   +---------+
|"FF"     |                   |"GG"     |
+---------+"1..*" R19   "1..*"+---------+
|count    +-------+-----------+count    |
|         |       |M          |         |
+---------+       |           +---------+
             +----+-----+
             |"R19assoc"|
             +----------+
             |          |
             +----------+
----

[source,tcl]
----
<<test domain configuration>>=
class FF {
    attribute count int
}

class GG {
    attribute count int
}

class R19assoc

association R19 -associator R19assoc -multiple FF 1..*--1..* GG

<<test domain population>>=
class FF {
    allocate 6
}

class GG {
    allocate 6
}

class R19assoc {
    allocate 6
}
----

----
<<test domain configuration>>=
domainop void manyToManyToManyAssoc {} {
    <%FF create ff1ref count 1%>

    <%GG create gg1ref count 1%>
    <%GG create gg2ref count 2%>

    <%R19assoc create r18ref1 R19 {FF ff1ref GG gg1ref}%>
    <%R19assoc create r18ref2 R19 {FF ff1ref GG gg2ref}%>

    <%instance r18ref1 findOneRelated gref R19%>
    CU_ASSERT(gref->count == 1) ;
    <%instance r18ref1 findOneRelated fref ~R19%>
    CU_ASSERT(fref->count == 1) ;

    <%FF create ff2ref count 2%>
    <%R19assoc create r18ref3 R19 {FF ff2ref GG gg1ref}%>
    <%R19assoc create r18ref4 R19 {FF ff2ref GG gg1ref}%>

    int count = 0 ;
    <%instance ff2ref foreachRelated gref R19%>
        count++ ;
    <%end%>
    CU_ASSERT(count == 2) ;
}
----

[source,c]
----
<<many to many associations test cases>>=
{"many 1..*--1..* associative", genTest_ManyToManyToManyAssoc},

<<test functions>>=
static void
genTest_ManyToManyToManyAssoc(void)
{
    gendomain_manyToManyToManyAssoc() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

== Combining Associations

[source,c]
----
<<test suites>>=
{"combining associations", NULL, NULL, NULL, NULL, combiningAssocSuiteTests},
----

[source,c]
----
<<suite tests>>=
<<combining associations suite tests>>

<<combining associations suite tests>>=
static CU_TestInfo combiningAssocSuiteTests[] = {
    <<combining associations test cases>>
    CU_TEST_INFO_NULL,
} ;
----

=== Multiple 1 => 1

["aafigure"]
----
+---------+              +---------+              +---------+
|"HH"     |              |"II"     |              |"JJ"     |
+---------+1     R20    1+---------+1     R21    1+---------+
|count    +--------------+count    +--------------+count    |
|         |              |         |              |         |
+---------+              +---------+              +---------+
----

----
<<test domain configuration>>=
class HH {
    attribute count int
}

class II {
    attribute count int
}

class JJ {
    attribute count int
}

association R20 II 1--1 HH
association R21 II 1--1 JJ

<<test domain population>>=
class HH {
    allocate 2
}

class II {
    allocate 2
}

class JJ {
    allocate 2
}
----

----
<<test domain configuration>>=
domainop void combineOneToOne {} {
    <%HH create hhref1 count 1%>
    <%JJ create jjref1 count 1%>
    <%II create iiref1 count 1 R20 hhref1 R21 jjref1%>

    <%instance iiref1 findOneRelated hhref R20%>
    CU_ASSERT(hhref->count == 1) ;
    <%instance iiref1 findOneRelated jjref R21%>
    CU_ASSERT(jjref->count == 1) ;

    <%HH create hhref2 count 2%>
    <%JJ create jjref2 count 2%>
    <%II create iiref2 count 2 R20 hhref2 R21 jjref2%>

    <%R21 swap iiref2 jjref1%>
    <%instance iiref2 findOneRelated jjref R21%>
    CU_ASSERT(jjref->count == 1) ;

    <%R21 swap iiref1 jjref2%>
    <%instance iiref1 findOneRelated jjref R21%>
    CU_ASSERT(jjref->count == 2) ;

    <%instance iiref1 delete%>
    <%instance hhref1 delete%>
    <%instance jjref2 delete%>
}
----

[source,c]
----
<<combining associations test cases>>=
{"1--1 combination", genTest_CombineOneToOne},

<<test functions>>=
static void
genTest_CombineOneToOne(void)
{
    gendomain_combineOneToOne() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

== Generalizations

[source,c]
----
<<test suites>>=
{"generalizations", NULL, NULL, NULL, NULL, genSuiteTests},
----

[source,c]
----
<<suite tests>>=
<<generalization suite tests>>

<<generalization suite tests>>=
static CU_TestInfo genSuiteTests[] = {
    <<generalization test cases>>
    CU_TEST_INFO_NULL,
} ;
----

=== Simple Reference Generalization

["aafigure"]
----
                +-------+
                |  "KK" |
                +-------+
                |count  |
                +---+---+
                    ^
                    |"R22"
            +-------+-------+
            |               |
        +---+---+       +---+---+
        | "LL"  |       |  "MM" |
        +-------+       +-------+
        |a      |       |b      |
        +-------+       +-------+
----

----
<<test domain configuration>>=
class KK {
    attribute count int
}
class LL {
    attribute a int
}
class MM {
    attribute b int
}

generalization R22 -reference KK LL MM

<<test domain population>>=
class KK {
    allocate 2
}
class LL {
    allocate 2
}
class MM {
    allocate 2
}
----

----
<<test domain configuration>>=
domainop void refGenOneLevel {} {
    <%KK create kkref1 count 1%>
    <%KK create kkref2 count 2%>

    <%LL create llref1 a 27 R22 kkref1%>
    <%MM create mmref1 b 43 R22 kkref2%>

    <%instance llref1 findOneRelated kkref R22%>
    CU_ASSERT(kkref->count == 1) ;
    <%instance mmref1 findOneRelated kkref R22%>
    CU_ASSERT(kkref->count == 2) ;

    <%R22 subclassof kkref1 subref%>
        <%subclass LL%>
            CU_ASSERT(subref->a == 27) ;
        <%end%>
        <%default%>
            CU_FAIL("unexpected subclass") ;
        <%end%>
    <%end%>

    <%R22 subclassof kkref2 subref%>
        <%subclass MM%>
            CU_ASSERT(subref->b == 43) ;
        <%end%>
        <%default%>
            CU_FAIL("unexpected subclass") ;
        <%end%>
    <%end%>

    <%R22 reclassify kkref1 MM mmref b 44%>
    <%R22 subclassof kkref1 subref%>
        <%subclass MM%>
            CU_ASSERT(subref->b == 44) ;
        <%end%>
        <%default%>
            CU_FAIL("unexpected subclass") ;
        <%end%>
    <%end%>
}
----

[source,c]
----
<<generalization test cases>>=
{"simple reference generalization", genTest_RefGenOne},

<<test functions>>=
static void
genTest_RefGenOne(void)
{
    gendomain_refGenOneLevel() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

=== Reference Generalization -- Repeated Specialization

["aafigure"]
----
                +-------+
                |  "NN" |
                +-------+
                |count  |
                +---+---+
                    ^
                    |"R23"
            +-------+-------+
            |               |
        +---+---+       +---+---+
        | "OO"  |       |  "PP" |
        +-------+       +-------+
        |a      |       |b      |
        +-------+       +---+---+
                            ^
                            |"R24"
                    +-------+-------+
                    |               |
                +---+---+       +---+---+
                | "QQ"  |       |  "RR" |
                +-------+       +-------+
                |c      |       |d      |
                +-------+       +-------+
----

----
<<test domain configuration>>=
class NN {
    attribute count int
}
class OO {
    attribute a int
}
class PP {
    attribute b int
}
class QQ {
    attribute c int
}
class RR {
    attribute d int
}

generalization R23 -reference NN OO PP
generalization R24 -reference PP QQ RR

<<test domain population>>=
class NN {
    allocate 3
}
class OO {
    allocate 2
}
class PP {
    allocate 2
}
class QQ {
    allocate 2
}
class RR {
    allocate 2
}
----

----
<<test domain configuration>>=
domainop void refGenRepeatSpec {} {
    <%NN create nnref1 count 1%>
    <%NN create nnref2 count 2%>
    <%NN create nnref3 count 3%>

    <%OO create ooref1 a 27 R23 nnref1%>
    <%PP create ppref1 b 43 R23 nnref2%>
    <%QQ create qqref1 c 60 R24 ppref1%>

    <%PP create ppref2 b 44 R23 nnref3%>
    <%RR create rrref1 d 70 R24 ppref2%>

    <%instance nnref2 findOneRelated qqref {~R23 PP} {~R24 QQ}%>
    CU_ASSERT_PTR_NOT_NULL_FATAL(qqref) ;
    CU_ASSERT(qqref->c == 60) ;

    <%instance qqref delete%>
    <%R23 reclassify nnref2 OO ooref a 28%>
    <%instance nnref2 findOneRelated oofound {~R23 OO}%>
    CU_ASSERT_PTR_NOT_NULL_FATAL(oofound) ;
    CU_ASSERT(oofound->a == 28) ;

    <%R23 reclassify nnref1 PP ppref b 45%>
    <%RR create rrref2 d 71 R24 ppref%>
    <%instance nnref1 findOneRelated rrref {~R23 PP} {~R24 RR}%>
    CU_ASSERT_PTR_NOT_NULL_FATAL(rrref) ;
    CU_ASSERT(rrref->d == 71) ;
}
----

[source,c]
----
<<generalization test cases>>=
{"reference generalization repeated specialization", genTest_RefGenRepeatSpec},

<<test functions>>=
static void
genTest_RefGenRepeatSpec(void)
{
    gendomain_refGenRepeatSpec() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

=== Multiple Reference Generalization

["aafigure"]
----
                +-------+        +-------+
                |  "SS" |        |  "VV" |
                +-------+        +-------+
                |count  |        |count  |
                +---+---+        +---+---+
                    ^                ^
                    |"R25"           |"R26"
            +-------+-----+   +------+-------+
            |             |   |              |
        +---+---+       +-+---+-+        +---+---+
        | "TT"  |       |  "UU" |        |  "WW" |
        +-------+       +-------+        +-------+
        |a      |       |b      |        |c      |
        +-------+       +-------+        +-------+
----

----
<<test domain configuration>>=
class SS {
    attribute count int
}
class TT {
    attribute a int
}
class UU {
    attribute b int
}
class VV {
    attribute count int
}
class WW {
    attribute c int
}

generalization R25 -reference SS TT UU
generalization R26 -reference VV UU WW

<<test domain population>>=
class SS {
    allocate 2
}
class TT {
    allocate 2
}
class UU {
    allocate 2
}
class VV {
    allocate 2
}
class WW {
    allocate 2
}
----

----
<<test domain configuration>>=
domainop void refGenMultiple {} {
    <%SS create ssref1 count 1%>
    <%VV create vvref1 count 10%>
    <%UU create uuref1 b 20 R25 ssref1 R26 vvref1%>

    <%instance uuref1 findOneRelated ssref R25%>
    CU_ASSERT(ssref->count == 1) ;
    <%instance uuref1 findOneRelated vvref R26%>
    CU_ASSERT(vvref->count == 10) ;

    <%R25 reclassify ssref1 TT ttref a 30%>
    <%instance vvref1 delete%>

    <%R25 subclassof ssref1 subref%>
        <%subclass TT%>
            CU_ASSERT(subref->a == 30) ;
        <%end%>
        <%default%>
            CU_FAIL("unexpected subclass") ;
        <%end%>
    <%end%>

    <%VV create vvref2 count 15%>
    <%R25 reclassify ssref1 UU uuref b 25 R26 vvref2%>

    <%R25 subclassof ssref1 subref%>
        <%subclass UU%>
            CU_ASSERT(subref->b == 25) ;
        <%end%>
        <%default%>
            CU_FAIL("unexpected subclass") ;
        <%end%>
    <%end%>
}
----

[source,c]
----
<<generalization test cases>>=
{"multiple reference generalization", genTest_RefGenMultiple},

<<test functions>>=
static void
genTest_RefGenMultiple(void)
{
    gendomain_refGenMultiple() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

=== Simple Union Generalization

----
<<test domain configuration>>=
class KKu {
    attribute count int
}
class LLu {
    attribute a int
}
class MMu {
    attribute b int
}

generalization R22u -union KKu LLu MMu

<<test domain population>>=
class KKu {
    allocate 2
}
----

----
<<test domain configuration>>=
domainop void refUnionOneLevel {} {
    <%KKu create kkref1 count 1%>
    <%KKu create kkref2 count 2%>

    <%R22u reclassify kkref1 LLu llref1 a 27%>
    <%R22u reclassify kkref2 MMu mmref1 b 43%>

    <%instance llref1 findOneRelated kkref R22u%>
    CU_ASSERT(kkref->count == 1) ;
    <%instance mmref1 findOneRelated kkref R22u%>
    CU_ASSERT(kkref->count == 2) ;

    <%R22u subclassof kkref1 subref%>
        <%subclass LLu%>
            CU_ASSERT(subref->a == 27) ;
        <%end%>
        <%default%>
            CU_FAIL("unexpected subclass") ;
        <%end%>
    <%end%>

    <%R22u subclassof kkref2 subref%>
        <%subclass MMu%>
            CU_ASSERT(subref->b == 43) ;
        <%end%>
        <%default%>
            CU_FAIL("unexpected subclass") ;
        <%end%>
    <%end%>

    <%R22u reclassify kkref1 MMu mmref b 44%>
    <%R22u subclassof kkref1 subref%>
        <%subclass MMu%>
            CU_ASSERT(subref->b == 44) ;
        <%end%>
        <%default%>
            CU_FAIL("unexpected subclass") ;
        <%end%>
    <%end%>
}
----

[source,c]
----
<<generalization test cases>>=
{"simple union generalization", genTest_RefUnionOne},

<<test functions>>=
static void
genTest_RefUnionOne(void)
{
    gendomain_refUnionOneLevel() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

=== Union Generalization -- Repeated Specialization

----
<<test domain configuration>>=
class NNu {
    attribute count int
}
class OOu {
    attribute a int
}
class PPu {
    attribute b int
}
class QQu {
    attribute c int
}
class RRu {
    attribute d int
}

generalization R23u -union NNu OOu PPu
generalization R24u -union PPu QQu RRu

<<test domain population>>=
class NNu {
    allocate 3
}
----

----
<<test domain configuration>>=
domainop void unionGenRepeatSpec {} {
    <%NNu create nnref1 count 1%>
    <%R23u reclassify nnref1 OOu ooref1 a 27%>

    <%NNu create nnref2 count 2%>
    <%R23u reclassify nnref2 PPu ppref1 b 43%>
    <%R24u reclassify ppref1 QQu qqref1 c 60%>

    <%NNu create nnref3 count 3%>
    <%R23u reclassify nnref3 PPu ppref2 b 44%>
    <%R24u reclassify ppref2 RRu rrref1 d 70%>

    <%instance nnref2 findOneRelated qqref {~R23u PPu} {~R24u QQu}%>
    CU_ASSERT_PTR_NOT_NULL_FATAL(qqref) ;
    CU_ASSERT(qqref->c == 60) ;

    <%instance qqref delete%>
    <%R23u reclassify nnref2 OOu ooref a 28%>
    <%instance nnref2 findOneRelated oofound {~R23u OOu}%>
    CU_ASSERT_PTR_NOT_NULL_FATAL(oofound) ;
    CU_ASSERT(oofound->a == 28) ;

    <%R23u reclassify nnref1 PPu ppref b 45%>
    <%R24u reclassify ppref RRu rrref2 d 71%>
    <%instance nnref1 findOneRelated rrref {~R23u PPu} {~R24u RRu}%>
    CU_ASSERT_PTR_NOT_NULL_FATAL(rrref) ;
    CU_ASSERT(rrref->d == 71) ;
}
----

[source,c]
----
<<generalization test cases>>=
{"union generalization repeated specialization", genTest_UnionGenRepeatSpec},

<<test functions>>=
static void
genTest_UnionGenRepeatSpec(void)
{
    gendomain_unionGenRepeatSpec() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

=== Multiple Union Generalization

----
<<test domain configuration>>=
class SSu {
    attribute count int
}
class TTu {
    attribute a int
}
class UUu {
    attribute b int
}
class VVu {
    attribute count int
}
class WWu {
    attribute c int
}

generalization R25u -union SSu TTu UUu
generalization R26u -reference VVu UUu WWu

<<test domain population>>=
class SSu {
    allocate 2
}
class VVu {
    allocate 2
}
class WWu {
    allocate 2
}
----

----
<<test domain configuration>>=
domainop void unionGenMultiple {} {
    <%SSu create ssref1 count 1%>
    <%VVu create vvref1 count 10%>
    <%R25u reclassify ssref1 UUu uuref1 b 20 R26u vvref1%>

    <%instance uuref1 findOneRelated ssref R25u%>
    CU_ASSERT(ssref->count == 1) ;
    <%instance uuref1 findOneRelated vvref R26u%>
    CU_ASSERT(vvref->count == 10) ;

    <%R25u reclassify ssref1 TTu ttref a 30%>
    <%instance vvref1 delete%>

    <%R25u subclassof ssref1 subref%>
        <%subclass TTu%>
            CU_ASSERT(subref->a == 30) ;
        <%end%>
        <%default%>
            CU_FAIL("unexpected subclass") ;
        <%end%>
    <%end%>

    <%VVu create vvref2 count 15%>
    <%R25u reclassify ssref1 UUu uuref b 25 R26u vvref2%>

    <%R25u subclassof ssref1 subref%>
        <%subclass UUu%>
            CU_ASSERT(subref->b == 25) ;
        <%end%>
        <%default%>
            CU_FAIL("unexpected subclass") ;
        <%end%>
    <%end%>

    <%R26u reclassify vvref2 WWu wwref c 30%>
    <%instance ssref1 delete%>

    <%R26u subclassof vvref2 subref%>
        <%subclass WWu%>
            CU_ASSERT(subref->c == 30) ;
        <%end%>
        <%default%>
            CU_FAIL("unexpected subclass") ;
        <%end%>
    <%end%>
}
----

[source,c]
----
<<generalization test cases>>=
{"multiple union generalization", genTest_UnionGenMultiple},

<<test functions>>=
static void
genTest_UnionGenMultiple(void)
{
    gendomain_unionGenMultiple() ;

    bool didevent = mrt_DispatchSingleEvent() ;
    CU_ASSERT_FALSE(didevent) ;
}
----

== CUnit Setup

[source,c]
----
<<micca_gen_test.c>>=
#include "micca_rt.h"
#include <stdlib.h>
#include <setjmp.h>
#include <CUnit/CUnit.h>
#include <CUnit/Basic.h>

#include "gendomain.h"

<<test functions>>

<<suite tests>>

static CU_SuiteInfo suites[] = {
    <<test suites>>
    CU_SUITE_INFO_NULL,
} ;

int
main(
    int argc,
    char **argv)
{
    mrt_Initialize() ;

    CU_initialize_registry() ;

    CU_register_suites(suites) ;

    CU_basic_set_mode(CU_BRM_VERBOSE) ;
    CU_basic_run_tests() ;

    const CU_pFailureRecord failures = CU_get_failure_list() ;
    if (failures != NULL) {
        puts("\nFailures:") ;
        CU_basic_show_failures(failures) ;
        putchar('\n') ;
    }

    CU_cleanup_registry() ;
}
----

== Test Domain

[source,tcl]
----
<<gendomain.micca>>=
domain gendomain {
    prologue {
        #include <CUnit/CUnit.h>
    }

    <<test domain configuration>>
}
population gendomain {
    <<test domain population>>
}
----
