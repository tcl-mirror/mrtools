PEG datatype (type_name)
# (6.7.6)
type_name <-
    specifier_qualifier_list abstract_declarator? EOF ;

# (6.7.6)
abstract_declarator <-
    pointer? direct_abstract_declarator /
    pointer ;

# (6.7.6)
direct_abstract_declarator <-
    direct_abstract_declarator_head direct_abstract_declarator_tail* ;

# (6.7.6)
direct_abstract_declarator_head <-
	LPAREN abstract_declarator RPAREN /
 	direct_abstract_declarator_tail ;

# (6.7.6)
direct_abstract_declarator_tail <-
    array_declarator /
    LBRACKET STAR RBRACKET /
    LPAREN parameter_type_list? RPAREN ;

array_declarator <-
    LBRACKET assignment_expression? RBRACKET ;

# (6.7.5)
pointer <-
    (STAR type_qualifier_list?)+ ;

# (6.7.5)
type_qualifier_list <-
    type_qualifier+ ;

# (6.7)
declaration_specifiers <-
    storage_class_specifier declaration_specifiers? /
    type_specifier declaration_specifiers? /
    type_qualifier declaration_specifiers? /
    function_specifier declaration_specifiers? ;

# (6.7.2.1)
specifier_qualifier_list <-
	(type_specifier / type_qualifier)+ ;

# (6.7.1)
storage_class_specifier <-
    typedef /
    extern /
    static /
    auto /
    register ;

# (6.7.3)
type_qualifier <-
    const /
    restrict /
    volatile ;

# (6.7.2)
type_specifier <-
    void /
    char /
    short /
    int /
    long /
    float /
    double /
    signed /
    unsigned /
    _Bool /
    _Complex /
    _Imaginary /
    struct_or_union_specifier /
    enum_specifier /
# common typedefs
    uint8_t /
    uint16_t /
    uint32_t /
    uint64_t /
    int8_t /
    int16_t /
    int32_t /
    int64_t /
    int_least8_t /
    int_least16_t /
    int_least32_t /
    int_least64_t /
    uint_least8_t /
    uint_least16_t /
    uint_least32_t /
    uint_least64_t /
    int_fast8_t /
    int_fast16_t /
    int_fast32_t /
    int_fast64_t /
    uint_fast8_t /
    uint_fast16_t /
    uint_fast32_t /
    uint_fast64_t /
    intptr_t /
    uintptr_t /
    intmax_t /
    uintmax_t /
    size_t /
    ptrdiff_t /
    bool /
    typedef_name ;

# (6.7.4)
function_specifier <-
	inline ;

# (6.7.5)
parameter_type_list <-
    parameter_list (COMMA ELLIPSIS)? ;

# (6.7.5)
parameter_list <-
    parameter_declaration (COMMA parameter_declaration)* ;

# (6.7.5)
parameter_declaration <-
    declaration_specifiers declarator /
    declaration_specifiers abstract_declarator? ;

# (6.7.2.1)
struct_or_union_specifier <-
    struct_or_union identifier? LBRACE struct_declaration_list RBRACE /
    struct_or_union identifier ;

# (6.7.2.1)
struct_or_union <-
    struct /
    union ;

# (6.7.2.1)
struct_declaration_list <-
    struct_declaration+ ;

# (6.7.2.1)
struct_declaration <-
    specifier_qualifier_list struct_declarator_list SEMICOLON ;

# (6.7.2.1)
struct_declarator_list <-
    struct_declarator (COMMA struct_declarator)* ;

# (6.7.2.1)
struct_declarator <-
    declarator? COLON constant_expression /
    declarator ;

# (6.7.5)
declarator <-
    pointer? direct_declarator ;

direct_declarator <-
    direct_declarator_head direct_declarator_tail? ;

direct_declarator_head <-
    identifier /
    LPAREN declarator RPAREN ;

direct_declarator_tail <-
    LBRACKET type_qualifier_list? assignment_expression? RBRACKET /
    LBRACKET static type_qualifier_list? assignment_expression RBRACKET /
    LBRACKET type_qualifier_list static assignment_expression RBRACKET /
    LBRACKET type_qualifier_list? STAR RBRACKET /
    LPAREN parameter_type_list RPAREN /
    LPAREN identifier_list? RPAREN ;

# (6.7.5)
identifier_list <-
	identifier (COMMA identifier)* ;

# (6.7.2.2)
enum_specifier <-
    enum identifier? LBRACE enumerator_list RBRACE /
    enum identifier? LBRACE enumerator_list COMMA RBRACE /
    enum identifier ;

# (6.7.2.2)
enumerator_list <-
    enumerator (COMMA enumerator)* ;

# (6.7.2.2)
enumerator <-
    enumeration_constant (EQUAL constant_expression)? ;

# (6.5.5)
multiplicative_expression <-
    cast_expression ((STAR / SLASH / PERCENT) cast_expression)* ;

# (6.5.6)
additive_expression <-
    multiplicative_expression ((PLUS / MINUS) multiplicative_expression)* ;

# (6.5.7)
shift_expression <-
    additive_expression ((LESSLESS / GREATERGREATER) additive_expression)* ;

# (6.5.8)
relational_expression <-
    shift_expression ((LESSEQUAL / GREATEREQUAL / LESS / GREATER)
        shift_expression)* ;

# (6.5.9)
equality_expression <-
    relational_expression ((EQUALEQUAL / PLINGEQUAL) relational_expression)* ;

# (6.5.10)
AND_expression <-
    equality_expression (AND equality_expression)* ;

# (6.5.11)
exclusive_OR_expression <-
    AND_expression ( HAT AND_expression )* ;

# (6.5.12)
inclusive_OR_expression <-
    exclusive_OR_expression (BAR exclusive_OR_expression)* ;

# (6.5.13)
logical_AND_expression <-
    inclusive_OR_expression (ANDAND inclusive_OR_expression)* ;

# (6.5.14)
logical_OR_expression <-
    logical_AND_expression (BARBAR logical_AND_expression)* ;

# (6.5.15)
conditional_expression <-
    logical_OR_expression (QUERY expression COLON conditional_expression)* ;

# (6.5.3)
unary_expression <-
    postfix_expression /
    PLUSPLUS unary_expression /
    MINUSMINUS unary_expression /
    unary_operator cast_expression /
    sizeof unary_expression /
    sizeof LPAREN type_name RPAREN ;

# (6.5.16)
assignment_operator <-
    EQUAL /
    STAREQUAL /
    SLASHEQUAL /
    PERCENTEQUAL /
    PLUSEQUAL /
    MINUSEQUAL /
    LESSLESSEQUAL /
    GREATERGREATEREQUAL /
    ANDEQUAL /
    HATEQUAL /
    BAREQUAL ;

# (6.5.3)
unary_operator <-
    AMPERSAND /
    STAR /
    PLUS /
    MINUS /
    TILDE /
    PLING ;

# (6.5.2)
postfix_expression <-
    postfix_expression_head postfix_expression_tail* ;

# (6.5.2)
postfix_expression_head <-
    primary_expression /
    LPAREN type_name RPAREN LBRACE initializer_list RBRACE /
    LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE ;

# (6.5.2)
postfix_expression_tail <-
    LBRACKET expression RBRACKET /
    LPAREN argument_expression_list? RPAREN /
    DOT identifier /
    ARROW identifier /
    PLUSPLUS /
    MINUSMINUS ;

# (6.7.8)
initializer_list <-
    designation? initializer (COMMA designation? initializer)* ;

# (6.7.8)
designation <-
    designator_list EQUAL ;

# (6.7.8)
designator_list <-
    designator+ ;

# (6.7.8)
designator <-
    LBRACKET constant_expression RBRACKET /
    DOT identifier ;

# (6.5.2)
argument_expression_list <-
    assignment_expression (COMMA assignment_expression)* ;

# (6.5.17)
expression <-
    assignment_expression (COMMA assignment_expression)* ;

# (6.5.16)
assignment_expression <-
    unary_expression assignment_operator assignment_expression /
    conditional_expression ;

# (6.5.4)
cast_expression <-
    unary_expression /
    LPAREN type_name RPAREN cast_expression ;

# (6.5.1)
primary_expression <-
    identifier /
    constant /
    string_literal /
    LPAREN expression RPAREN ;

# (6.6)
constant_expression <-
    conditional_expression ;

# A.1.5 Constants

# (6.4.4)
constant <-
    integer_constant /
    floating_constant /
    enumeration_constant /
    character_constant ;

# (6.4.4.1)
integer_constant <-
    decimal_constant integer_suffix? /
    octal_constant integer_suffix? /
    hexadecimal_constant integer_suffix? ;

# (6.4.4.1)
decimal_constant <-
    nonzero_digit digit* ;

# (6.4.4.1)
octal_constant <-
    '0' octal_digit* ;

# (6.4.4.1)
hexadecimal_constant <-
    hexadecimal_prefix hexadecimal_digit+ ;

# (6.4.4.1)
hexadecimal_prefix <-
    '0x' /
    '0X' ;

# (6.4.4.1)
nonzero_digit <-
    [1-9] ;

# (6.4.4.1)
octal_digit <-
    [0-7] ;

# (6.4.4.1)
hexadecimal_digit <-
    <xdigit> ;

# (6.4.2.1)
digit <-
    <digit> ;

# (6.4.4.1)
integer_suffix <-
    unsigned_suffix long_suffix? /
    unsigned_suffix long_long_suffix /
    long_suffix unsigned_suffix? /
    long_long_suffix unsigned_suffix? ;

# (6.4.4.1)
unsigned_suffix <-
    [uU] ;

# (6.4.4.1)
long_suffix <-
    [lL] ;

# (6.4.4.1)
long_long_suffix <-
    'll' /
    'LL' ;

# (6.4.4.2)
floating_constant <-
    decimal_floating_constant /
    hexadecimal_floating_constant ;

# (6.4.4.2)
decimal_floating_constant <-
    fractional_constant exponent_part? floating_suffix? /
    digit_sequence exponent_part floating_suffix? ;

# (6.4.4.2)
hexadecimal_floating_constant <-
    hexadecimal_prefix hexadecimal_fractional_constant binary_exponent_part
        floating_suffix? /
    hexadecimal_prefix hexadecimal_digit_sequence binary_exponent_part
        floating_suffix? ;

# (6.4.4.2)
fractional_constant <-
    digit_sequence? '.' digit_sequence /
    digit_sequence '.' ;

# (6.4.4.2)
exponent_part <-
    [eE] sign? digit_sequence ;

# (6.4.4.2)
sign <-
    [_+] ;

# (6.4.4.2)
digit_sequence <-
    <digit>+ ;

# (6.4.4.2)
hexadecimal_fractional_constant <-
    hexadecimal_digit_sequence? '.' hexadecimal_digit_sequence /
    hexadecimal_digit_sequence '.' ;

# (6.4.4.2)
binary_exponent_part <-
    [pP] sign? digit_sequence ;

# (6.4.4.2)
hexadecimal_digit_sequence <-
    hexadecimal_digit /
    hexadecimal_digit_sequence hexadecimal_digit ;

# (6.4.4.2)
floating_suffix <-
    [flFL] ;

# (6.4.4.3)
enumeration_constant <-
    identifier ;

# (6.4.4.4)
character_constant <-
    'L'? [\'] c_char_sequence [\'] ;

# (6.4.4.4)
c_char_sequence <-
    c_char /
    c_char_sequence c_char ;

# (6.4.4.4)
c_char <-
    [^'\\\n\r] /
    escape_sequence ;

# (6.4.4.4)
escape_sequence <-
    simple_escape_sequence /
    octal_escape_sequence /
    hexadecimal_escape_sequence /
    universal_character_name ;

# (6.4.4.4)
simple_escape_sequence <-
    '\\'['"?\\abfnrtv] ;

# (6.4.4.4)
octal_escape_sequence <-
    '\\' octal_digit /
    '\\' octal_digit octal_digit /
    '\\' octal_digit octal_digit octal_digit ;

# (6.4.4.4)
hexadecimal_escape_sequence <-
    '\\x' hexadecimal_digit+ ;

# A.1.6 String literals

# (6.4.5)
string_literal <-
    'L'? '"' s_char* '"' ;

# (6.4.5)
s_char <-
    [^"\\\n\r] /
    escape_sequence ;


#############

leaf: typedef       <- 'typedef' WHITESPACE ;
leaf: extern        <- 'extern' WHITESPACE ;
leaf: static        <- 'static' WHITESPACE ;
leaf: auto          <- 'auto' WHITESPACE ;
leaf: register      <- 'register' WHITESPACE ;
leaf: const         <- 'const' WHITESPACE ;
leaf: restrict      <- 'restrict' WHITESPACE ;
leaf: volatile      <- 'volatile' WHITESPACE ;
leaf: void          <- 'void' WHITESPACE ;
leaf: char          <- 'char' WHITESPACE ;
leaf: short         <- 'short' WHITESPACE ;
leaf: int           <- 'int' WHITESPACE ;
leaf: long          <- 'long' WHITESPACE ;
leaf: float         <- 'float' WHITESPACE ;
leaf: double        <- 'double' WHITESPACE ;
leaf: signed        <- 'signed' WHITESPACE ;
leaf: unsigned      <- 'unsigned' WHITESPACE ;
leaf: _Bool         <- '_Bool' WHITESPACE ;
leaf: _Complex      <- '_Complex' WHITESPACE ;
leaf: _Imaginary    <- '_Imaginary' WHITESPACE ;
leaf: uint8_t       <- 'uint8_t' WHITESPACE ;
leaf: uint16_t      <- 'uint16_t' WHITESPACE ;
leaf: uint32_t      <- 'uint32_t' WHITESPACE ;
leaf: uint64_t      <- 'uint64_t' WHITESPACE ;
leaf: int8_t        <- 'int8_t' WHITESPACE ;
leaf: int16_t       <- 'int16_t' WHITESPACE ;
leaf: int32_t       <- 'int32_t' WHITESPACE ;
leaf: int64_t       <- 'int64_t' WHITESPACE ;
leaf: int_least8_t      <- 'int_least8_t' WHITESPACE ;
leaf: int_least16_t     <- 'int_least16_t' WHITESPACE ;
leaf: int_least32_t     <- 'int_least32_t' WHITESPACE ;
leaf: int_least64_t     <- 'int_least64_t' WHITESPACE ;
leaf: uint_least8_t     <- 'uint_least8_t' WHITESPACE ;
leaf: uint_least16_t        <- 'uint_least16_t' WHITESPACE ;
leaf: uint_least32_t        <- 'uint_least32_t' WHITESPACE ;
leaf: uint_least64_t        <- 'uint_least64_t' WHITESPACE ;
leaf: int_fast8_t       <- 'int_fast8_t' WHITESPACE ;
leaf: int_fast16_t      <- 'int_fast16_t' WHITESPACE ;
leaf: int_fast32_t      <- 'int_fast32_t' WHITESPACE ;
leaf: int_fast64_t      <- 'int_fast64_t' WHITESPACE ;
leaf: uint_fast8_t      <- 'uint_fast8_t' WHITESPACE ;
leaf: uint_fast16_t     <- 'uint_fast16_t' WHITESPACE ;
leaf: uint_fast32_t     <- 'uint_fast32_t' WHITESPACE ;
leaf: uint_fast64_t     <- 'uint_fast64_t' WHITESPACE ;
leaf: intptr_t      <- 'intptr_t' WHITESPACE ;
leaf: uintptr_t     <- 'uintptr_t' WHITESPACE ;
leaf: intmax_t      <- 'intmax_t' WHITESPACE ;
leaf: uintmax_t     <- 'uintmax_t' WHITESPACE ;
leaf: size_t        <- 'size_t' WHITESPACE ;
leaf: ptrdiff_t     <- 'ptrdiff_t' WHITESPACE ;
leaf: bool          <- 'bool' WHITESPACE ;
leaf: inline        <- 'inline' WHITESPACE ;
leaf: struct        <- 'struct' WHITESPACE ;
leaf: union         <- 'union' WHITESPACE ;
leaf: enum          <- 'enum' WHITESPACE ;
leaf: sizeof        <- 'sizeof' WHITESPACE ;

#############

identifier          <- <alpha> (<alnum> / '_')* WHITESPACE ;
typedef_name        <- ((<alpha> <alnum>* '_t') / (<alpha> (alnum / '_')* 't')) WHITESPACE ;

leaf: SLASH             <- '/' WHITESPACE ;
leaf: PERCEN            <- '%' WHITESPACE ;
leaf: LESSLESS          <- '<<' WHITESPACE ;
leaf: GREATERGREATER    <- '>>' WHITESPACE ;
leaf: LESSEQUAL         <- '<=' WHITESPACE ;
leaf: GREATEREQUAL      <- '>=' WHITESPACE ;
leaf: LESS              <- '<' WHITESPACE ;
leaf: GREATER           <- '>' WHITESPACE ;
leaf: EQUALEQUAL        <- '==' WHITESPACE ;
leaf: PLINGEQUAL        <- '!=' WHITESPACE ;
leaf: AND               <- '&' WHITESPACE ;
leaf: HAT               <- '^' WHITESPACE ;
leaf: BAR               <- '|' WHITESPACE ;
leaf: ANDAND            <- '&&' WHITESPACE ;
leaf: BARBAR            <- '||' WHITESPACE ;
leaf: QUERY             <- '?' WHITESPACE ;
leaf: COLON             <- ':' WHITESPACE ;
leaf: PLUSPLUS          <- '++' WHITESPACE ;
leaf: MINUSMINUS        <- '--' WHITESPACE ;
leaf: EQUAL             <- '=' WHITESPACE ;
leaf: STAREQUAL         <- '*=' WHITESPACE ;
leaf: SLASHEQUAL        <- '/=' WHITESPACE ;
leaf: PERCENTEQUAL      <- '%=' WHITESPACE ;
leaf: PLUSEQUAL         <- '+=' WHITESPACE ;
leaf: MINUSEQUAL        <- '-=' WHITESPACE ;
leaf: LESSLESSEQUAL     <- '<<=' WHITESPACE ;
leaf: GREATERGREATEREQUAL <- '>>=' WHITESPACE ;
leaf: ANDEQUAL          <- '&=' WHITESPACE ;
leaf: HATEQUAL          <- '^=' WHITESPACE ;
leaf: BAREQUAL          <- '|=' WHITESPACE ;
leaf: AMPERSAND         <- '&' WHITESPACE ;
leaf: PLUS              <- '+' WHITESPACE ;
leaf: MINUS             <- '-' WHITESPACE ;
leaf: TILDE             <- '~' WHITESPACE ;
leaf: PLING             <- '!' WHITESPACE ;
leaf: DOT               <- '.' WHITESPACE ;
leaf: ARROW             <- '->' WHITESPACE ;

leaf: LPAREN        <- '(' WHITESPACE ;
leaf: RPAREN        <- ')' WHITESPACE ;
leaf: LBRACKET      <- '[' WHITESPACE ;
leaf: RBRACKET      <- ']' WHITESPACE ;
leaf: LBRACE        <- '{' WHITESPACE ;
leaf: RBRACE        <- '}' WHITESPACE ;
leaf: STAR          <- '*' WHITESPACE ;
leaf: ELLIPSIS      <- '...' WHITESPACE ;

void: COMMA         <- ',' WHITESPACE ;
void: SEMICOLON     <- ';' WHITESPACE ;

void: WHITESPACE    <- <space>* ;
void: EOF           <- !. ;

END ;
