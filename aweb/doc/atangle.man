[manpage_begin atangle 1 3.2]
[comment {
# This software is copyrighted 2012 - 2021 by G. Andrew Mangogna.
# The following terms apply to all files associated with the software unless
# explicitly disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors and
# need not follow the licensing terms described here, provided that the
# new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
# OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
# THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
# OR MODIFICATIONS.
# 
# GOVERNMENT USE: If you are acquiring this software on behalf of the
# U.S. government, the Government shall have only "Restricted Rights"
# in the software and related documentation as defined in the Federal
# Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
# are acquiring the software on behalf of the Department of Defense,
# the software shall be classified as "Commercial Computer Software"
# and the Government shall have only "Restricted Rights" as defined in
# Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
# the authors grant the U.S. Government and others acting in its behalf
# permission to use and distribute the software in accordance with the
# terms specified in this license.
# 
#  *++
# MODULE:
#	atangle -- literate programming tool for asciidoc
# ABSTRACT:
# 
#  *--
}]
[moddesc "atangle command"]
[titledesc "Tools for asciidoc literate programming"]
[copyright "2013 by G. Andrew Mangogna"]
[description]
The [cmd atangle] program is a
[uri http://www.literateprogramming.com/tools.html "literate programming"]
tool for
[uri http://www.methods.co.nz/asciidoc asciidoc] documents.

[cmd Atangle] reads [arg file] or the standard input if [arg file]
is not given, extracting the
[sectref "Literate Program Chunks" "literate programming chunks"]
and writes the source code contained in those chunks to [arg outfile]
or to the standard output.

[section Options]

[list_begin definitions]
[usage [cmd atangle]\
    [arg [opt -version]]\
    [arg [opt "-output outfile"]]\
    [arg [opt "-root chunklist"]]\
    [arg [opt -report]]\
    [arg [opt "-line template"]]\
    [arg [opt "-level loggerlevel"]]\
    [arg [opt file]]]
[list_end]

[list_begin options]
[opt_def -version]
Print the [cmd atangle] version and license and exit.

[opt_def -output [arg outfile]]
Write the extracted code to [arg outfile] rather than the standard output.

[opt_def -root [arg chunklist]]
The [arg chunklist] argument is a comma separated list of chunk names.
Each chunk in the list is extracted from the document and placed in
separate files.
When multiple roots are requested, [arg -output], is interpreted
as a directory where the output files are placed.
The directory is created if necessary.
Whitespace surrounding the chunk names (but not within a chunk name)
is discarded.
By default the single chunk named, *, is taken to be the root of the tree
of extracted chunks.
[emph N.B.]
that chunk name lists that contain whitespace will almost always require
some type of quoting for the chunk name list argument to prevent interpretation
of the embedded whitespace by the invoking command shell.

[opt_def -report]
Write a report of the chunk definitions and references on the standard error.

[opt_def -line [arg template]]
When generating the tangled output,
insert [arg template] just before the contents of a chunk.
Before [arg template] is inserted, tokens of the form, %f%, are
substituted with the name of the input file and tokens of the form,
%l%, are substituted with the line number where the chunk was defined.
This option can be used to insert line markings into the generated source.
For "C", a template of the form, #line %l% or #line %l% "%f" can be used.
[emph N.B.] that template arguments will most probably need to be
quoted to protect them from interpretation by any command shell being used
to invoke [cmd atangle].

[opt_def -level [arg loggerlevel]]
Set the logging level to [arg loggerlevel].
Setting the level to [arg debug] give detailed information about the
internal operation.
Setting the level to [arg info] gives details of the chunk parsing for the
document.
Setting the level to [arg notice] gives details of undefined chunks.

[list_end]


[section "Literate Program Chunks"]
In asciidoc,
the markup for source code is signified by enclosing it with
lines of four or more hyphens.
For example,
[example {
----
proc myproc {a b} {
    chan puts "$a $b"
}
----
}]

[para]
So literate programming in asciidoc is somewhat different than
other literate programming environments in that the literate program
source is also a valid asciidoc document.
The only addition is that of chunk defintions contained in
otherwise normal source code markup.

[para]
[cmd Atangle] looks for asciidoc source blocks that contain
[emph chunk] definitions.
A [emph chunk] is a name enclosed in "<<" and ">>" markers.
There are both [emph "chunk definitions"] and [emph "chunk references"].
A chunk definition appends an equals sign (=) to the chunk marker.
A chunk reference does not.
For example,
[example {
----
<<utility procs>>=
proc ut1 {b} {
    return [string toupper $b]
}
<<common procs>>
----
}]

In this example,
<<utility procs>>=, is a chunk definition
and
<<common procs>>
is a chunk reference.

[para]
There may be multiple definitions of the same chunk.
In that case, the definitions are concatenated together in the order
in which they occur in the input file.

[para]
Chunks form an implied tree, where definitions of one chunk can contain
references to other chunks.
There is a [emph root] chunk.
By default the root chunk is known as, *.

The process of tangling the literate program source extracts the root chunk and
recursively replaces any chunk reference with the corresponding definition.

[manpage_end]
