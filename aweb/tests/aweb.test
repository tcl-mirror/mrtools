#!/usr/bin/env tclsh
# This software is copyrighted 2013 by G. Andrew Mangogna.
# The following terms apply to all files associated with the software unless
# explicitly disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors and
# need not follow the licensing terms described here, provided that the
# new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
# OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
# THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
# OR MODIFICATIONS.
# 
# GOVERNMENT USE: If you are acquiring this software on behalf of the
# U.S. government, the Government shall have only "Restricted Rights"
# in the software and related documentation as defined in the Federal
# Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
# are acquiring the software on behalf of the Department of Defense,
# the software shall be classified as "Commercial Computer Software"
# and the Government shall have only "Restricted Rights" as defined in
# Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
# the authors grant the U.S. Government and others acting in its behalf
# permission to use and distribute the software in accordance with the
# terms specified in this license.
#
#*++
# PROJECT:
#   mrtools
#
# MODULE:
#   aweb.test -- unit tests for aweb
#
# ABSTRACT:
#
#*--
#

package require Tcl 8.6
package require tcltest
package require cmdline
package require logger

source ../src/aweb.tcl

set optlist {
    {level.arg warn {Log debug level}}
}
array set options [::cmdline::getKnownOptions argv $optlist]
::tcltest::configure {*}$argv

namespace eval ::aweb::test {
    namespace import ::tcltest::*
    namespace import ::ral::*
    namespace import ::ralutil::*

    logger::initNamespace [namespace current] $::options(level)

    test aweb-1.0 {
        create a parser object
    } -setup {
    } -cleanup {
        p destroy
    } -body {
        ::aweb parser create p
    } -result {::aweb::test::p}


    test parse-1.0 {
        parse empty file
    } -setup {
        makeFile {} empty.aweb
        ::aweb parser create p
        p loglevel $::options(level)
    } -cleanup {
        p destroy
    } -body {
        p parse empty.aweb
        set chunkBlock [relvar set [info object namespace p]::ChunkBlock]
        relation cardinality $chunkBlock
    } -result {0}

    test parse-2.0 {
        detect title with no source block
    } -setup {
        makeFile {
Four
----
} title.aweb
        ::aweb parser create p
        p loglevel $::options(level)
    } -cleanup {
        p destroy
    } -body {
        p parse title.aweb
        set chunkBlock [relvar set [info object namespace p]::ChunkBlock]
        relation cardinality $chunkBlock
    } -result {0}

    test parse-2.1 {
        detect title and source block
    } -setup {
        makeFile {
Four
----
----
<<chunk 1>>=
----
} title-source.aweb
        ::aweb parser create p
        p loglevel $::options(level)
    } -cleanup {
        p destroy
    } -body {
        p parse title-source.aweb
        set chunkBlock [relvar set [info object namespace p]::ChunkBlock]
        relation cardinality $chunkBlock
    } -result {1}

    test parse-3.0 {
        make sure paragraph title are deal with
    } -setup {
        makeFile {
.Implementation
----
----
} para-title.aweb
        ::aweb parser create p
        p loglevel $::options(level)
    } -cleanup {
        p destroy
    } -body {
        p parse para-title.aweb
        set chunkBlock [relvar set [info object namespace p]::ChunkBlock]
        relation cardinality $chunkBlock
    } -result {0}

    test parse-4.0 {
        long title underline
    } -setup {
        makeFile {
Not really a title.
----
<<chunk 1>>=
printf("this is it\n") ;
----
} no-title.aweb
        ::aweb parser create p
        p loglevel $::options(level)
    } -cleanup {
        p destroy
    } -body {
        p parse no-title.aweb
        set chunkBlock [relvar set [info object namespace p]::Chunk]
        relation cardinality $chunkBlock
    } -result {1}

    test parse-5.0 {
        multiple chunks
    } -setup {
        makeFile {
----
<<chunk 1>>=
printf("this is it\n") ;
<<chunk 2>>=
printf("this is not it\n") ;
----
} two-chunk.aweb
        ::aweb parser create p
        p loglevel $::options(level)
    } -cleanup {
        p destroy
    } -body {
        p parse two-chunk.aweb
        set chunkBlock [relvar set [info object namespace p]::Chunk]
        relation cardinality $chunkBlock
    } -result {2}

    test parse-6.0 {
        source block with no chunks
    } -setup {
        makeFile {
----
printf("this is it\n") ;
printf("this is not it\n") ;
----
} no-chunk-in-source.aweb
        ::aweb parser create p
        p loglevel $::options(level)
    } -cleanup {
        p destroy
    } -body {
        p parse no-chunk-in-source.aweb
        set chunkBlock [relvar set [info object namespace p]::Chunk]
        relation cardinality $chunkBlock
    } -result {0}

    test parse-7.0 {
        include a file
    } -setup {
        makeFile {
----
<<test chunk>>=
printf("this is it\n") ;
printf("this is not it\n") ;
----
} included.aweb
        makeFile {
----
<<chunk 1>>=
printf("this is it\n") ;
<<chunk 2>>=
printf("this is not it\n") ;
----
include::included.aweb[]
} test-include.aweb
        ::aweb parser create p
        p loglevel $::options(level)
    } -cleanup {
        p destroy
    } -body {
        p parse test-include.aweb
        set chunkBlock [relvar set [info object namespace p]::Chunk]
        relation cardinality $chunkBlock
    } -result {3}

    test parse-7.0 {
        include a file that doesn't exist
    } -setup {
        makeFile {
----
<<chunk 1>>=
printf("this is it\n") ;
<<chunk 2>>=
printf("this is not it\n") ;
----
include::failed-include.aweb[]
} test-include.aweb
        ::aweb parser create p
        p loglevel $::options(level)
    } -cleanup {
        p destroy
    } -body {
        p parse test-include.aweb
        set chunkBlock [relvar set [info object namespace p]::Chunk]
        relation cardinality $chunkBlock
    } -result {2}

    cleanupTests
}

namespace delete ::aweb::test

if 0 {
    # test command template

    test YYY {
    } -setup {
    } -cleanup {
    } -body {
    } -result {}
}
