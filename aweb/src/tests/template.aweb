= MyDomain Domain Workbook
:Author: <your name here>
:Email: <your email address here>
:Revision: <revision number>
:Date: <today's date>

== Data Types
Explain the domain data types

=== Data Type 1
Explain the set of values that constitute Data Type 1.

.Data Type 1 Implementation
// External data types are those used in the domain operations
// and therefore must be included in the generated header file
// Internal data types are made part of the implementation prolog
// and therefore not seen outside of the generated code file.
----
<<external data types>>=
typedef uint8_t Data_Type_1 ;
----

////
Add other data type sections as necessary
////

== Domain Operations
Explain the domain operations.

=== init
An +init()+ operation is provided and must be invoked at
domain initialization time.

.init Implementation
----
<<domain operations>>=
domain operation
init()
{
    // Your code here.
}
----

////
Add other domain operation sections as necessary
////

== External Operations
Explain the external operations here.
These are the domain operations.

=== externalOp1
Explain the interface and expected semantics of the operation in
terms of what the domain assumes will happen.

Param1::
    Explain the type and meaning of Param1.
Param2::
    Explain the type and meaning of Param2.

.externalOp1 Implementation
----
<<external operations>>=
external operation
startMotorControl(
    Data_Type_1 Param1,
    Data_Type_1 Param2)
{
}
----

////
Add other external operation sections as necessary
////


== Classes and Relationships
Discuss the class diagram.
The preferred method is to discuss classes and relationships in
a natural order rather than separating classes and relationships into
separate sections.
This is in better keeping with the class diagram
////
Use an

image::filename[]

construct to include the image.
Prefer SVG images. They render well in a large number of circumstances.
////

////
Add a separate section for each class in the class and relationship
in the diagram.
////

=== Class 1 (C1)
Justify the abstraction of Class 1 in this subject matter.

==== Attributes

Attr1::
    Explain attribute 1. Include its data type and why this attribute
    is important to the abstraction of the class.

Attr2::
    Explain attribute 2. Include its data type and why this attribute
    is important to the abstraction of the class.

==== Instance Operations
Discuss the instance operations for Class 1.

[[compute-base-value-action]]
===== Compute Base Value
Explain the interface and purpose of the +computeBaseValue+ operation.

Param1::
    Explain Parameter 1.
Param2::
    Explain Parameter 2.

----
Place action language for operation here.
N.B. since there is no chunk marker, it is not placed in the tangled
output.
----
<<compute-base-value-implementation,see implementation>>

[[compute-base-value-implementation]]
.Compute Base Value Implementation
----
<<C1 instance operations>>=
instance operation
computeBaseValue(
    unsigned Param1,
    unsigned Param2)
{
    // Place the C implementation of the operation here.
    return Param1 + Param2 ;
}
----
<<compute-base-value-action,see action language>>

==== Implementation Components
----
<<classes>>=
<<C1 class>>

<<C1 class>>=
class
    <<C1 attributes>>
    <<C1 instance operations>>
    machine
        <<C1 state model>>
    end
end
----

Attr1::
    Discuss how the modelled attribute is represented in the
    implementation data type.
    Discuss the significance of any default value.
----
<<C1 attributes>>=
attribute (Data_Type_1 Attr1) default {0}
----

Attr2::
    Discuss how the modelled attribute is represented in the
    implementation data type.
    Discuss the significance of any default value.
----
<<C1 attributes>>=
attribute (Data_Type_1 Attr2) default {5}
----

////
Add a separate section for each relationship in the class diagram.
////
=== Relationship R1
Describe R1, its multiplicity and conditionality and what the
association represents in the domain subject matter.
Describe how it is realized in the class attributes.

== Active Classes
Describe the basic partitioning of control over the domain.
Include class collaboration diagrams or sequence diagrams to show
how control will happen in the domain.

////
A separate section is required for each active class.
////

=== Class C1 State Model
Explain the state model for class C1.
Include the graphic of the state model.
////
image::c1-states.svg[]
////

.Stopped State
Explain the significance of the Stopped state.
----
Place action language for the stopped state here.
----

.Stopped State Implementation
----
<<C1 state model>>=
state Stopped() {
    // Include your C code for the state here.
}
transition Stopped - Run -> Starting
transition Stopped - Stop -> IG
----

.Starting State
Explain the significance of the Starting state.
----
Place action language for the starting state here.
----

.Starting State Implementation
----
<<C1 state model>>=
state Starting() {
    // Include your C code for the state here.
}
transition Starting - Stop -> Stopped
transition Starting - Run -> IG
----

////
Repeat for each active class.
////

== Code Layout
Explain the layout of the pycca file that is to be extracted from
this literate program.

.Root Chunk
----
<<*>>=
domain mtrctrl
    <<interface prolog>>
    <<implementation prolog>>
    <<domain operations>>
    <<external operations>>
    <<classes>>
    <<interface epilog>>
    <<implementation epilog>>
end
----

// Implementation and Interface prolog sections can also appear elsewhere
// in the literate program.
.Implemenation Prolog
----
<<implementation prolog>>=
implementation prolog {
    #include "mydomain.h"
    // Any additional implementation includes, etc.
    <<internal data types>>
}
----

.Interface Prolog
----
<<interface prolog>>=
interface prolog {
    #include <stdint.h>
    // Any additional interface includes, etc.
    <<external data types>>
}
----
